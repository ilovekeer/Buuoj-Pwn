0x400a7e: ret
0x4211d5: retw
0x401a7d: iret
0x4090a1: retf
0x406fe4: fs ret
0x46bc01: bnd ret
0x48ff90: ds iret
0x4167b1: ret 0x0
0x45daff: rex ret
0x4216d1: cld; ret
0x4004cf: nop; ret
0x464c7a: ret 0x23
0x407f1b: retf 0x0
0x488c28: ret 0x33
0x49012a: sti; ret
0x40a4f5: clc; ret
0x4155c8: lock ret
0x4009d0: repz ret
0x488738: ret 0x24
0x489730: ret 0x1d4
0x4109b3: stc; iret
0x416a0a: ret 0x1c6
0x40f713: ret 0xf49
0x4333bb: ret 0xf66
0x416821: ret 0xfc3
0x45fc4f: ret 0xf48
0x494ebe: rex.B ret
0x4205b5: lahf; ret
0x489ec8: ret 0x1d5
0x40d74b: ret 0x389
0x40fc6a: ret 0x6b9
0x43eb07: rex.R ret
0x416b1a: ret 0x22a
0x477a08: int3; ret
0x41d785: ret 0x876
0x415e68: ret 0x672
0x46d43b: rex.W ret
0x415d08: ret 0x66c3
0x46f7d2: ret 0x950f
0x41db96: ret 0x6776
0x40ee53: ret 0x7408
0x41dbe6: ret 0x1776
0x40f807: ret 0x8548
0x40748e: ret 0x8348
0x41dba6: ret 0x5776
0x43a47e: ret 0xc35b
0x415e60: ret 0x4801
0x460e6c: ret 0x4804
0x40e9cf: ret 0x8b48
0x44862c: ret 0x4811
0x45e816: rex.WR ret
0x47682e: ret 0xa4e9
0x46c7ca: ret 0x7472
0x46e4cb: ret 0x894e
0x41278e: retf 0x1be
0x46e4ad: ret 0x8b4a
0x432cf8: ret 0x48c3
0x4389c2: ret 0x3a01
0x410293: rex.WB ret
0x41d540: ret 0xc085
0x41d765: ret 0x2876
0x41e3ae: ret 0xff2d
0x46238c: ret 0x31c3
0x47c72d: ret 0xfff9
0x415646: ret 0xe775
0x4690ca: ret 0xfd50
0x43ff72: ret 0xfc04
0x43a472: ret 0xe680
0x40f802: ret 0xe375
0x497c37: rex.WX ret
0x44c8bd: ret 0xe920
0x45802f: ret 0x894c
0x455e1d: ret 0x8941
0x4330b8: ret 0x2288
0x415d7a: rex.X iret
0x436f08: ret 0x7520
0x4324c5: ret 0x90c3
0x40d73c: ret 0xe083
0x41d4ee: ret 0x860f
0x47556e: ret 0x8440
0x432e50: retf 0xf48
0x43bddc: ret 0x1f0f
0x476806: ret 0xd284
0x400b32: leave; ret
0x43ade1: ret 0x8948
0x41d755: ret 0x3876
0x436f43: ret 0x7504
0x41d775: ret 0x1876
0x41dbc6: ret 0x3776
0x41414b: ret 0xc275
0x406192: ret 0xfff0
0x42665c: retf 0xf0d
0x447ba5: ret 0xc389
0x43b782: ret 0xffc0
0x4486cf: ret 0xfffc
0x45f948: ret 0xe575
0x44864e: ret 0xc083
0x4139eb: ret 0xffff
0x461c81: retf 0x6b8
0x48e9c2: ret 0xc4c3
0x41414d: ret 0xc3f3
0x45db83: ret 0x4389
0x461fc1: ret 0x1477
0x40b6ba: ret 0x8949
0x436f36: ret 0x7502
0x4054f1: ret 0x4401
0x44a330: ret 0xffe0
0x409407: ret 0x2948
0x46e52d: ret 0xf075
0x40fe62: ret 0x4908
0x436f15: ret 0x7540
0x41f02c: ret 0x830f
0x46c8fc: ret 0xd8f7
0x44238e: ret 0x41c3
0x4600e1: retf 0xf4c
0x41e2b6: ret 0xe883
0x46c7d5: ret 0xcde8
0x432926: ret 0xf8c5
0x46c969: ret 0x840f
0x4325b1: ret 0xc148
0x421e93: rex.RX ret
0x4753ab: ret 0x9272
0x497d37: rex.RB ret
0x4903dc: sahf; retf
0x40713f: retf 0x743
0x40d741: retf 0x8501
0x43a57f: retf 0xd231
0x4157d2: retf 0x4c89
0x41f953: rex.WRX ret
0x4711b7: retf 0xe677
0x470292: retf 0x8b41
0x401f76: retf 0xc089
0x45db79: retf 0x8508
0x47a55d: retf 0x9de8
0x46daec: retf 0x8b48
0x456968: rex.WRB ret
0x409ab0: retf 0x8920
0x472d10: retf 0xffff
0x438b9a: retf 0x4466
0x4424c4: retf 0x1489
0x491e01: retf 0xebbf
0x45fb89: rex.RB iret
0x4157d8: retf 0x8902
0x43a55f: retf 0xb60f
0x45fd86: retf 0xfdc5
0x43a376: retf 0xd975
0x43a04c: retf 0xe475
0x461fd1: es repz ret
0x462464: retf 0x8348
0x4747e2: retf 0xff7d
0x406269: fpatan; ret
0x422077: retf 0x894c
0x4126d7: rex.RXB ret
0x43a1b3: retf 0xe175
0x46082e: retf 0xfffe
0x494bb3: rex.WXB ret
0x41d419: retf 0x8d4a
0x45a6cb: retf 0xc148
0x4913ab: retf 0x99e0
0x432d8c: retf 0x8948
0x43af9e: retf 0xd284
0x43d912: retf 0x19b8
0x461645: syscall; ret
0x400d38: pop rbx; ret
0x421e2a: rex.WRXB ret
0x401d0d: pop r13; ret
0x421ef0: rex.RXB retf
0x4005f6: pop rdi; ret
0x405894: pop r14; ret
0x43d9d4: pop r10; ret
0x460bdd: bnd repz ret
0x43d9d5: pop rdx; ret
0x43b97c: pop rax; ret
0x4005f5: pop r15; ret
0x40ee5f: neg eax; ret
0x405895: pop rsi; ret
0x400a08: pop rbp; ret
0x40148a: pop rsp; ret
0x401489: pop r12; ret
0x42177b: rex.RXB iret
0x491844: int 0x6b; ret
0x41f94e: push rdi; ret
0x4044a8: shr cl,1; ret
0x43d9ac: setae al; ret
0x4721f5: rex.WRB iretq
0x400a7f: nop; repz ret
0x49dafe: push rbp; ret
0x421e76: rex.WRXB retf
0x48ef06: push rsi; ret
0x465f08: push rsp; ret
0x43c547: or bl,dh; ret
0x479855: or dh,bl; ret
0x40dcff: lock repz ret
0x447b21: push rbx; ret
0x44490f: add cl,ch; ret
0x416278: sbb bl,ch; ret
0x407f1a: rex.X retf 0x0
0x421705: rex.WRXB iretq
0x40f726: xor bl,dh; ret
0x45dafe: rex.W; rex ret
0x40a449: add dh,bl; ret
0x41d716: cmp al,dh; ret
0x4783d5: sbb dh,bl; ret
0x413740: add bl,ch; ret
0x49bf16: add bh,ah; ret
0x4009cf: add bl,dh; ret
0x46bc00: xor dl,dh; ret
0x402837: add al,ch; ret
0x4389d2: in eax,dx; ret
0x476a0f: shr cl,cl; ret
0x41e30d: nop [rax]; ret
0x46f727: sbb al,ch; ret
0x46c897: adc al,ch; ret
0x43a04e: in al,0xf3; ret
0x4326d8: add al,0x7; ret
0x471b1b: jmp [rcx]; retf
0x4057ee: add bl,sil; ret
0x41da28: vzeroupper; ret
0x40d74a: rex.R ret 0x389
0x43c954: or esi,ebx; ret
0x42a8c2: rex.WB clc; ret
0x487909: sldt [rax]; ret
0x41e309: or eax,0x1; ret
0x4004ce: xchg ax,ax; ret
0x4155c7: rex.X; lock ret
0x45e815: rex; rex.WR ret
0x40d786: or ebx,esi; ret
0x490129: addr32 sti; ret
0x44c68a: or al,0x83; ret
0x40bbcb: mov dh,0x0; ret
0x477883: clc; leave; ret
0x400b31: nop; leave; ret
0x42a8d3: rex.WB cld; ret
0x40a911: mov dh,0x2; ret
0x47252b: add al,ch; iret
0x426eea: lock rex.RX ret
0x43903b: rex.RX clc; ret
0x46fdd2: sub rax,r8; ret
0x47750d: adc al,0xf7; ret
0x40e09f: add al,0x3a; ret
0x438f0d: sub eax,esi; ret
0x432d42: bsf rax,rdx; ret
0x400413: add esp,0x8; ret
0x40a4f4: mov eax,edi; ret
0x46f363: mov rax,rsi; ret
0x461111: mov eax,0x5; ret
0x4610d0: mov rax,0x1; ret
0x461130: mov rax,0x7; ret
0x46fdd3: sub eax,eax; ret
0x4331a8: mov rax,rdx; ret
0x451674: mov eax,r9d; ret
0x4610a0: add rax,0x1; ret
0x4604fc: rex.R ret 0x90c3
0x43a572: mov eax,eax; ret
0x460c8a: shr rax,0x2; ret
0x4610b1: add eax,0x3; ret
0x41d4f9: add eax,ecx; ret
0x461131: mov eax,0x7; ret
0x4610f1: mov eax,0x3; ret
0x427c16: jg 0x427c27; ret
0x4620dc: adc ebx,esi; ret
0x42a736: jg 0x42a747; ret
0x48e9c0: rol cl,0xc2; ret
0x42a8ae: rex.WB; lock ret
0x438d43: sub rax,0x1; ret
0x451675: mov eax,ecx; ret
0x4610e0: mov rax,0x2; ret
0x4610f0: mov rax,0x3; ret
0x460e93: mov eax,0x2; ret
0x400412: add rsp,0x8; ret
0x46f364: mov eax,esi; ret
0x432e59: sub eax,edi; ret
0x49bee3: or al,[rcx]; ret
0x49028a: xor al,0xd8; ret
0x477a06: mov rsp,rcx; ret
0x438e13: sub rax,rdx; ret
0x48f10a: mov ah,0x13; ret
0x461100: mov rax,0x4; ret
0x40ea1b: sub eax,edx; ret
0x436ed0: xor rax,rax; ret
0x403d4a: add al,0xeb; ret
0x4159b7: mov cl,0x35; ret
0x43b77c: add esi,ebx; ret
0x415c44: rex.R ret 0x8348
0x40714d: xor eax,eax; ret
0x43902c: rex.RX; lock ret
0x477a07: mov esp,ecx; ret
0x43dc32: ja 0x43dc54; ret
0x461121: mov eax,0x6; ret
0x43a47d: rex.R ret 0xc35b
0x44a36b: and eax,0x0; ret
0x460c8b: shr eax,0x2; ret
0x461097: add rax,0x2; ret
0x4402f0: mov eax,0x8; ret
0x461120: mov rax,0x6; ret
0x438d44: sub eax,0x1; ret
0x46eeb2: cmp ecx,ecx; ret
0x40a4f3: mov rax,rdi; ret
0x415d80: rex.R ret 0x66c3
0x44864d: rex.W ret 0xc083
0x491f8a: mov ch,0xab; ret
0x41d724: add eax,edi; ret
0x44843d: and al,0x89; ret
0x43ba6b: add al,0xf3; ret
0x432cf6: bsf eax,edx; ret
0x45fc5e: add al,0x31; ret
0x41d4f8: add rax,rcx; ret
0x49bd25: jo 0x49bd2a; ret
0x461098: add eax,0x2; ret
0x45fb5a: add al,0x37; ret
0x416820: rex.RB ret 0xfc3
0x4610a1: add eax,0x1; ret
0x438f0c: sub rax,rsi; ret
0x417fac: sub eax,ecx; ret
0x432e58: sub rax,rdi; ret
0x41d723: add rax,rdi; ret
0x44238d: rex.W ret 0x41c3
0x4610b0: add rax,0x3; ret
0x461110: mov rax,0x5; ret
0x48f5b0: mov ah,0xa5; ret
0x43904a: rex.WRX cld; ret
0x41d715: cmp al,r14b; ret
0x46ef59: adc eax,eax; ret
0x45db82: rex.R ret 0x4389
0x4331a9: mov eax,edx; ret
0x461101: mov eax,0x4; ret
0x455e2f: mov eax,0x1; ret
0x40748d: rex.RB ret 0x8348
0x461d31: add esp,0x78; ret
0x45e7f0: cmove r8,rcx; ret
0x421ffa: rex.WRXB cld; ret
0x462322: rex.WRB; repz ret
0x414ef8: add rsp,0x18; ret
0x427bb3: mov [rdi],dx; ret
0x414ef9: add esp,0x18; ret
0x415bc0: mov eax,0x16; ret
0x46d438: add rsp,0x48; ret
0x43a50d: rex.RB ret 0xc35b
0x43b97a: add esp,0x58; ret
0x4691ea: add al,0x75; retf
0x41d746: cmp [rax],ah; ret
0x43b86c: add esp,0x68; ret
0x40ed7d: add [rcx],al; ret
0x426d7e: rex.RXB; lock ret
0x4079d4: add rsp,0xd8; ret
0x46de58: mov [rdi],r9; ret
0x4142ca: sub [rax],al; ret
0x432925: rex.RB ret 0xf8c5
0x496492: xor [rdx],al; ret
0x401a7b: out 0xe8,al; iret
0x4364d0: mov [rdi],dh; ret
0x49571e: jno 0x49572a; ret
0x48f6f9: xchg esp,eax; ret
0x475cb5: add [rax],cl; ret
0x4079d9: add [rax],al; ret
0x427c23: mov [rdi],dl; ret
0x475173: mov [r10],r8; ret
0x43dc14: sub [rcx],al; ret
0x439319: mov [rdi],si; ret
0x415d07: rex.RB ret 0x66c3
0x43eecd: sar [rcx],cl; ret
0x461f85: add rsp,0x38; ret
0x43b9d5: pop rdx; repz ret
0x43b86b: add rsp,0x68; ret
0x47219f: nop; pop rbx; ret
0x4014ca: add [rcx],bh; ret
0x403efb: xchg ebp,eax; ret
0x43b74a: add esp,0x28; ret
0x46238b: rex.RB ret 0x31c3
0x415c80: rex.RB ret 0xc3f3
0x48f6e6: add al,0x3d; retf
0x43b979: add rsp,0x58; ret
0x4079d5: add esp,0xd8; ret
0x48ed25: sbb bl,[rsi]; ret
0x41564a: sub eax,0x10; ret
0x46d439: add esp,0x48; ret
0x4324c4: rex.RB ret 0x90c3
0x447ba4: rex.RX ret 0xc389
0x4479b8: shr [rcx],cl; ret
0x461f86: add esp,0x38; ret
0x43c5db: sub ebp,eax; iret
0x41f03d: cmp [rdi],dl; ret
0x415649: sub rax,0x10; ret
0x42a8f2: mov [rdi],cl; ret
0x41d736: cmp [rax],dl; ret
0x427b4b: mov [rdi],cx; ret
0x461d30: add rsp,0x78; ret
0x42151a: rex.WRXB clc; ret
0x43b749: add rsp,0x28; ret
0x436005: lea eax,[rdx]; ret
0x475119: fdiv st,st(3); ret
0x41d554: xlat ds:[rbx]; ret
0x427914: mov [rdi],edx; ret
0x42760c: mov [rdi],ecx; ret
0x45e7f1: cmove eax,ecx; ret
0x43d9ab: cli; setae al; ret
0x46aea2: mov [rsi],eax; ret
0x415d7f: cmove eax,edx; ret
0x4216d0: push rdi; cld; ret
0x44238c: cmovs eax,edx; ret
0x4776ec: nop [rax+0x0]; ret
0x42760b: mov [rdi],rcx; ret
0x4392fb: mov [rdi],rsi; ret
0x43baa8: push rdi; repz ret
0x415d7e: cmove rax,rdx; ret
0x4394b8: adc [rbx],eax; ret
0x421558: push rdi; clc; ret
0x478da4: dec [rax-0x9]; ret
0x439431: adc [rbx],esp; ret
0x4392fc: mov [rdi],esi; ret
0x44a699: add rsp,0x148; ret
0x436af3: lea eax,[rdi]; ret
0x40ece5: sub [rax],eax; ret
0x436af2: lea rax,[rdi]; ret
0x40e9e7: mov [rdx],rax; ret
0x464c79: push rdi; ret 0x23
0x40f811: mov [rsi],rcx; ret
0x46ad39: and eax,[rax]; ret
0x40f812: mov [rsi],ecx; ret
0x4913aa: rex.WB retf 0x99e0
0x46a17a: mov eax,[rcx]; ret
0x45f191: dec [rax+0x1]; ret
0x427913: mov [rdi],rdx; ret
0x40f916: dec [rcx-0x9]; ret
0x426dee: rex.WRXB; lock ret
0x436004: lea rax,[rdx]; ret
0x40e9e8: mov [rdx],eax; ret
0x4903e6: mov edi,[rdx]; ret
0x449100: mov [rdi],0x0; ret
0x46df92: jmp 0x89668e3; ret
0x470033: and rax,[rax]; ret
0x477522: mov [rax],edx; ret
0x47aad8: stc; push rbx; ret
0x477521: mov [rax],rdx; ret
0x46b789: mov eax,[rax]; ret
0x44a69a: add esp,0x148; ret
0x4774b2: mov rax,[rax]; ret
0x46aea1: mov [rsi],rax; ret
0x43c9de: dec [rax+0x9]; ret
0x44a367: add rax,fs:0x0; ret
0x415d06: cmovne eax,edx; ret
0x496df0: add [rdx],0x5a; ret
0x44a368: add rax,ds:0x0; ret
0x42759b: movq [rdi],mm0; ret
0x43b6ec: push [rbx+0x1]; ret
0x44fc54: dec [rcx+0x39]; ret
0x4044a7: rex.R shr cl,1; ret
0x4275f5: movq [rdi],mm1; ret
0x44a369: add eax,ds:0x0; ret
0x46d104: sub rax,fs:0x0; ret
0x4155da: cmovne eax,ecx; ret
0x458aba: dec [rcx+0x63]; ret
0x4774c9: fcomi st,st(3); ret
0x40c068: dec [rax+0x39]; ret
0x405192: dec [rax-0x7d]; ret
0x4155d9: cmovne rax,rcx; ret
0x49dafc: add [rdx],0x55; ret
0x411c8a: dec [rcx-0x7b]; ret
0x4333c6: ror [rdi],0x85; ret
0x40d2e2: in eax,dx; repz ret
0x438eb4: movsxd eax,ecx; ret
0x402977: dec [rax-0x39]; ret
0x48f77d: and ebx,[rbx]; iret
0x46e00d: jmp 0x1096695e; ret
0x415d05: cmovne rax,rdx; ret
0x41d735: cmp [rax],r10b; ret
0x4090ad: dec [rax+0x29]; ret
0x4220ec: rex.RXB retf 0x894c
0x49af74: add [rdx],0x4a; ret
0x467ba8: dec [rcx-0x77]; ret
0x41826f: shr [rcx],0xc8; ret
0x40197d: dec [rax-0x77]; ret
0x472d0f: rex.WRB retf 0xffff
0x46d106: sub eax,ds:0x0; ret
0x41d745: cmp [rax],r12b; ret
0x45aa3c: dec [rbp+0x63]; ret
0x4388c8: fdivr st,st(7); ret
0x49dab8: add [rdx],0x76; ret
0x43264d: xlat ds:[rbx]; retf
0x438eb3: movsxd rax,ecx; ret
0x46d105: sub rax,ds:0x0; ret
0x43dc4d: nop [rax]; repz ret
0x409e6f: fmul [rax-0x77]; ret
0x401b24: call 0x5c817884; ret
0x469211: or [rax+0x1],cl; ret
0x44c990: in al,0xf; lahf; ret
0x46137d: call 0x783ed884; ret
0x46b6b2: call 0x7cd1feb8; ret
0x40c1b3: call 0x5c821f13; ret
0x406fe0: call 0x64cdbbe8; ret
0x490128: shl [rdi-0x5],1; ret
0x461501: call 0x783eda08; ret
0x46124c: call 0x783ed753; ret
0x474051: call 0x74d48c57; ret
0x46f2a0: or [rax+0x2],bh; ret
0x4599e8: fmul [rbp+0x63]; ret
0x4109b1: add al,ch; stc; iret
0x4615c0: call 0x783edac7; ret
0x4612de: call 0x783ed7e5; ret
0x41db9b: clc; vzeroupper; ret
0x461525: call 0x783eda2c; ret
0x40a910: movzx eax,[rdx]; ret
0x46159c: call 0x783edaa3; ret
0x40bbca: movzx eax,[rax]; ret
0x461565: call 0x783eda6c; ret
0x461545: call 0x783eda4c; ret
0x461575: call 0x783eda7c; ret
0x401ab2: call 0x5c817812; ret
0x4614ea: call 0x783ed9f1; ret
0x45aa5a: fadd [rcx-0x77]; ret
0x40515b: ror [rax+0x1],1; ret
0x439b92: cld; vzeroupper; ret
0x4615e0: call 0x783edae7; ret
0x461270: call 0x783ed777; ret
0x4913b8: fcmovb st,st(3); ret
0x422076: rex.WRXB retf 0x894c
0x461194: call 0x783ed69b; ret
0x46162e: call 0x783edb35; ret
0x407f1f: call 0x5c81dc7f; ret
0x40bb38: call 0x5c821898; ret
0x46434e: leave; nop; repz ret
0x409afb: call [rbx+0x5d]; ret
0x461290: call 0x783ed797; ret
0x4614b8: call 0x783ed9bf; ret
0x42a8e5: mov [r9-0x2],cx; ret
0x438d5e: xchg ax,ax; repz ret
0x40909e: dec [rax-0x77]; retf
0x463f97: fucomi st,st(0); ret
0x40bb54: call 0x5c8218b4; ret
0x46fdd1: clc; sub rax,r8; ret
0x405893: pop rbp; pop r14; ret
0x42a8c0: mov [r9-0x8],rcx; ret
0x43ff70: add al,ch; ret 0xfc04
0x40f60f: add eax,0x2921cc; ret
0x46dc38: or [rbp+0x39],cl; ret
0x401f33: pop r15; pop rbp; ret
0x43656a: mov [rdi+0x8],dx; ret
0x409412: or [rax+0x29],cl; ret
0x4005f4: pop rsi; pop r15; ret
0x46df93: mov [rdi+0x8],r9; ret
0x460d9f: clc; shr rax,0x2; ret
0x46b788: mov eax,fs:[rax]; ret
0x4364f6: mov [rdi+0x2],dh; ret
0x40ea83: xor eax,eax; repz ret
0x43d9f9: pop rdx; pop rsi; ret
0x40f685: add eax,0x2921b6; ret
0x407abe: pop rsi; pop rbp; ret
0x40c03f: nop; xor eax,eax; ret
0x4383c7: repz sub eax,edx; ret
0x43ac8a: pop rbp; pop rbp; ret
0x4403f2: add eax,0x264531; ret
0x401c86: pop rbx; pop rbp; ret
0x438abc: outs dx,ds:[rsi]; ret
0x4093e3: adc [rax+0x1],cl; ret
0x44a909: sbb [rax+0x1],cl; ret
0x49bee0: or eax,0x10a0303; ret
0x401f34: pop rdi; pop rbp; ret
0x4620db: add al,0x11; repz ret
0x49bf38: or eax,0x1370303; ret
0x43b78b: add bh,[rax-0x1]; ret
0x438bff: add [rcx+0x1],cl; ret
0x436528: mov [rdi+0x4],dx; ret
0x421a34: mov [rdi-0x2],dx; ret
0x40934a: and [rax+0x1],cl; ret
0x46de89: mov [rdi-0x8],r9; ret
0x401488: pop rbp; pop r12; ret
0x447d02: add eax,0x25c171; ret
0x4780ae: or [rax-0x77],cl; ret
0x409aba: add [rax-0x1],bh; ret
0x46f0ec: add [rax+0x1],bh; ret
0x4945e5: add bl,[rax+0xa]; ret
0x492139: fcomp [rdx+0x21]; ret
0x49becf: or rax,0x34b0303; ret
0x402157: add [rax+0x1],cl; ret
0x46ae2b: add eax,0x239580; ret
0x4084e7: or cl,[rax-0x7d]; ret
0x468328: ror [rax-0x7d],1; ret
0x49bed0: or eax,0x34b0303; ret
0x45a6db: fimul [rbp+0x63]; ret
0x460e7e: mov eax,edx; repz ret
0x40f725: cmp al,0x30; repz ret
0x408f6e: ror [rax+0x29],1; ret
0x46f2fd: add [rax+0x2],bh; ret
0x439055: mov [rsi-0x2],cx; ret
0x40f695: add eax,0x2921ae; ret
0x40fc55: fcomp [rbx+0x5d]; ret
0x40e0ab: lea eax,[r8-0x1]; ret
0x4490c0: pop rbx; pop r14; ret
0x4276d3: or eax,0xf7f0ff3; ret
0x46f4b9: add eax,0x234baa; ret
0x46f097: rcr [rbp+0x5b],1; ret
0x4726bf: nop; add rsp,0x8; ret
0x45d47d: cmp [rax+0x1],cl; ret
0x46d237: pop rdx; pop rbx; ret
0x40f5f4: add eax,0x29479b; ret
0x40f5df: add eax,0x292204; ret
0x43ac89: pop r13; pop rbp; ret
0x49bf03: or rax,0x35b0303; ret
0x49bf04: or eax,0x35b0303; ret
0x401d0c: pop rsp; pop r13; ret
0x4217cb: mov [rdi-0x1],dl; ret
0x42a8d1: mov [r9-0x4],ecx; ret
0x40f5be: add eax,0x292249; ret
0x432511: enter 0xf66,0xeb; ret
0x477faf: sbb eax,eax; repz ret
0x49571d: add dh,[rcx+0xa]; ret
0x4383e7: cmc; sub eax,edx; ret
0x41d4f7: clc; add rax,rcx; ret
0x405892: pop r13; pop r14; ret
0x46bbfd: add rsp,0x30; bnd ret
0x4142c7: add eax,0x28d594; ret
0x475118: and al,0xd8; repz ret
0x4091b0: ror [rax-0x77],1; ret
0x40ece2: add eax,0x292439; ret
0x470031: add eax,0x23488a; ret
0x46bbfe: add esp,0x30; bnd ret
0x4019a7: fucomip st,st(0); ret
0x436f06: add dh,dh; ret 0x7520
0x421c1c: mov [rdi-0x2],cx; ret
0x4081f2: rcr [rbx+0x5d],1; ret
0x40f635: add eax,0x2921be; ret
0x46ad36: add eax,0x239675; ret
0x447e5c: pop rbx; pop r12; ret
0x438f0b: clc; sub rax,rsi; ret
0x46f098: pop rbp; pop rbx; ret
0x42a8e6: mov [r9-0x2],ecx; ret
0x436f41: add dh,dh; ret 0x7504
0x40f625: add eax,0x2921d6; ret
0x480ae6: add [rax],al; ret 0x0
0x44a335: mov fs:[rdx],rax; ret
0x401d0b: pop r12; pop r13; ret
0x401c85: or [rbx+0x5d],bl; ret
0x491f89: cmc; mov ch,0xab; ret
0x407abd: pop r14; pop rbp; ret
0x436f13: add dh,dh; ret 0x7540
0x49bf37: or rax,0x1370303; ret
0x46f129: add bh,[rax+0x1]; ret
0x43ee82: add eax,0x263479; ret
0x438397: lock sub eax,edx; ret
0x4005f3: pop r14; pop r15; ret
0x436f34: add dh,dh; ret 0x7502
0x43cbf2: or [rax-0x7d],cl; ret
0x4757c1: fucomip st,st(1); ret
0x46f284: add bh,[rax+0x2]; ret
0x472a35: fidivr [rax+0x1]; ret
0x43d9d3: pop rdx; pop r10; ret
0x4383d7: hlt; sub eax,edx; ret
0x460e7d: mov rax,rdx; repz ret
0x40c072: neg eax; pop rbx; ret
0x43602d: lea eax,[rdx+0x2]; ret
0x43666c: mov [rdi+0xf],rcx; ret
0x46d0f1: mov eax,[rax+0x8]; ret
0x439056: mov [rsi-0x2],ecx; ret
0x441516: and [rax-0x7d],cl; ret
0x436bff: lea eax,[rdi+0xc]; ret
0x415b44: mov esp,0x5c70028; ret
0x49bed2: add ecx,[rbx+0x3]; ret
0x43605b: lea eax,[rdx+0x4]; ret
0x43dbc5: mov [rax+0x8],edx; ret
0x4009ce: add [rax],al; repz ret
0x421519: mov [rdi-0x8],ecx; ret
0x436bfe: lea rax,[rdi+0xc]; ret
0x436c59: lea eax,[rdi+0xf]; ret
0x43611d: add eax,0xc428d48; ret
0x436b25: lea eax,[rdi+0x3]; ret
0x436537: mov [rdi+0x3],edx; ret
0x417fad: enter 0x31c3,0xc0; ret
0x46df94: mov [rdi+0x8],ecx; ret
0x46009f: add [rcx+0x39],cl; ret
0x4004cd: add [rsi-0x70],ah; ret
0x438bf3: lea rax,[rcx-0x1]; ret
0x43606d: lea eax,[rdx+0x5]; ret
0x436579: mov [rdi+0x7],edx; ret
0x43913f: adc [rsi+0x3],edx; ret
0x40a066: cmp [rax+0x29],cl; ret
0x46defe: mov [rdi-0x10],r9; ret
0x43609c: lea rax,[rdx+0x8]; ret
0x457621: add cl,[rax+0x29]; ret
0x43611e: lea rax,[rdx+0xc]; ret
0x436b38: lea eax,[rdi+0x4]; ret
0x4084be: cmp [rax+0x39],cl; ret
0x4419d7: adc [rax-0x77],cl; ret
0x43664d: mov [rdi+0xe],ecx; ret
0x42abb7: adc [rcx+0x7],edi; ret
0x401cd7: sub cl,[rax-0x77]; ret
0x436b37: lea rax,[rdi+0x4]; ret
0x436044: lea rax,[rdx+0x3]; ret
0x42a8d2: mov [rcx-0x4],ecx; ret
0x47039f: sbb [rax-0x77],cl; ret
0x4599dc: add cl,[rcx+0x29]; ret
0x4366b0: mov [rdi+0x18],dh; ret
0x436b8a: lea eax,[rdi+0x8]; ret
0x4360fc: lea rax,[rdx+0xb]; ret
0x42abb6: adc [rcx+0x7],rdi; ret
0x436bbc: lea rax,[rdi+0xa]; ret
0x4096e7: sbb [rbx+0x5d],bl; ret
0x436b1a: lea eax,[rdi+0x2]; ret
0x47650c: sub [rax-0x77],cl; ret
0x43606c: lea rax,[rdx+0x5]; ret
0x436b9e: lea rax,[rdi+0x9]; ret
0x42a816: adc [rcx-0x1],edi; ret
0x4017e3: fisttp [rax-0x7d]; ret
0x435f96: lea rax,[rdx+0x7]; ret
0x4365aa: mov [rdi+0x6],rdx; ret
0x4383b7: repnz sub eax,edx; ret
0x43660b: mov [rdi+0xf],ecx; ret
0x43605a: lea rax,[rdx+0x4]; ret
0x442869: or ecx,[rax-0x7d]; ret
0x43611f: lea eax,[rdx+0xc]; ret
0x40569f: add [rax-0x7d],cl; ret
0x4691e9: clc; add al,0x75; retf
0x436b24: lea rax,[rdi+0x3]; ret
0x40fa11: sbb [rax+0x39],cl; ret
0x40d316: mov [rdi+0x8],rax; ret
0x488736: add [rax],al; ret 0x24
0x4360dd: lea eax,[rdx+0xa]; ret
0x40d317: mov [rdi+0x8],eax; ret
0x46107f: pcmpeqb mm3,[rsi]; ret
0x42a851: adc [rcx-0x1],rbx; ret
0x436b9f: lea eax,[rdi+0x9]; ret
0x435f97: lea eax,[rdx+0x7]; ret
0x40f987: adc [rcx-0x7d],al; ret
0x436017: lea eax,[rdx+0x1]; ret
0x43656b: mov [rdi+0x8],edx; ret
0x4360fd: lea eax,[rdx+0xb]; ret
0x405a60: sub [rax-0x7d],cl; ret
0x436bbd: lea eax,[rdi+0xa]; ret
0x436c58: lea rax,[rdi+0xf]; ret
0x438fdd: adc [rsi-0x1],rdx; ret
0x4360bd: lea eax,[rdx+0x9]; ret
0x449290: add [rax+0x63],cl; ret
0x4422df: xor [rax-0x7d],cl; ret
0x410265: adc eax,0x1480029; ret
0x43913e: adc [rsi+0x3],rdx; ret
0x435fee: lea rax,[rdx+0xf]; ret
0x400fb7: add [rax-0x39],cl; ret
0x421557: mov [rdi-0x8],edx; ret
0x436bdd: lea eax,[rdi+0xb]; ret
0x436c3e: lea rax,[rdi+0xe]; ret
0x42a815: adc [rcx-0x1],rdi; ret
0x436c3f: lea eax,[rdi+0xe]; ret
0x43613f: lea eax,[rdx+0xd]; ret
0x43608b: lea eax,[rdx+0x6]; ret
0x421518: mov [rdi-0x8],rcx; ret
0x40cd17: add rsp,0x80; repz ret
0x409ec8: add [rax+0x29],cl; ret
0x478440: mov rax,[rsi+0x8]; ret
0x49170c: stos es:[rdi],eax; ret
0x400fd0: adc [rax-0x7d],cl; ret
0x4360dc: lea rax,[rdx+0xa]; ret
0x436bdc: lea rax,[rdi+0xb]; ret
0x46d0f0: mov rax,[rax+0x8]; ret
0x49bf06: add ebx,[rbx+0x3]; ret
0x40de9c: mov [r9+0xa8],0x0; ret
0x464c80: add [rbp-0x77],cl; ret
0x40cd18: add esp,0x80; repz ret
0x41da27: enter 0xf8c5,0x77; ret
0x436c1f: lea eax,[rdi+0xd]; ret
0x403118: add [rax-0x77],cl; ret
0x40fa36: adc [rbx+0x5d],bl; ret
0x43da0e: add al,[rcx+0x39]; ret
0x43602c: lea rax,[rdx+0x2]; ret
0x439049: mov [rsi-0x4],ecx; ret
0x462ec7: adc [rax+0x39],cl; ret
0x421a35: mov [rdi-0x2],edx; ret
0x436b6b: lea eax,[rdi+0x6]; ret
0x46e431: fisttp [rax-0x77]; ret
0x4692c5: mov [rax-0x77],cl; ret
0x4073bb: scas eax,es:[rdi]; ret
0x42ad18: adc [rdi-0x8],rdi; ret
0x43dbc4: mov [rax+0x8],rdx; ret
0x4365ab: mov [rdi+0x6],edx; ret
0x478441: mov eax,[rsi+0x8]; ret
0x41de8d: and cl,[rcx-0x77]; ret
0x427a53: add eax,0xf7f0ff3; ret
0x438bf4: lea eax,[rcx-0x1]; ret
0x436b77: lea eax,[rdi+0x7]; ret
0x436c1e: lea rax,[rdi+0xd]; ret
0x46dfc2: lods eax,ds:[rsi]; ret
0x44cfcf: add [rcx-0x77],cl; ret
0x436b76: lea rax,[rdi+0x7]; ret
0x46e00e: mov [rdi+0x10],r9; ret
0x412793: add [rcx-0x7d],cl; ret
0x488c26: add [rax],al; ret 0x33
0x403774: sbb cl,[rcx-0x7d]; ret
0x4216cf: mov [rdi-0x4],edx; ret
0x436045: lea eax,[rdx+0x3]; ret
0x415bbf: add [rax+0x16],bh; ret
0x40cf70: cmp [rbx+0x5d],bl; ret
0x43608a: lea rax,[rdx+0x6]; ret
0x421556: mov [rdi-0x8],rdx; ret
0x436016: lea rax,[rdx+0x1]; ret
0x4703d1: ror [rax-0x77],cl; ret
0x40ee5c: setne al; neg eax; ret
0x43659a: mov [rdi+0x5],rdx; ret
0x436b4c: lea rax,[rdi+0x5]; ret
0x4365d8: mov [rdi+0x10],dh; ret
0x42a8e7: mov [rcx-0x2],ecx; ret
0x436b07: lea eax,[rdi+0x1]; ret
0x436b89: lea rax,[rdi+0x8]; ret
0x43a064: adc eax,0xf880272; ret
0x457648: add al,[rcx+0x29]; ret
0x4391db: adc [rsi+0x7],rdx; ret
0x415ace: or ecx,[rax+0x63]; ret
0x43662e: mov [rdi+0x14],dh; ret
0x43c8eb: adc [rcx-0x77],cl; ret
0x436de1: or eax,0x1c478d48; ret
0x436bfd: add eax,0xc478d48; ret
0x43609d: lea eax,[rdx+0x8]; ret
0x43615e: lea rax,[rdx+0xe]; ret
0x4365ba: mov [rdi+0x7],rdx; ret
0x421c1d: mov [rdi-0x2],ecx; ret
0x435fef: lea eax,[rdx+0xf]; ret
0x43da07: add [rcx-0x77],al; ret
0x436b6a: lea rax,[rdi+0x6]; ret
0x456f4d: or eax,0x83fffffd; ret
0x43c9c6: cmp bl,[rbx+0x5d]; ret
0x4360bc: lea rax,[rdx+0x9]; ret
0x44556f: or [rax-0x7d],ecx; ret
0x4365ec: mov [rdi+0x10],cx; ret
0x42a852: adc [rcx-0x1],ebx; ret
0x4391dc: adc [rsi+0x7],edx; ret
0x41e3f4: enter 0xfffe,0xff; ret
0x40e0ac: lea eax,[rax-0x1]; ret
0x436529: mov [rdi+0x4],edx; ret
0x436b4d: lea eax,[rdi+0x5]; ret
0x43659b: mov [rdi+0x5],edx; ret
0x42ad19: adc [rdi-0x8],edi; ret
0x454151: outs dx,ds:[rsi]; retf
0x438fde: adc [rsi-0x1],edx; ret
0x46839a: ror [rax+0x39],cl; ret
0x4366d4: mov [rdi+0x18],cx; ret
0x421ff9: mov [rdi-0x4],ecx; ret
0x43613e: lea rax,[rdx+0xd]; ret
0x436b19: lea rax,[rdi+0x2]; ret
0x43609b: add eax,0x8428d48; ret
0x43615f: lea eax,[rdx+0xe]; ret
0x43b6fd: or eax,0xffffffff; ret
0x436b06: lea rax,[rdi+0x1]; ret
0x42a8c1: mov [rcx-0x8],ecx; ret
0x407e5b: add [rbx+0x5d],bl; ret
0x43664c: mov [rdi+0xe],rcx; ret
0x406fcf: add [rax+0x39],cl; ret
0x436d64: lea eax,[rdi+0x18]; ret
0x436d89: lea eax,[rdi+0x19]; ret
0x436ce2: lea eax,[rdi+0x14]; ret
0x43676e: movq [rdi+0xf],mm2; ret
0x4775d1: mov eax,[rdi+0xa8]; ret
0x45e814: mov eax,[rax+0x4c]; ret
0x41d721: mov esp,0xf80148c0; ret
0x44a450: add eax,0x18c48348; ret
0x475284: mov eax,[rsi+0xb0]; ret
0x40f676: sub [rax],eax; repz ret
0x40568c: add [rax-0x77],ecx; ret
0x477580: mov rax,[rdi+0xb8]; ret
0x4775c0: mov rax,[rdi+0xb0]; ret
0x436e42: lea rax,[rdi+0x1f]; ret
0x400a45: nop [rax]; pop rbp; ret
0x45e813: mov rax,[rax+0x4c]; ret
0x436e02: lea rax,[rdi+0x1d]; ret
0x478422: mov eax,[rsi+0x10]; ret
0x4057ec: nop [rax+0x0]; repz ret
0x436dc7: lea eax,[rdi+0x1b]; ret
0x436c80: lea rax,[rdi+0x11]; ret
0x4009cd: add [rax],r8b; repz ret
0x48e9be: mov esi,0xc2c1c0bf; ret
0x40f674: mov eax,0xf3002921; ret
0x436d41: lea eax,[rdi+0x17]; ret
0x4660c4: add eax,0x83480000; ret
0x477570: mov rax,[rdi+0xa0]; ret
0x436de3: lea eax,[rdi+0x1c]; ret
0x40ed00: mov rax,[rdi+0x68]; ret
0x4366f3: mov [rdi+0x17],ecx; ret
0x446ba3: cmp r9d,0x860f07ff; ret
0x40f57e: sub eax,[rdi+0x18]; ret
0x46deff: mov [rdi-0x10],ecx; ret
0x477560: mov [rdi+0x98],rsi; ret
0x45fac8: mov ebp,0xf80148c0; ret
0x40fa78: mov [rdi+0x60],rcx; ret
0x436d00: lea rax,[rdi+0x15]; ret
0x436c9e: lea rax,[rdi+0x12]; ret
0x45fd4c: mov ebp,0xf80148c6; ret
0x4162e7: add [rax-0x7d],ecx; ret
0x43b107: add [rax-0x77],cl; retf
0x49bf15: add eax,[rdx]; cld; ret
0x489ec6: add [rax],al; ret 0x1d5
0x41d722: ror [rax+0x1],0xf8; ret
0x43a527: and eax,0x7ff80000; ret
0x436c6c: lea eax,[rdi+0x10]; ret
0x40f57d: sub rax,[rdi+0x18]; ret
0x43a4db: inc [rbx]; pop rbx; ret
0x436e43: lea eax,[rdi+0x1f]; ret
0x411022: add [rax-0x7d],cl; retf
0x440382: cmp ecx,[rax-0x7d]; ret
0x472f05: sbb [rax-0x7d],ecx; ret
0x436da6: lea rax,[rdi+0x1a]; ret
0x46f74d: nop [rax]; pop rbx; ret
0x43674e: movq [rdi+0xe],mm2; ret
0x45dafc: mov [rax+0x40],rcx; ret
0x4752a1: mov eax,[rsi+0xb8]; ret
0x436c6b: lea rax,[rdi+0x10]; ret
0x467781: sar [rax+0xe],0x5b; ret
0x436d40: lea rax,[rdi+0x17]; ret
0x44c689: rex.RXB or al,0x83; ret
0x477530: mov rax,[rdi+0x98]; ret
0x43ee2d: add al,ch; pop rbp; ret
0x43bd48: add eax,0x58c48348; ret
0x477422: sbb eax,0x18c48348; ret
0x436c9f: lea eax,[rdi+0x12]; ret
0x4774e0: mov rax,[rdi+0x90]; ret
0x40ed01: mov eax,[rdi+0x68]; ret
0x4416f2: mov esi,0x83480147; ret
0x436d88: lea rax,[rdi+0x19]; ret
0x43a076: cld; mov [rdi],ecx; ret
0x477531: mov eax,[rdi+0x98]; ret
0x478421: mov rax,[rsi+0x10]; ret
0x46c2d0: cmp eax,0x89490000; ret
0x475e7f: add ecx,[rax-0x7d]; ret
0x45dafd: mov [rax+0x40],ecx; ret
0x415e0d: add [rcx+0x29],ecx; ret
0x41dc51: std; xlat ds:[rbx]; ret
0x43672e: movq [rdi+0xd],mm2; ret
0x4155c5: lea rax,[rdx-0x10]; ret
0x436de2: lea rax,[rdi+0x1c]; ret
0x436cbe: lea rax,[rdi+0x13]; ret
0x43df06: cmp eax,0x83491774; ret
0x43dc30: mov [rdi+0x20],rsi; ret
0x415e06: add [rcx-0x77],cl; retf
0x439308: cld; mov [rdi],esi; ret
0x44df74: add [rax-0x77],cl; iret
0x45f190: cli; dec [rax+0x1]; ret
0x436e22: lea rax,[rdi+0x1e]; ret
0x436e23: lea eax,[rdi+0x1e]; ret
0x436dc6: lea rax,[rdi+0x1b]; ret
0x477571: mov eax,[rdi+0xa0]; ret
0x475283: mov rax,[rsi+0xb0]; ret
0x4383a7: icebp; sub eax,edx; ret
0x40d983: add [rax+0x39],ecx; ret
0x4774e1: mov eax,[rdi+0x90]; ret
0x477561: mov [rdi+0x98],esi; ret
0x43896b: shl [rsi+0xf],0xda; ret
0x436da7: lea eax,[rdi+0x1a]; ret
0x446ba4: cmp ecx,0x860f07ff; ret
0x406fc1: cmp [rax-0x39],ecx; ret
0x490126: mov ebp,0xfb67d10d; ret
0x41f5ea: add eax,0xc0310000; ret
0x436d21: lea eax,[rdi+0x16]; ret
0x436ce1: lea rax,[rdi+0x14]; ret
0x47219c: mov eax,0x5b9066ff; ret
0x40dddb: mov [rdi+0xa8],0x0; ret
0x40de9d: mov [rcx+0xa8],0x0; ret
0x4069f3: xor ecx,[rax+0x39]; ret
0x456e57: sub eax,0x83000000; ret
0x4752b1: mov eax,[rsi+0xa8]; ret
0x436e03: lea eax,[rdi+0x1d]; ret
0x4430c9: xor ecx,[rax-0x7d]; ret
0x436d20: lea rax,[rdi+0x16]; ret
0x436cbf: lea eax,[rdi+0x13]; ret
0x40e9f3: sub eax,[rsi+0x10]; ret
0x43668c: mov [rdi+0x10],rcx; ret
0x44a30c: and eax,0xf3087400; ret
0x47750a: add eax,0xf7148948; ret
0x46fa7e: add eax,0x38c48348; ret
0x4157d6: or al,0x83; retf 0x8902
0x477581: mov eax,[rdi+0xb8]; ret
0x409abb: mov eax,0xffffffff; ret
0x436d63: lea rax,[rdi+0x18]; ret
0x40494f: adc [rax-0x7d],ecx; ret
0x48972e: add [rax],al; ret 0x1d4
0x4155c6: lea eax,[rdx-0x10]; ret
0x43a589: icebp; mov eax,eax; ret
0x4752b0: mov rax,[rsi+0xa8]; ret
0x40fa79: mov [rdi+0x60],ecx; ret
0x43dc12: mov [rdi+0x28],0x1; ret
0x43a06e: clc; mov [rdi],rcx; ret
0x456966: fmul [rdi]; rex.WRB ret
0x436c81: lea eax,[rdi+0x11]; ret
0x41026f: adc eax,0x39480029; ret
0x4392fa: clc; mov [rdi],rsi; ret
0x4365ed: mov [rdi+0x10],ecx; ret
0x4775c1: mov eax,[rdi+0xb0]; ret
0x43dc31: mov [rdi+0x20],esi; ret
0x4775d0: mov rax,[rdi+0xa8]; ret
0x4388c7: sbb eax,0xffffffff; ret
0x436d01: lea eax,[rdi+0x15]; ret
0x4752a0: mov rax,[rsi+0xb8]; ret
0x4366d5: mov [rdi+0x18],ecx; ret
0x406ff1: adc ecx,[rax-0x7d]; ret
0x462b22: std; dec [rax+0x39]; ret
0x46f7d1: xchg esp,eax; ret 0x950f
0x426dec: movq [rdi-0x10],mm1; ret
0x403d49: rex.RXB add al,0xeb; ret
0x43c41e: std; dec [rax-0x77]; ret
0x42721a: jmp 0x4fc18212; lock ret
0x461c8e: push [rdi+0x7]; repz ret
0x43b978: rex.X; add rsp,0x58; ret
0x46fe9b: add [rdx+rax*2],0x1; ret
0x43b77a: push [rdi+0x3]; repz ret
0x438f00: xchg esp,eax; ret 0xc085
0x43c545: push [rdi+0x8]; repz ret
0x487508: ror [rax+rax*1],0x0; ret
0x4514f6: cli; dec [rax+0x29]; ret
0x43678e: movq [rdi+0x10],mm2; ret
0x429d3a: jmp 0x4fc1ad32; lock ret
0x464d76: stc; dec [rax-0x77]; ret
0x43bb3c: push [rdi+0x9]; repz ret
0x43ba69: push [rdi+0x4]; repz ret
0x4326d7: lea eax,[rdi+rax*1]; ret
0x44b9f6: sti; dec [rax+0x29]; ret
0x41f02a: cmp [rdi],dl; ret 0x830f
0x4671e6: mov [rdi+0x308],rax; ret
0x47750c: mov [rdi+rsi*8],edx; ret
0x415c7e: cmovne rax,rdx; repz ret
0x40197c: clc; dec [rax-0x77]; ret
0x45fb59: lea eax,[rdi+rsi*1]; ret
0x40df28: xor [rbp+0x25],0x5b; ret
0x4326d6: lea rax,[rdi+rax*1]; ret
0x48ef04: mov ah,bl; push rsi; ret
0x46a1ed: mov rax,r8; pop rbx; ret
0x4139ea: xchg edx,eax; ret 0xffff
0x405520: rcr [rbp+0x41],0x5c; ret
0x473d9c: clc; dec [rax-0x7d]; ret
0x44a732: push [rdi+0xb]; repz ret
0x47aad7: sahf; stc; push rbx; ret
0x4630f6: stc; dec [rax+0x39]; ret
0x43a1d6: pextrw edi,mm0,0x77; ret
0x43b7c8: push [rdi+0x5]; repz ret
0x47219e: xchg ax,ax; pop rbx; ret
0x45391b: ror [rcx-0x77],0x14; ret
0x46ee29: xor ecx,[rax-0x77]; iret
0x4671e7: mov [rdi+0x308],eax; ret
0x45fb58: lea rax,[rdi+rsi*1]; ret
0x45fc5d: lea eax,[rcx+rsi*1]; ret
0x45fc5c: lea rax,[rcx+rsi*1]; ret
0x43de78: ror [rax-0x73],0x3c; ret
0x415c7f: cmovne eax,edx; repz ret
0x4155d8: clc; cmovne rax,rcx; ret
0x426d7c: movq [rdi-0x10],mm0; ret
0x40e09e: lea eax,[rdx+rdi*1]; ret
0x43b23f: cld; dec [rax-0x77]; ret
0x47750b: mov [rdi+rsi*8],rdx; ret
0x438d5d: jmp [rsi-0x70]; repz ret
0x40f5f6: rex.RXB sub [r8],r8d; ret
0x43a588: div ecx; mov eax,eax; ret
0x4325b0: xlat ds:[rbx]; ret 0xc148
0x42719a: call 0x4fc18192; lock ret
0x415bd8: mov eax,0xc; pop rbx; ret
0x4692c4: mov gs:[rax-0x77],cl; ret
0x40f810: rex.B; mov [rsi],rcx; ret
0x4089fe: inc [rbx-0x7af0fe08]; ret
0x4102ce: call [rax+0x90d8d48]; ret
0x476813: inc [rbx-0x7bf0bf1e]; ret
0x43baa6: push [rdi+0x57]; repz ret
0x43a534: mov eax,0x8; pop rbx; ret
0x46777f: inc [rbp+0x5b0e78c0]; ret
0x43a571: pop rbx; mov eax,eax; ret
0x43bd76: push [rdi+0x3f]; repz ret
0x41e2b5: xlat ds:[rbx]; ret 0xe883
0x46d88c: inc [rbp-0x76b08a40]; ret
0x40a5cb: mov eax,ebx; pop rbx; ret
0x46f4bb: rex.WXB and rax,[r8]; ret
0x4676e2: inc [rbp+0x5b0275c0]; ret
0x40909d: clc; dec [rax-0x77]; retf
0x43bbc7: rex.XB; add rsp,0x18; ret
0x43b115: add es:[rax+0x39],cl; ret
0x415e6e: mov rax,r10; pop rbx; ret
0x415e6f: mov eax,edx; pop rbx; ret
0x439038: vmovq [rsi-0x8],xmm0; ret
0x40a5ca: mov rax,rbx; pop rbx; ret
0x46c97c: inc ebx; mov eax,0x1; ret
0x45e7ef: rex.WX; cmove r8,rcx; ret
0x43a4c1: mov dh,0xc1; pop rbx; ret
0x46a1ee: mov eax,eax; pop rbx; ret
0x429cba: call 0x4fc1acb2; lock ret
0x462462: out 0x73,eax; retf 0x8348
0x43dc13: rex.RXB sub [r9],r8b; ret
0x45e05f: mov eax,0x1; pop rbx; ret
0x456e1e: push rsi; or al,0x83; ret
0x400b5a: mov eax,0x0; pop rbp; ret
0x40ad82: xor eax,eax; pop rbx; ret
0x46ae7b: push [rbp-0x2e]; repz ret
0x43a575: mov rax,rdx; pop rbx; ret
0x472d1d: mov dh,0xc0; neg eax; ret
0x41d53f: xlat ds:[rbx]; ret 0xc085
0x43b9d3: push [rdi+0x5a]; repz ret
0x438f4c: cmovs ebp,[rcx]; lock ret
0x461e3d: rex.RB; add rsp,0x58; ret
0x41e3ad: xlat ds:[rbx]; ret 0xff2d
0x438efe: ror [rdi],0x94; ret 0xc085
0x40d74e: add rsp,0x20; pop rbx; ret
0x43836c: movsxd esi,esi; ret 0x7520
0x461fbe: dec [rax-0x77]; ret 0x1477
0x40e97e: add rsp,0x10; pop rbx; ret
0x43d9a9: cmp rdx,rdi; setae al; ret
0x4599e7: rex.W fmul [rbp+0x63]; ret
0x43a550: mov eax,0x60; pop rbx; ret
0x410285: clc; pop rbp; pop r12; ret
0x44a698: rex.WX; add rsp,0x148; ret
0x40e97f: add esp,0x10; pop rbx; ret
0x4136f6: or [rbx+0x94807e0],al; ret
0x4136f5: or [r11+0x94807e0],al; ret
0x461c00: mov eax,0x68; syscall; ret
0x4424c2: xchg [rdi],cl; retf 0x1489
0x451673: fadd [rcx+rcx*4-0x38]; ret
0x41d757: cmp [rax+0x1],cl; clc; ret
0x407cc6: add rsp,0xd0; pop rbx; ret
0x400a06: add [rax],al; pop rbp; ret
0x461643: add [rax],al; syscall; ret
0x43d9aa: cmp edx,edi; setae al; ret
0x487907: add al,al; sldt [rax]; ret
0x407cc7: add esp,0xd0; pop rbx; ret
0x410a7d: add eax,0x290dde; repz ret
0x421c1b: std; mov [rdi-0x2],cx; ret
0x400410: call rax; add rsp,0x8; ret
0x400a7b: add [rcx],al; pop rbp; ret
0x40f673: adc eax,0x2921b8; repz ret
0x41d708: push rdi; xor eax,eax; ret
0x461be0: mov eax,0x66; syscall; ret
0x461a4b: add esp,0x80; pop rbx; ret
0x40f568: or [rbx],0x8; pop rbx; ret
0x46b76b: add [rcx],al; pop rbx; ret
0x461640: mov eax,0xc9; syscall; ret
0x472d1c: movzx eax,al; neg eax; ret
0x4102ae: call [rax+0x290d8d48]; ret
0x43d89c: ror [rdi],0x44; ret 0x66c3
0x432e57: ror [rax+0x29],1; clc; ret
0x472dcb: add esp,0x30; pop rbx; ret
0x40d74f: add esp,0x20; pop rbx; ret
0x45e005: push [rax+rcx*1+0x5b]; ret
0x461c10: mov eax,0x6c; syscall; ret
0x43a53b: mov eax,0x10; pop rbx; ret
0x461bf0: mov eax,0x6b; syscall; ret
0x43a4c0: movzx eax,cl; pop rbx; ret
0x46c8fa: movsx eax,dl; neg eax; ret
0x43a549: mov eax,0x20; pop rbx; ret
0x43adde: dec [rax-0x77]; ret 0x8948
0x45fd85: xlat ds:[rbx]; retf 0xfdc5
0x400d32: add esp,0x88; pop rbx; ret
0x461a4a: add rsp,0x80; pop rbx; ret
0x400d36: add [rax],al; pop rbx; ret
0x400d31: add rsp,0x88; pop rbx; ret
0x43a557: mov eax,0x40; pop rbx; ret
0x41f669: es add eax,0xc0310000; ret
0x46f7cf: ror [rdi],0x94; ret 0x950f
0x43a52d: mov eax,0x80; pop rbx; ret
0x491842: sub edi,esi; int 0x6b; ret
0x46fe40: mov eax,0x27; syscall; ret
0x472dca: add rsp,0x30; pop rbx; ret
0x40f569: or ecx,[rax]; pop rbx; ret
0x43483d: or [rax-0x77],cl; clc; ret
0x43a542: mov eax,0x30; pop rbx; ret
0x438b97: fmul [rax+0x9]; retf 0x4466
0x457647: clc; add al,[rcx+0x29]; ret
0x40d784: add [rcx+rcx*1-0xd],dh; ret
0x40a4f2: add [rax-0x77],cl; clc; ret
0x400a05: add [rax],r8b; pop rbp; ret
0x4780ad: rex.X or [rax-0x77],cl; ret
0x40408e: cmps ds:[rsi],es:[rdi]; ret
0x43ee95: add [rbp-0xcf98b40],al; ret
0x46a1ec: ds mov rax,r8; pop rbx; ret
0x40ddb5: mov [rax+0x8],0x0; repz ret
0x46f99d: mov [rax],edi; pop rbx; ret
0x43a47c: cmove eax,edx; pop rbx; ret
0x421df2: cld; mov [rdi-0x4],edx; ret
0x40fb09: or [rax],al; add bl,dh; ret
0x44238b: dec [rdi]; rex.W ret 0x41c3
0x421555: lock mov [rdi-0x8],rdx; ret
0x43a4b4: cmove eax,ecx; pop rbx; ret
0x4599db: clc; add cl,[rcx+0x29]; ret
0x4783d3: add [rbp+0x1a],dh; repz ret
0x436aef: add [rax+0x78d4837],cl; ret
0x46107c: rol [rax+0x1e740fe1],1; ret
0x44a30d: add [rax+rcx*1-0xd],dh; ret
0x4221f8: cli; mov [rdi-0x4],ecx; ret
0x421683: clc; mov [rdi-0x8],rdx; ret
0x4167c1: add [rsi+rax*8-0xd],dh; ret
0x4223f8: stc; mov [rdi-0x4],ecx; ret
0x421ff8: sti; mov [rdi-0x4],ecx; ret
0x421517: lock mov [rdi-0x8],rcx; ret
0x472bdb: or [rcx+0x1],cl; ret 0x894c
0x43aa6c: nop [rax+0x0]; pop rbx; ret
0x46f97c: mov [rdx],rax; pop rbx; ret
0x43a47b: cmove rax,rdx; pop rbx; ret
0x40a646: mov edx,0x130; pop rbx; ret
0x45a6da: rex.W fimul [rbp+0x63]; ret
0x46231e: add al,[rbp-0xcb28a37]; ret
0x457620: clc; add cl,[rax+0x29]; ret
0x46ee34: jmp 0xffffffffe9457781; ret
0x4797f7: add [rbp-0xcfb8b40],al; ret
0x4063a2: add esp,0x110; pop rbx; ret
0x47843f: nop; mov rax,[rsi+0x8]; ret
0x4347e5: add cl,[rax-0x77]; clc; ret
0x421c6e: hlt; mov [rdi-0x4],edx; ret
0x4774c7: add [rbx+rbx*8-0xd],dh; ret
0x421a7e: cmc; mov [rdi-0x4],edx; ret
0x4951d3: add ch,[rsi+rcx*1+0x8]; ret
0x46d63b: mov [rax],edx; pop rbx; ret
0x41e30b: add ebx,eax; nop [rax]; ret
0x46f99c: mov [rax],rdi; pop rbx; ret
0x465725: or [rax],al; add al,ch; ret
0x426fba: hlt; mov [rdi-0x4],ecx; ret
0x43a490: add eax,[rax]; pop rbx; ret
0x43eb04: add [rax+0xf],cl; rex.R ret
0x475117: rex.R and al,0xd8; repz ret
0x439267: movs es:[rdi],ds:[rsi]; ret
0x43dc23: adc [rbx-0x1e],dh; repz ret
0x43c952: add [rbp+0xb],esi; repz ret
0x4063a1: add rsp,0x110; pop rbx; ret
0x42703a: cmc; mov [rdi-0x4],ecx; ret
0x43a9ec: mov dh,[rcx+riz*8-0xd]; ret
0x43a4b3: cmove rax,rcx; pop rbx; ret
0x438d42: in eax,dx; sub rax,0x1; ret
0x460e91: add bl,al; mov eax,0x2; ret
0x470296: or [rbp+0x440f4cf6],al; ret
0x4604da: add [rbx+rax*1-0xd],dh; ret
0x46d63a: mov [rax],rdx; pop rbx; ret
0x46f97d: mov [rdx],eax; pop rbx; ret
0x40d965: nop [rax]; xor eax,eax; ret
0x40a447: add [rdx+rax*1-0xd],dh; ret
0x460300: mov rax,r8; vzeroupper; ret
0x43d89a: add [rbp-0x3dbbf040],al; ret
0x41da26: add eax,ecx; vzeroupper; ret
0x409fdf: add [rax-0x76b80000],al; ret
0x43df05: cli; cmp eax,0x83491774; ret
0x43a0d4: jg 0x43a0dd; vzeroupper; ret
0x42203f: repnz mov [rdi-0x8],rdx; ret
0x43a50c: cmovne eax,edx; pop rbx; ret
0x43e1e3: jmp rdx; nop [rax]; repz ret
0x43d9d2: icebp; pop rdx; pop r10; ret
0x41c5fa: adc al,0xe; sub eax,edx; ret
0x44490d: add [rax],al; add cl,ch; ret
0x41e2cc: sub eax,edx; vzeroupper; ret
0x440b49: add [rax-0x75],cl; rex.R ret
0x41db9a: add eax,edi; vzeroupper; ret
0x438f4b: add al,0xf; sub rax,rsi; ret
0x41e307: sbb eax,eax; or eax,0x1; ret
0x42d0d5: mov cl,[rbx-0x37d67dfc]; ret
0x447b49: ror [rcx+0x1e3d8bc5],cl; ret
0x40fb08: or [rax],0x0; add bl,dh; ret
0x41dc00: vzeroupper; xor eax,eax; ret
0x4484c6: add esi,[rdi+rax*1-0xd]; ret
0x4155de: xchg ax,ax; xor eax,eax; ret
0x40cd1b: add [rax],al; add bl,dh; ret
0x434881: add [rcx-0x776b7fe],ecx; ret
0x46c7c7: fimul [rax+0x39]; ret 0x7472
0x461192: shr rax,0x2; vzeroupper; ret
0x44c688: mov dh,0x47; or al,0x83; ret
0x440c41: add [rbp+rcx*4+0x3c],cl; ret
0x46df5f: shr r9,cl; mov [rdi],r9; ret
0x46de55: shl r9,cl; mov [rdi],r9; ret
0x4600de: and [rax+0x9],cl; retf 0xf4c
0x477a05: add [rax-0x77],cl; int3; ret
0x432e4d: and [rax+0x9],cl; retf 0xf48
0x461bbd: jae 0x461bc0 <uname+16>; ret
0x40ea22: adc [rbx-0x2fd6efb9],cl; ret
0x47752f: nop; mov rax,[rdi+0x98]; ret
0x421e92: outs dx,ds:[rsi]; rex.RX ret
0x467dcf: rex.XB adc [r8-0x7d],cl; ret
0x40d82f: nop; mov eax,0xffffffff; ret
0x432eaf: sub rax,rdx; vzeroupper; ret
0x43a50b: cmovne rax,rdx; pop rbx; ret
0x4726be: xchg ax,ax; add rsp,0x8; ret
0x43c41c: and [rsi-0x76b70003],al; ret
0x40ea17: sbb [rbx-0x2fd6efb9],cl; ret
0x4330b5: adc cl,[rax-0x1]; ret 0x2288
0x43609a: rex.X add eax,0x8428d48; ret
0x47529f: nop; mov rax,[rsi+0xb8]; ret
0x40b6b7: or ecx,[rax+0x1]; ret 0x8949
0x41db4c: xor eax,eax; vzeroupper; ret
0x475116: adc [rsp-0x28],eax; repz ret
0x461193: shr eax,0x2; vzeroupper; ret
0x448515: call 0x8880e1b; pop rbx; ret
0x48f6e4: shr al,cl; add al,0x3d; retf
0x417fc4: mov dh,0x7; sub eax,ecx; ret
0x45e0ca: sbb [rcx+0x5bc0310b],cl; ret
0x40f724: mov [rax+rsi*1],bh; repz ret
0x43a261: jg 0x43a26a; vzeroupper; ret
0x460301: mov eax,eax; vzeroupper; ret
0x4330be: or [rax-0x1],ecx; ret 0xc148
0x46e52a: or [rax+0x39],cl; ret 0xf075
0x418183: adc al,0xa; sub eax,edx; ret
0x434851: add [rax-0x776b7fe],ecx; ret
0x4348b9: add ecx,[rax-0x77]; clc; ret
0x46fdd0: add eax,edi; sub rax,r8; ret
0x46fdcf: add rax,rdi; sub rax,r8; ret
0x456e1d: mov dh,0x56; or al,0x83; ret
0x43611c: rex.X add eax,0xc428d48; ret
0x43a1d4: add cl,[rax+0x77f8c50f]; ret
0x47219b: fidivr [rax+0x5b9066ff]; ret
0x426e9b: repnz mov [rdi-0x8],rcx; ret
0x402835: add [rax],al; add al,ch; ret
0x41e344: mov dh,0xe; sub eax,ecx; ret
0x436534: add ecx,[rcx+0x357890f]; ret
0x46f08b: or [rcx+0x29],cl; ret 0x894c
0x47219d: jmp [rsi-0x70]; pop rbx; ret
0x43a4da: cld; inc [rbx]; pop rbx; ret
0x499ec3: add [rax+0x7800005f],cl; ret
0x41da25: add rax,rcx; vzeroupper; ret
0x436001: add [rax+0x28d4802],ecx; ret
0x41db99: add rax,rdi; vzeroupper; ret
0x41373e: add [rax],al; add bl,ch; ret
0x406fe1: add ecx,[rbp+rcx*4+0x64]; ret
0x43a1d5: mov [rdi],cl; vzeroupper; ret
0x405c46: add [rbx-0x7cb70030],eax; ret
0x409d75: call [rbx+0x5d]; pop r12; ret
0x41826e: xor eax,eax; sub eax,ecx; ret
0x438a85: rol bl,0x48; mov eax,edi; ret
0x41d672: lea rax,[rdi+rax*1+0x30]; ret
0x432e55: add rax,rdx; sub rax,rdi; ret
0x40a90f: add [rdi],cl; mov dh,0x2; ret
0x42d0d7: add al,0x82; sub eax,ecx; ret
0x474052: add [rbp+rcx*4+0x74],ecx; ret
0x438f0a: add eax,edi; sub rax,rsi; ret
0x41d4f5: add rax,rdi; add rax,rcx; ret
0x4082a1: add [rax],eax; add bl,dh; ret
0x4093e2: rex.RXB adc [r8+0x1],r9b; ret
0x43ed1f: xor [rax-0x7d],cl; ret 0x4801
0x40fb05: mov [rdi+0x880],rax; repz ret
0x4479b4: adc ecx,[rcx+0x29d231fb]; ret
0x439213: adc [rdi+rdx*1-0x10],ecx; ret
0x427903: or bl,dh; movq [rdi],mm1; ret
0x474938: call 0x41a38a9a; pop rbp; ret
0x4580d8: test [rcx-0x7c000015],al; ret
0x41d768: lea rax,[rdi+rax*1+0x10]; ret
0x48f77c: push rax; and ebx,[rbx]; iret
0x4583ca: test [rdi-0x7c000018],cl; ret
0x4620da: add eax,[rcx+rdx*1]; repz ret
0x426e0b: icebp; mov [rdi-0x8],rcx; ret
0x4747e0: fucomip st,st(0); retf 0xff7d
0x41d743: lea rax,[rax+rdi*1+0x20]; ret
0x40cd1a: add [rax],0x0; add bl,dh; ret
0x4654d6: add [rax],0x0; add cl,ch; ret
0x41d720: bsf eax,eax; add rax,rdi; ret
0x4945ea: or [rdx+0xb],cl; pop rdi; ret
0x40fb06: mov [rdi+0x880],eax; repz ret
0x434899: add al,0x48; mov eax,edi; ret
0x43d525: test [rsi-0x7d000000],dl; ret
0x40f675: and [rcx],ebp; add bl,dh; ret
0x477881: mov edi,[rbp-0x8]; leave; ret
0x438f09: add rax,rdi; sub rax,rsi; ret
0x40d345: rex.W; mov [rdi+0x8],rax; ret
0x440ae2: test [rbp+rcx*4+0x3c],cl; ret
0x46f29f: rex.RXB or [r8+0x2],r15b; ret
0x46d327: or al,0x48; add esp,0x38; ret
0x45ff34: add al,0x48; xor eax,eax; ret
0x439377: adc [rdi+rdx*1-0x40],edi; ret
0x41d713: lea rax,[rax+rdi*1-0x10]; ret
0x460c87: bsf eax,edx; shr rax,0x2; ret
0x44c093: add [rbx-0x7bf00006],eax; ret
0x45fd4a: bsr rax,rsi; add rax,rdi; ret
0x474928: call 0x5c88a688; pop r13; ret
0x41f952: outs dx,ds:[rsi]; rex.WRX ret
0x45fd4b: bsr eax,esi; add rax,rdi; ret
0x46d9ec: and eax,0x2; sub eax,0x1; ret
0x448629: add [rax-0x3f],cl; ret 0x4811
0x430da3: add al,0x81; sub eax,edx; ret
0x44d63c: test [rbp-0x7c000012],ah; ret
0x41d779: lea eax,[rdi+rax*1+0x20]; ret
0x41d734: lea eax,[rax+rdi*1+0x10]; ret
0x41d744: lea eax,[rax+rdi*1+0x20]; ret
0x4126d4: add [rax+0xf],cl; rex.RXB ret
0x41d714: lea eax,[rax+rdi*1-0x10]; ret
0x41de84: mov dh,0x16; sub eax,edx; ret
0x43cc0f: call 0x5c85296f; pop r13; ret
0x4582b4: test [rbp-0x7c000017],ah; ret
0x43939a: adc [rdi+rdx*1-0x20],ebx; ret
0x47aad5: jmp 0x414960 <free>; repz ret
0x4392e9: mov dh,0xe; mov [rdi],cl; ret
0x432e56: add eax,edx; sub rax,rdi; ret
0x47addd: sub esp,0x8; add rsp,0x8; ret
0x458008: idiv edi; dec [rax-0x77]; ret
0x45e6d2: sar edx,0x2; sub eax,edx; ret
0x46eeb0: add [rbp+0x3b],dh; leave; ret
0x400b2f: add [rax],al; nop; leave; ret
0x45fac6: bsr rax,rax; add rax,rdi; ret
0x427823: or dh,bl; movq [rdi],mm1; ret
0x417faa: add al,0x17; sub eax,ecx; ret
0x46d9eb: rol [rbx-0x177cfd20],0x1; ret
0x41dc47: enter 0xfdc5,0xd7; ret 0xc085
0x43b7cf: add [rax-0x39],cl; ret 0xffc0
0x43a204: mov [rdi],cx; vzeroupper; ret
0x43d920: jae 0x43d923 <mremap+19>; ret
0x475cb3: in al,0x22; add [rax],cl; ret
0x460c86: bsf rax,rdx; shr rax,0x2; ret
0x41d4f6: add eax,edi; add rax,rcx; ret
0x415e65: add [rcx+0x39],ecx; ret 0x672
0x44a34e: mov rax,[rax+rdi*8+0x80]; ret
0x41deaa: mov dh,0xd2; sub eax,edx; ret
0x46c7d2: fisttp [rax-0x77]; ret 0xcde8
0x40d748: cmp [rdi],cl; rex.R ret 0x389
0x45e6d1: sar rdx,0x2; sub eax,edx; ret
0x4711b4: fimul [rax+0x39]; retf 0xe677
0x402834: add [rax],0x0; add al,ch; ret
0x42f4ce: adc al,0x91; sub eax,edx; ret
0x47addc: sub rsp,0x8; add rsp,0x8; ret
0x43a48d: and eax,0x3fc00; pop rbx; ret
0x42a8ab: sar [rdx+0x7f],0x49; lock ret
0x40829d: mov [rcx+0x130],rdx; repz ret
0x467214: mov [rdi+0x300],rax; repz ret
0x467218: add eax,[rax]; add bl,dh; ret
0x41d769: lea eax,[rdi+rax*1+0x10]; ret
0x469e84: call 0x5c87fbe4; pop r13; ret
0x418015: adc al,0x16; sub eax,edx; ret
0x460d9e: sub eax,edi; shr rax,0x2; ret
0x44a34f: mov eax,[rax+rdi*8+0x80]; ret
0x461103: add al,0x0; add [rax],al; ret
0x4009cb: nop [rax+rax*1+0x0]; repz ret
0x40fb07: xchg [rax-0xcfffff8],eax; ret
0x409406: scas eax,es:[rdi]; ret 0x2948
0x4389bf: add [rax-0x7d],cl; ret 0x3a01
0x42223f: icebp; mov [rdi-0x8],rdx; ret
0x43c77d: jae 0x43c780 <munmap+16>; ret
0x46f1e0: sar bh,0xff; mov eax,0x1; ret
0x44a4df: rex xor eax,eax; pop rbx; ret
0x465ebb: add dl,[rax-0x77]; ret 0xc389
0x467215: mov [rdi+0x300],eax; repz ret
0x4004cc: sub al,[rax]; xchg ax,ax; ret
0x41d733: lea rax,[rax+rdi*1+0x10]; ret
0x466081: fisttp [rbp-0x73]; rex.WR ret
0x460d9d: sub rax,rdi; shr rax,0x2; ret
0x41d778: lea rax,[rdi+rax*1+0x20]; ret
0x4276d2: rex.RXB or eax,0xf7f0ff3; ret
0x472d0d: or al,ch; rex.WRB retf 0xffff
0x41d673: lea eax,[rdi+rax*1+0x30]; ret
0x451689: add ecx,eax; mov eax,r9d; ret
0x40f723: mov [rax+rsi*1],dil; repz ret
0x46ef57: mov eax,ecx; adc eax,eax; ret
0x477880: mov r15,[rbp-0x8]; leave; ret
0x46f42f: adc cl,[rax-0x7d]; ret 0x4801
0x409411: rex.RXB or [r8+0x29],r9b; ret
0x409349: rex.RXB and [r8+0x1],r9b; ret
0x40829e: mov [rcx+0x130],edx; repz ret
0x458007: idiv rdi; dec [rax-0x77]; ret
0x46df60: shr ecx,cl; mov [rdi],r9; ret
0x46f362: in eax,0x48; mov eax,esi; ret
0x451688: add r9d,eax; mov eax,r9d; ret
0x45fac7: bsr eax,eax; add rax,rdi; ret
0x4079d7: fadd [rax]; add [rax],al; ret
0x46de56: shl ecx,cl; mov [rdi],r9; ret
0x4753a8: add [rax+0x39],cl; ret 0x9272
0x44b1b9: xor eax,eax; add rsp,0x8; ret
0x475286: mov al,0x0; add [rax],al; ret
0x4424c7: or [rax-0x7d],0x394801c0; ret
0x436ece: add [rax],al; xor rax,rax; ret
0x4162e3: and [rax-0x7d],ecx; ret 0x4801
0x491f88: out 0xf5,eax; mov ch,0xab; ret
0x44a32d: adc [rax-0x39],ecx; ret 0xffe0
0x41d704: rol [rbp+0x315775c0],0xc0; ret
0x4416f3: rex.RXB add [r8-0x7d],r9d; ret
0x4610ee: add [rax],al; mov rax,0x3; ret
0x49a5e1: or [rdi+0xb],al; push rsp; ret
0x40e09d: repnz lea eax,[rdx+rdi*1]; ret
0x43b6fc: or rax,0xffffffffffffffff; ret
0x4671e9: or [rbx],al; add [rax],al; ret
0x43c7dd: jae 0x43c7e0 <madvise+16>; ret
0x462b21: mov ?,ebp; dec [rax+0x39]; ret
0x42759a: movdqu XMMWORD [rdi],xmm0; ret
0x46f2fc: add [rax],al; mov eax,0x2; ret
0x405890: pop r12; pop r13; pop r14; ret
0x407abc: pop rbp; pop r14; pop rbp; ret
0x40dcfa: push 0x75c08548; lock repz ret
0x40ad92: and [rax-0x1],bh; pop rbx; ret
0x41d42c: xchg edx,eax; sub eax,edx; ret
0x43a1ee: mov [rdi],rcx; vzeroupper; ret
0x4394b7: movups XMMWORD [rbx],xmm0; ret
0x413997: add [rax],al; add rsp,0x8; ret
0x401d0a: pop rbp; pop r12; pop r13; ret
0x43942f: movups XMMWORD [r11],xmm4; ret
0x46110e: add [rax],al; mov rax,0x5; ret
0x405891: pop rsp; pop r13; pop r14; ret
0x43a1b0: add [rax+0x39],cl; retf 0xe175
0x41e3ac: stc; xlat ds:[rbx]; ret 0xff2d
0x44b1eb: sar [rdx+0x3190fffb],0xc0; ret
0x413992: add rsp,0x80; add rsp,0x8; ret
0x45f818: rex.RX add [rax+0x39],r9d; ret
0x461fd0: ja 0x461ff8 <brk+72>; repz ret
0x46111e: add [rax],al; mov rax,0x6; ret
0x46f0eb: add [rax],al; mov eax,0x1; ret
0x43a373: add [rax+0x39],cl; retf 0xd975
0x43ac87: pop r12; pop r13; pop rbp; ret
0x401f32: pop rsi; pop r15; pop rbp; ret
0x45db80: xor [rdi],cl; rex.R ret 0x4389
0x4005f1: pop r13; pop r14; pop r15; ret
0x43eeb7: adc eax,0x261c1c; pop rbx; ret
0x40dece: add [rax],al; xor eax,eax; ret
0x455d0c: rcr [rbx+0x5d],1; pop r12; ret
0x440f6e: rcl [rax+0x48df8948],0x83; ret
0x402832: mov esp,0x8024; add al,ch; ret
0x4610ce: add [rax],al; mov rax,0x1; ret
0x46d88b: std; inc [rbp-0x76b08a40]; ret
0x46777e: std; inc [rbp+0x5b0e78c0]; ret
0x4402f1: or [rax],al; add [rax],al; ret
0x43ee94: add es:[rbp-0xcf98b40],al; ret
0x438e11: add [rax],al; sub rax,rdx; ret
0x4275f4: movdqu XMMWORD [rdi],xmm1; ret
0x401f31: pop r14; pop r15; pop rbp; ret
0x401487: pop rbx; pop rbp; pop r12; ret
0x46d437: sbb al,0x48; add esp,0x48; ret
0x41e2b4: std; xlat ds:[rbx]; ret 0xe883
0x46b76f: nop; mov eax,0x1; pop rbx; ret
0x415bd7: add [rax+0xc],bh; pop rbx; ret
0x43a1ef: mov [rdi],ecx; vzeroupper; ret
0x427a52: rex.RXB add eax,0xf7f0ff3; ret
0x40bf46: fcomp [rbx+0x5d]; pop r12; ret
0x43d9f7: syscall; pop rdx; pop rsi; ret
0x46f74b: mov ecx,0x1f0fff; pop rbx; ret
0x4775a8: and al,0x10; add rsp,0x28; ret
0x43d90f: add [rcx-0x77],cl; retf 0x19b8
0x4752b3: test al,0x0; add [rax],al; ret
0x41dc49: std; xlat ds:[rbx]; ret 0xc085
0x474d1b: add al,0x24; add rsp,0x38; ret
0x46112e: add [rax],al; mov rax,0x7; ret
0x434863: mov [rdx],ax; mov rax,rdi; ret
0x40ee1e: and [rdi],ecx; mov dh,0x0; ret
0x41f2fc: add [rax],al; sub eax,ecx; ret
0x4610fe: add [rax],al; mov rax,0x4; ret
0x46a2a3: ror [rcx+rcx*4-0x40],0x5b; ret
0x46d236: pop rax; pop rdx; pop rbx; ret
0x427c21: mov dh,0x16; mov [rdi],dl; ret
0x434852: mov [rdx],al; mov rax,rdi; ret
0x40ed0e: add [rax],al; mov rax,rdi; ret
0x4005f2: pop rbp; pop r14; pop r15; ret
0x461ec2: mov dh,0xc0; add rsp,0x58; ret
0x4610de: add [rax],al; mov rax,0x2; ret
0x414ef6: xor eax,eax; add rsp,0x18; ret
0x454091: add [rax],al; mov eax,edx; ret
0x41fbc5: and ecx,0xff; sub eax,ecx; ret
0x427bb1: mov bh,0x16; mov [rdi],dx; ret
0x44864b: add [rdi],cl; rex.W ret 0xc083
0x46b787: pop rbx; mov eax,fs:[rax]; ret
0x41dea9: movzx edx,dl; sub eax,edx; ret
0x48e9bd: mov ebp,0xc1c0bfbe; ret 0xc4c3
0x475170: mov r8,[r8]; mov [r10],r8; ret
0x432d40: add [rax],al; bsf rax,rdx; ret
0x42f4cf: xchg ecx,eax; sub eax,edx; ret
0x414753: rcr [rbp+0x41],1; pop rsp; ret
0x43d94d: jae 0x43d950 <sysinfo+16>; ret
0x43ac88: pop rsp; pop r13; pop rbp; ret
0x439430: movups XMMWORD [rbx],xmm4; ret
0x474d1c: and al,0x48; add esp,0x38; ret
0x439fee: movq [rdi+rdx*1-0x20],mm0; ret
0x4394b6: movups XMMWORD [r11],xmm8; ret
0x400b2d: mov edi,0x90000078; leave; ret
0x407abb: pop r13; pop r14; pop rbp; ret
0x46f450: adc al,0x48; add esp,0x38; ret
0x427ba3: add dh,bl; movq [rdi],mm1; ret
0x4610ae: add [rax],al; add rax,0x3; ret
0x413993: add esp,0x80; add rsp,0x8; ret
0x40f686: mov dh,0x21; sub [rax],eax; ret
0x46adf5: and eax,[rax]; add rsp,0x8; ret
0x4630f5: sar ecx,cl; dec [rax+0x39]; ret
0x40df60: mov rax,0xffffffffffffffff; ret
0x413503: stos es:[rdi],eax; pop rbx; ret
0x408663: adc [rbx+0x5d],bl; pop r12; ret
0x4913b7: out dx,al; fcmovb st,st(3); ret
0x4155d7: rex.WX clc; cmovne rax,rcx; ret
0x415c42: cmove rax,rdx; add rsp,0x8; ret
0x49bee1: add eax,[rbx]; or al,[rcx]; ret
0x474f38: cmp [rbx+0x41],bl; pop rsi; ret
0x45d47c: push rax; cmp [rax+0x1],cl; ret
0x46f2f8: mov [rdx],0x0; mov eax,0x2; ret
0x477470: add [rax],al; add rsp,0x18; ret
0x448517: mov [rbx+0x8],eax; pop rbx; ret
0x438e0d: add esp,0x100; sub rax,rdx; ret
0x461ec1: movzx eax,al; add rsp,0x58; ret
0x45f18f: adc edi,edx; dec [rax+0x1]; ret
0x4383c6: push rsi; repz sub eax,edx; ret
0x4690d4: fisttp [rdi]; xchg ebp,eax; ret
0x427893: or ebx,esi; movq [rdi],mm1; ret
0x43a4d8: and eax,0x3fffc00; pop rbx; ret
0x49571c: or eax,[rdx]; jno 0x49572a; ret
0x46d530: adc [rax+0x5a],bl; pop rbx; ret
0x461c0f: add [rax+0x6c],bh; syscall; ret
0x421e3f: xrelease mov [rdi-0x8],rdx; ret
0x46109c: nop [rax+0x0]; add rax,0x1; ret
0x46f8ed: mov [rax],edx; add rsp,0x8; ret
0x477520: add al,0x48; mov [rax],edx; ret
0x41e349: nop [rax+0x0]; xor eax,eax; ret
0x432923: cmovne rax,rdx; vzeroupper; ret
0x46f283: mov [rdx],eax; mov eax,0x2; ret
0x4604f9: dec [rax+0xf]; rex.R ret 0x90c3
0x461fed: mov [rax],edx; xor eax,eax; ret
0x415c43: cmove eax,edx; add rsp,0x8; ret
0x461838: mov [rax],0x2; xor eax,eax; ret
0x460e94: add al,[rax]; add [rax],al; ret
0x42775a: add al,0x48; mov [rdi],ecx; ret
0x413428: mov [rax],0xc; xor eax,eax; ret
0x461bdf: add [rax+0x66],bh; syscall; ret
0x427743: or al,0xf3; movq [rdi],mm1; ret
0x45e004: clc; push [rax+rcx*1+0x5b]; ret
0x40dde1: add [rax],al; add [rax],al; ret
0x48f6f8: xchg edi,eax; xchg esp,eax; ret
0x46f0e7: mov [rdx],0x0; mov eax,0x1; ret
0x4903e4: mov bh,0xb4; mov edi,[rdx]; ret
0x438e0c: add rsp,0x100; sub rax,rdx; ret
0x4347e3: mov [rdx],rax; mov rax,rdi; ret
0x475114: movss [rsp-0x28],xmm0; repz ret
0x41dead: rol bl,1; nop; xor eax,eax; ret
0x46f8ec: mov [rax],rdx; add rsp,0x8; ret
0x461bff: add [rax+0x68],bh; syscall; ret
0x49571b: or rax,[rdx]; jno 0x49572a; ret
0x447e5b: add [rbx+0x41],bl; pop rsp; ret
0x413558: call 0x410940 <arena_get_retry>
0x4383e6: push rsi; cmc; sub eax,edx; ret
0x46f105: mov eax,0x1; mov [rdi],rsi; ret
0x41e2b9: push [rbp+0x4]; vzeroupper; ret
0x426f2b: xrelease mov [rdi-0x8],rcx; ret
0x45ff32: div [rbp+0x4]; xor rax,rax; ret
0x472e7e: or eax,0x30c48348; pop rbx; ret
0x438396: push rsi; lock sub eax,edx; ret
0x447ba2: fisttp [rdi]; rex.RX ret 0xc389
0x456238: enter 0x415d,0x5c; pop r13; ret
0x461d2e: add [rax],al; add rsp,0x78; ret
0x4364ce: add [rax],al; mov [rdi],dh; ret
0x47a444: add [rbp-0x1f],dh; pop rbx; ret
0x43eecb: add [rcx],dh; sar [rcx],cl; ret
0x40a4f0: mov [rdi],0x0; mov rax,rdi; ret
0x415bbe: add [rax],al; mov eax,0x16; ret
0x4383d6: push rsi; hlt; sub eax,edx; ret
0x439266: rep movs es:[rdi],ds:[rsi]; ret
0x43c7ad: jae 0x43c7b0 <mprotect+16>; ret
0x415648: out 0x48,eax; sub eax,0x10; ret
0x461bef: add [rax+0x6b],bh; syscall; ret
0x43b869: add [rax],al; add rsp,0x68; ret
0x46d235: sbb [rax+0x5a],bl; pop rbx; ret
0x46163f: nop; mov eax,0xc9; syscall; ret
0x43c951: mov [rcx],0x75; or esi,ebx; ret
0x43c41d: xchg ch,bh; dec [rax-0x77]; ret
0x45fd84: std; xlat ds:[rbx]; retf 0xfdc5
0x41f94d: outs dx,ds:[rsi]; push rdi; ret
0x46b381: dec [rax+0xf]; rex.R ret 0x66c3
0x4348f7: or [r9-0x76b7f7be],cl; clc; ret
0x46ac5a: adc [r11+0x5d],bl; pop r12; ret
0x42a8f0: mov cl,[rsi]; mov [rdi],cl; ret
0x4388cd: add [rax],r8b; xor eax,eax; ret
0x47a5c5: add [rax],r8b; add rsp,0x8; ret
0x46dc37: in al,dx; or [rbp+0x39],cl; ret
0x46f128: mov [rdx],eax; mov eax,0x1; ret
0x40f5e0: add al,0x22; sub [rax],eax; ret
0x4913a6: mov esi,0x497b96cc; retf 0x99e0
0x432924: cmovne eax,edx; vzeroupper; ret
0x413502: stos es:[rdi],rax; pop rbx; ret
0x4277b3: or esi,ebx; movq [rdi],mm1; ret
0x4490bf: add [rbx+0x41],bl; pop rsi; ret
0x44b9f5: rex.WX sti; dec [rax+0x29]; ret
0x48ffa5: jnp 0x48ff60 <__tens+5088>; ret
0x447f7d: and [rbx+0x5d],bl; pop r12; ret
0x415c41: dec [rax+0xf]; rex.R ret 0x8348
0x44105a: xor [rbx+0x5d],bl; pop r12; ret
0x46fe3f: nop; mov eax,0x27; syscall; ret
0x401486: add [rbx+0x5d],bl; pop r12; ret
0x4347e4: mov [rdx],eax; mov rax,rdi; ret
0x48f6f7: test al,0x97; xchg esp,eax; ret
0x4610f2: rol [rbx],0x0; add [rax],al; ret
0x43dc4b: add ebx,eax; nop [rax]; repz ret
0x43a526: pop rbx; and eax,0x7ff80000; ret
0x45408d: mov [rax],0x16; mov eax,edx; ret
0x46de86: shl r9,cl; mov [rdi-0x8],r9; ret
0x478c4d: or bl,ch; adc [rax-0x7d],cl; ret
0x43a48f: cld; add eax,[rax]; pop rbx; ret
0x455e30: add [rax],eax; add [rax],al; ret
0x4610f3: add eax,[rax]; add [rax],al; ret
0x40ecc7: nop cs:[rax+rax*1+0x0]; repz ret
0x46df90: shr r9,cl; mov [rdi+0x8],r9; ret
0x44cc06: push rcx; cmp [rax+0x39],cl; ret
0x40c066: in eax,0xff; dec [rax+0x39]; ret
0x4490fe: add [rdi],ch; mov [rdi],0x0; ret
0x416733: add al,[rax]; cmove rax,rdx; ret
0x429d39: rex.RXB jmp 0x4fc1ad32; lock ret
0x4610e2: rol [rdx],0x0; add [rax],al; ret
0x427ac3: add al,0xf3; movq [rdi],mm1; ret
0x407f18: fucomip st,st(0); rex.X retf 0x0
0x402974: sar bh,0xff; dec [rax-0x39]; ret
0x400fcf: push rbx; adc [rax-0x7d],cl; ret
0x400a43: jmp rax; nop [rax]; pop rbp; ret
0x403ef8: inc [rcx+0xf]; xchg ebp,eax; ret
0x46ad38: xchg esi,eax; and eax,[rax]; ret
0x462386: cmp rsi,rdi; cmovne rax,rdx; ret
0x43a048: rol [rax+0x48],0x39; retf 0xe475
0x4726bd: jmp [rsi-0x70]; add rsp,0x8; ret
0x40fa10: push rdi; sbb [rax+0x39],cl; ret
0x46f748: jmp 0x0; nop [rax]; pop rbx; ret
0x439275: movs es:[rdi],ds:[rsi]; cld; ret
0x41e57d: rex sub eax,edx; vzeroupper; ret
0x46c7d8: cmp al,0xf9; dec [rax-0x77]; ret
0x448502: mov [rbx+0x10],0x0; pop rbx; ret
0x40ad93: mov eax,0xffffffff; pop rbx; ret
0x415c0d: add [rax],r8b; mov eax,0x16; ret
0x436002: mov [rdx],al; lea rax,[rdx]; ret
0x434877: add cl,[r8-0x76b7fdbe]; clc; ret
0x43d89b: test eax,eax; cmove eax,edx; ret
0x461122: rol [rsi],0x0; add [rax],al; ret
0x461132: rol [rdi],0x0; add [rax],al; ret
0x4348f8: or [rcx-0x76b7f7be],cl; clc; ret
0x427b33: add esi,ebx; movq [rdi],mm1; ret
0x472df8: mov [rbx+0x20],rax; pop rbx; ret
0x4364e1: mov edx,[rsi]; mov [rdi],dx; ret
0x472ead: jae 0x472eb0 <setitimer+16>; ret
0x436de0: push rdi; or eax,0x1c478d48; ret
0x40c853: vminsd xmm8,xmm4,[rcx+0x5c]; ret
0x447e58: mov eax,0x5b000000; pop r12; ret
0x43bd77: ja 0x43bdb8 <close+88>; repz ret
0x43a570: icebp; pop rbx; mov eax,eax; ret
0x43c8ea: push rdi; adc [rcx-0x77],cl; ret
0x45e812: rex.RXB; mov rax,[rax+0x4c]; ret
0x48ef05: jrcxz 0x48ef5d <__tens+989>; ret
0x472df9: mov [rbx+0x20],eax; pop rbx; ret
0x4490ea: mov esi,0x415b0007; pop rsi; ret
0x40d7c1: add ebx,[rbx+0x5d]; pop r12; ret
0x475171: mov eax,[rax]; mov [r10],r8; ret
0x46ad37: jne 0x46accf; and eax,[rax]; ret
0x463f95: push [rcx]; fucomi st,st(0); ret
0x474d19: mov rax,[rsp]; add rsp,0x38; ret
0x41f2f8: and ecx,0xffff; sub eax,ecx; ret
0x40fa35: rex.RXB adc [r11+0x5d],r11b; ret
0x4383b6: push rsi; repnz sub eax,edx; ret
0x49bf11: cmp [rbx+0x2030d07],al; cld; ret
0x436bfc: push rdi; add eax,0xc478d48; ret
0x468326: add bh,bh; ror [rax-0x7d],1; ret
0x45e14a: mov [rax+0x48],0x0; pop rbx; ret
0x46ae2d: xchg ebp,eax; and eax,[rax]; ret
0x43b9d4: ja 0x43ba30 <read+112>; repz ret
0x462387: cmp esi,edi; cmovne rax,rdx; ret
0x40d431: mov [rbx+0x50],0x0; pop rbx; ret
0x41675c: add [rax],al; cmove rax,rdx; ret
0x43483c: rex.X or [rax-0x77],cl; clc; ret
0x491841: lahf; sub edi,esi; int 0x6b; ret
0x472d44: mov [rbx+0x18],rax; pop rbx; ret
0x472d45: mov [rbx+0x18],eax; pop rbx; ret
0x436af0: mov [rdi],dh; lea rax,[rdi]; ret
0x474d1a: mov eax,[rsp]; add rsp,0x38; ret
0x472f29: add ebx,[rbp+0x41]; pop rsp; ret
0x427c13: add ebx,esi; movq [rdi],mm1; ret
0x462388: dec [rax+0xf]; rex.RB ret 0x31c3
0x47496a: add ebx,[rax+0x5a]; pop rbx; ret
0x464d75: mov dh,0xf9; dec [rax-0x77]; ret
0x40a4c6: sub ebx,[rbx+0x5d]; pop r12; ret
0x427219: rex.RXB jmp 0x4fc18212; lock ret
0x43708e: add [rax],al; lea rax,[rdi]; ret
0x46f108: add [rax],al; mov [rdi],rsi; ret
0x40f5f5: fwait; rex.RXB sub [r8],r8d; ret
0x4084bd: push rbp; cmp [rax+0x39],cl; ret
0x4610d2: rol [rcx],0x0; add [rax],al; ret
0x408f80: add al,0x0; add [rax+0x1],cl; ret
0x40ea27: rol bl,1; mov eax,0xffffffff; ret
0x438bf2: in eax,dx; lea rax,[rcx-0x1]; ret
0x4331a4: call 0x492c1cb9; mov eax,edx; ret
0x407206: rcr [rbx+0x5d],0x41; pop rsp; ret
0x468eab: xchg [rdi+0x2],cl; add cl,ch; ret
0x427199: rex.RXB call 0x4fc18192; lock ret
0x41e343: movzx ecx,[rsi]; sub eax,ecx; ret
0x4330c4: call 0x492c1bd9; mov eax,edi; ret
0x41dc4f: rol ch,1; std; xlat ds:[rbx]; ret
0x415d7c: add [rax],eax; cmove rax,rdx; ret
0x46defb: shl r9,cl; mov [rdi-0x10],r9; ret
0x4703cf: add bh,bh; ror [rax-0x77],cl; ret
0x46de87: shl ecx,cl; mov [rdi-0x8],r9; ret
0x46ae9f: and eax,[rax]; mov [rsi],rax; ret
0x46fb93: or al,0x5b; pop rbp; pop r12; ret
0x45f129: add eax,0xe02; cmove rax,rdx; ret
0x45f159: add eax,0x912; cmove rax,rdx; ret
0x429cb9: rex.RXB call 0x4fc1acb2; lock ret
0x400a03: nop [rax+rax*1+0x0]; pop rbp; ret
0x4388a8: push [rbp+0x1a]; xor eax,eax; ret
0x44c6f1: sub dh,al; add [rcx-0x7d],cl; ret
0x43fb61: shl eax,cl; pop rbp; pop r12; ret
0x427ad0: mov edx,[rsi]; mov [rdi],edx; ret
0x47981a: add eax,0xffff50e9; push rbx; ret
0x48f6e3: cld; shr al,cl; add al,0x3d; retf
0x40a645: mov [rdx+0x130],edi; pop rbx; ret
0x4004c9: and eax,0x2a0bfa; xchg ax,ax; ret
0x45e62b: sar r8,0x2; lea eax,[r8-0x1]; ret
0x494eb9: or rsp,[rsi+r9*1+0x18]; rex.B ret
0x4324c0: cmp [rax],dh; cmovne rax,rdx; ret
0x40a644: mov [rdx+0x130],rdi; pop rbx; ret
0x427911: mov edx,[rsi]; mov [rdi],rdx; ret
0x417fc3: movzx eax,[rdi]; sub eax,ecx; ret
0x4913b6: mov al,0xee; fcmovb st,st(3); ret
0x46df91: shr ecx,cl; mov [rdi+0x8],r9; ret
0x4383a6: push rsi; icebp; sub eax,edx; ret
0x40e9e4: mov rax,[rdi]; mov [rdx],rax; ret
0x41de83: movzx edx,[rsi]; sub eax,edx; ret
0x46fc20: add eax,0x5b; cmovne rax,rdx; ret
0x45dafb: adc [rax-0x77],cl; rex.W; rex ret
0x46e00b: shr r9,cl; mov [rdi+0x10],r9; ret
0x472199: jmp 0x0; xchg ax,ax; pop rbx; ret
0x46fc23: add [rax],al; cmovne rax,rdx; ret
0x43a50a: lock cmovne rax,rdx; pop rbx; ret
0x427910: mov rdx,[rsi]; mov [rdi],rdx; ret
0x460489: add eax,0xa12; cmove rax,rdx; ret
0x40e0a8: sub r8,rcx; lea eax,[r8-0x1]; ret
0x49bf6d: add ch,[rbp+rcx*1+0x7]; rex.R ret
0x409618: nop [rax+rax*1+0x0]; pop rbx; ret
0x41da24: clc; add rax,rcx; vzeroupper; ret
0x40e9e5: mov eax,[rdi]; mov [rdx],rax; ret
0x43b77b: ja 0x43b780 <_xstat+32>; repz ret
0x4348b5: add ecx,[r9-0x76b7fcbe]; clc; ret
0x415124: rcr [rbp+0x41],0x5c; pop r13; ret
0x400a7c: add [rbp-0x3d],ebx; nop; repz ret
0x461ec3: ror [rax-0x7d],0xc4; pop rax; ret
0x432b49: enter 0x148,0xf8; vzeroupper; ret
0x4044a4: ror [rax+0xf],0x44; shr cl,1; ret
0x415d03: add al,[rax]; cmovne rax,rdx; ret
0x432f66: clc; sub rax,rdx; vzeroupper; ret
0x41dbcc: rex; add rax,rdi; vzeroupper; ret
0x4273af: add [rbx+0x5789fc56],cl; cld; ret
0x43487a: rex.X add cl,[rax-0x77]; clc; ret
0x43baa7: ja 0x43bb00 <write+112>; repz ret
0x434878: add cl,[rax-0x76b7fdbe]; clc; ret
0x43dbc7: or bl,al; nop [rax+0x0]; repz ret
0x46f096: adc eax,edx; pop rbp; pop rbx; ret
0x414752: mov eax,edx; pop rbp; pop r12; ret
0x43b23e: push rdx; cld; dec [rax-0x77]; ret
0x43672d: movdqu XMMWORD [rdi+0xd],xmm2; ret
0x40a90e: add [rax],al; movzx eax,[rdx]; ret
0x415d7d: add [rax+0xf],cl; rex.R ret 0x66c3
0x442386: idiv [rdx-0x1]; cmovs eax,edx; ret
0x432eae: enter 0x2948,0xd0; vzeroupper; ret
0x406fef: add bh,bh; adc ecx,[rax-0x7d]; ret
0x4324bf: cmp [rax],sil; cmovne rax,rdx; ret
0x43a4d9: add ah,bh; inc [rbx]; pop rbx; ret
0x45e7f5: nop [rax]; mov eax,0xffffffff; ret
0x46e00c: shr ecx,cl; mov [rdi+0x10],r9; ret
0x405c45: clc; add [rbx-0x7cb70030],eax; ret
0x416b49: add eax,0x6c52; cmove rax,rdx; ret
0x4348a8: mov [rdx+0x4],ax; mov rax,rdi; ret
0x43674d: movdqu XMMWORD [rdi+0xe],xmm2; ret
0x41681d: add [rax+0xf],cl; rex.RB ret 0xfc3
0x43942d: rol [r9+0xf],1; adc [rbx],esp; ret
0x4009ca: hlt; nop [rax+rax*1+0x0]; repz ret
0x401c83: add esp,0x8; pop rbx; pop rbp; ret
0x46bbfb: sbb al,0x24; add rsp,0x30; bnd ret
0x472f27: sar eax,0x3; pop rbp; pop r12; ret
0x4348b6: add ecx,[rcx-0x76b7fcbe]; clc; ret
0x40fc54: mov eax,ebx; pop rbx; pop rbp; ret
0x44849a: jmp 0x414960 <free>; nop; repz ret
0x45f18e: es adc edi,edx; dec [rax+0x1]; ret
0x465eba: clc; add dl,[rax-0x77]; ret 0xc389
0x4348b8: rex.X add ecx,[rax-0x77]; clc; ret
0x410284: mov eax,edi; pop rbp; pop r12; ret
0x410283: mov rax,rdi; pop rbp; pop r12; ret
0x43ae08: mov eax,0x1; pop rbx; pop rbp; ret
0x414436: mov rax,rdx; pop rbx; pop rbp; ret
0x461fec: mov fs:[rax],edx; xor eax,eax; ret
0x45fde6: rol ch,cl; std; xlat ds:[rbx]; ret
0x41d711: mov esp,0x448d48c0; cmp al,dh; ret
0x4138c2: xor eax,eax; pop rbx; pop rbp; ret
0x40551f: xor eax,eax; pop rbp; pop r12; ret
0x434879: mov [rdx+0x2],al; mov rax,rdi; ret
0x45e62c: sar eax,0x2; lea eax,[r8-0x1]; ret
0x40fc53: mov rax,rbx; pop rbx; pop rbp; ret
0x46c7d7: int 0x3c; stc; dec [rax-0x77]; ret
0x46f49e: add eax,0x234bc5; add rsp,0x8; ret
0x499d35: and [rsi+rcx*1+0x18],bh; rex.R ret
0x401c82: add rsp,0x8; pop rbx; pop rbp; ret
0x43b6ed: jae 0x43b6f0 <sched_yield+16>; ret
0x460e7c: mov bl,0x48; mov eax,edx; repz ret
0x407488: fiadd [rbp+0x450f48c9]; ret 0x8348
0x46c397: cmp al,0x0; add [rcx-0x77],cl; ret
0x4383d5: mov dh,0x56; hlt; sub eax,edx; ret
0x43262c: fsub [rsi+0xf]; xlat ds:[rbx]; ret
0x43a260: rex.W jg 0x43a26a; vzeroupper; ret
0x413427: mov fs:[rax],0xc; xor eax,eax; ret
0x409a62: mov eax,ebp; pop rbx; pop rbp; ret
0x43bb6d: ja 0x43bb78 <lseek64+24>; repz ret
0x475cb2: stc; in al,0x22; add [rax],cl; ret
0x43d9a8: ror [rax+0x39],0xfa; setae al; ret
0x43a56f: div ecx; pop rbx; mov eax,eax; ret
0x438395: mov dh,0x56; lock sub eax,edx; ret
0x4604db: je 0x4604e0 <wmemset+32>; repz ret
0x478f48: and al,0x10; or [rax-0x7d],cl; ret
0x4776da: mov rax,rbp; pop rbx; pop rbp; ret
0x43a47a: add [rax+0xf],cl; rex.R ret 0xc35b
0x46f74a: or [rcx+0x1f0fff],bh; pop rbx; ret
0x4155c4: or ecx,[rax-0x73]; rex.X; lock ret
0x46bbfc: and al,0x48; add esp,0x30; bnd ret
0x4081f1: mov eax,edx; pop rbx; pop rbp; ret
0x4383e5: mov dh,0x56; cmc; sub eax,edx; ret
0x40c070: mov dh,0xc0; neg eax; pop rbx; ret
0x494eba: or esp,[rsi+rcx*1+0x18]; rex.B ret
0x434897: mov [rdx+0x4],al; mov rax,rdi; ret
0x42a8e2: mov [rdi],si; mov [r9-0x2],cx; ret
0x461837: mov fs:[rax],0x2; xor eax,eax; ret
0x43b7c9: ja 0x43b7d0 <_fxstat+32>; repz ret
0x439f9b: stos es:[rdi],al; mov rax,rdx; ret
0x4383c5: mov dh,0x56; repz sub eax,edx; ret
0x43676d: movdqu XMMWORD [rdi+0xf],xmm2; ret
0x461c3b: ja 0x461c40 <_lxstat+32>; repz ret
0x46defc: shl ecx,cl; mov [rdi-0x10],r9; ret
0x427c20: movzx edx,[rsi]; mov [rdi],dl; ret
0x4392e8: movzx ecx,[rsi]; mov [rdi],cl; ret
0x47843e: xchg ax,ax; mov rax,[rsi+0x8]; ret
0x46f095: adc rax,rdx; pop rbp; pop rbx; ret
0x451687: lock add r9d,eax; mov eax,r9d; ret
0x41e525: sub al,ch; std; xlat ds:[rbx]; ret
0x40e0a9: sub eax,ecx; lea eax,[r8-0x1]; ret
0x43a43e: jmp rax; xor eax,eax; pop rbx; ret
0x40dcf9: rex push 0x75c08548; lock repz ret
0x46adf2: add eax,0x2395b9; add rsp,0x8; ret
0x4490fd: mov [rax],0x2f; mov [rdi],0x0; ret
0x43ff6e: add al,0x17; add al,ch; ret 0xfc04
0x416759: add eax,0x6d12; cmove rax,rdx; ret
0x472f26: sar rax,0x3; pop rbp; pop r12; ret
0x47787f: lock mov r15,[rbp-0x8]; leave; ret
0x414751: mov rax,rdx; pop rbp; pop r12; ret
0x46b786: call [rbx+0x64]; mov eax,[rax]; ret
0x43c675: add [rbp+0xf],dh; add rsp,0x28; ret
0x426deb: movdqu XMMWORD [rdi-0x10],xmm1; ret
0x4155dc: rol ebx,0x66; nop; xor eax,eax; ret
0x4079d1: add [rbp+0x8],dh; add rsp,0xd8; ret
0x434909: add eax,0x5428948; mov rax,rdi; ret
0x42a8e3: mov [rdi],esi; mov [r9-0x2],cx; ret
0x43dc2f: add [rax-0x77],cl; ja 0x43dc54; ret
0x46fdce: ror [rax+0x1],0xf8; sub rax,r8; ret
0x415c7d: add [rax+0xf],cl; rex.RB ret 0xc3f3
0x40c06f: movzx eax,al; neg eax; pop rbx; ret
0x42a87d: vmovdqu YMMWORD [r9-0x20],ymm3; ret
0x40ae44: add esp,0xa8; pop rbx; pop rbp; ret
0x42a812: vmovups ZMMWORD [r9-0x40],zmm7; ret
0x43483b: mov [rdx+0x8],eax; mov rax,rdi; ret
0x439f79: lock movdqu XMMWORD [rdi],xmm0; ret
0x47751e: or [rbp+0x4],dh; mov [rax],rdx; ret
0x415d04: add [rax+0xf],cl; rex.RB ret 0x66c3
0x41d712: ror [rax-0x73],0x44; cmp al,dh; ret
0x416b7b: mov ebx,0xf480001; rex.R ret 0x66c3
0x46f29d: mov [rdi+0x8],rax; mov eax,0x2; ret
0x40cf6e: add esp,0x38; pop rbx; pop rbp; ret
0x43483a: mov [rdx+0x8],rax; mov rax,rdi; ret
0x4676b2: adc eax,0x4000003; xor eax,eax; ret
0x474f35: add rsp,0x38; pop rbx; pop r14; ret
0x43a1f8: cld; mov [rdi],ecx; vzeroupper; ret
0x47028e: add [rbp+rcx*4+0x4],cl; retf 0x8b41
0x447e5a: add [rax],al; pop rbx; pop r12; ret
0x432922: xor [rax+0xf],cl; rex.RB ret 0xf8c5
0x43606b: add al,0x48; lea eax,[rdx+0x5]; ret
0x455e2e: stos es:[rdi],eax; mov eax,0x1; ret
0x4082ef: test [rax+rax*1-0x76b80000],ch; ret
0x4348b7: mov [rdx+0x3],eax; mov rax,rdi; ret
0x4102cc: idiv edi; call [rax+0x90d8d48]; ret
0x46d325: add [rbp+0xc],dh; add rsp,0x38; ret
0x43bd46: add [rbp+0x5],dh; add rsp,0x58; ret
0x415d79: add eax,0x1cf42; cmove rax,rdx; ret
0x447e56: add esp,0xb8; pop rbx; pop r12; ret
0x40f84e: add [rax],al; xor eax,eax; repz ret
0x4364f3: mov [rdi],cx; mov [rdi+0x2],dh; ret
0x472cca: add [rbp+0xf],dh; add rsp,0x38; ret
0x44ac26: dec [rbp-0x7b]; dec [rax-0x77]; ret
0x47336a: or [rax],al; add [rax-0x7d],cl; ret
0x43494a: mov [rdx+0x7],rax; mov rax,rdi; ret
0x436f18: mov bh,0x48; lea eax,[rdi+0x7]; ret
0x42a8aa: vmovdqu XMMWORD [r9-0x10],xmm1; ret
0x407e55: add rsp,0xd8; pop rbx; pop rbp; ret
0x472a33: sub [rbx-0x26],dh; mov eax,0x1; ret
0x4348e9: mov [rdx+0x7],eax; mov rax,rdi; ret
0x41db98: addr32 add rax,rdi; vzeroupper; ret
0x474c78: add [rbp+0xb],dh; add rsp,0x28; ret
0x407e5a: add [rax],al; pop rbx; pop rbp; ret
0x442330: add [rax],al; add [rax+0x1],cl; ret
0x462321: jne 0x462370 <is_dst+160>; repz ret
0x43942e: rol [rcx+0xf],1; adc [rbx],esp; ret
0x477a02: mov rbp,[rbp+0x0]; mov rsp,rcx; ret
0x47752e: xchg ax,ax; mov rax,[rdi+0x98]; ret
0x4348d9: mov [rdx+0x6],eax; mov rax,rdi; ret
0x46083c: fisub [rbx]; add [rax+0x39],cl; ret
0x487904: mov ebp,0xc000000f; sldt [rax]; ret
0x42a84e: vmovups ZMMWORD [r9-0x40],zmm3; ret
0x4096e4: add rsp,0x18; pop rbx; pop rbp; ret
0x43492a: mov [rdx+0x6],rax; mov rax,rdi; ret
0x461094: pcmpeqb mm3,[rcx]; add rax,0x2; ret
0x43490a: mov [rdx+0x5],rax; mov rax,rdi; ret
0x436b4b: add al,0x48; lea eax,[rdi+0x5]; ret
0x458006: popf; idiv rdi; dec [rax-0x77]; ret
0x477a03: mov ebp,[rbp+0x0]; mov rsp,rcx; ret
0x427b47: mov [rdi+0x1],dx; mov [rdi],cx; ret
0x413501: rep stos es:[rdi],rax; pop rbx; ret
0x42a896: vmovdqu YMMWORD [r9-0x20],ymm1; ret
0x44a44e: add [rbp+0x5],dh; add rsp,0x18; ret
0x409ab8: add [rax],al; add [rax-0x1],bh; ret
0x49b9d3: adc [rbx+0x80e5802],al; rex.WXB ret
0x474f36: add esp,0x38; pop rbx; pop r14; ret
0x47529e: xchg ax,ax; mov rax,[rsi+0xb8]; ret
0x438bfd: add [rax],al; add [rcx+0x1],cl; ret
0x46f0ea: add [rax],al; add [rax+0x1],bh; ret
0x426d7b: movdqu XMMWORD [rdi-0x10],xmm0; ret
0x496dcd: add ah,[rsi+rcx*1+0x8]; rex.WXB ret
0x436059: add al,0x48; lea eax,[rdx+0x4]; ret
0x4348c9: mov [rdx+0x5],eax; mov rax,rdi; ret
0x462392: jne 0x46237d <is_dst+173>; repz ret
0x43a1ed: clc; mov [rdi],rcx; vzeroupper; ret
0x439052: mov [rdi],cx; mov [rsi-0x2],cx; ret
0x40cf6d: add rsp,0x38; pop rbx; pop rbp; ret
0x478438: adc [rbp+0x13],dh; xor eax,eax; ret
0x460d02: or eax,0xc2bc0f48; shr rax,0x2; ret
0x41dc13: ror [rax+0x1],0xf8; vzeroupper; ret
0x40ae43: add rsp,0xa8; pop rbx; pop rbp; ret
0x41dc12: mov esp,0xf80148c0; vzeroupper; ret
0x43678d: movdqu XMMWORD [rdi+0x10],xmm2; ret
0x478ef7: mov dl,0x22; add [rax+0x39],cl; ret
0x447e55: add rsp,0xb8; pop rbx; pop r12; ret
0x41dea8: cli; movzx edx,dl; sub eax,edx; ret
0x46fa7c: add [rbp+0x5],dh; add rsp,0x38; ret
0x416b79: add eax,0x1bb12; cmove rax,rdx; ret
0x496dcb: adc [rbx+0x80e6402],al; rex.WXB ret
0x416730: add eax,0x221ab; cmove rax,rdx; ret
0x407e56: add esp,0xd8; pop rbx; pop rbp; ret
0x4348a9: mov [rdx+0x4],eax; mov rax,rdi; ret
0x45408c: mov fs:[rax],0x16; mov eax,edx; ret
0x4383b5: mov dh,0x56; repnz sub eax,edx; ret
0x475298: adc [rbp+0x1d],dh; xor eax,eax; ret
0x46f2fb: add [rax],al; add [rax+0x2],bh; ret
0x4096e5: add esp,0x18; pop rbx; pop rbp; ret
0x416a5c: add cl,[rax+0xf]; rex.RB ret 0xc3f3
0x434898: rex.X add al,0x48; mov eax,edi; ret
0x46f29e: mov [rdi+0x8],eax; mov eax,0x2; ret
0x4324c1: xor [rax+0xf],cl; rex.RB ret 0x90c3
0x41f03a: adc [rsi+0xf],ah; cmp [rdi],dl; ret
0x43712e: add [rax],al; lea rax,[rdi+0xb]; ret
0x445ae7: add al,[rax]; add [rax+0x39],cl; ret
0x415c40: clc; dec [rax+0xf]; rex.R ret 0x8348
0x43c9c5: mov [rdx],edi; pop rbx; pop rbp; ret
0x47518b: lea rax,[rax+0x8]; mov [r10],r8; ret
0x407e59: add [rax],al; add [rbx+0x5d],bl; ret
0x44a383: call 0x6544a387; add rax,ds:0x0; ret
0x456431: add [rax],al; add [rax+0x29],cl; ret
0x42aa4c: vmovups ZMMWORD [r9-0x40],zmm15; ret
0x421c1a: push rdi; std; mov [rdi-0x2],cx; ret
0x461080: je 0x4610a0 <__wcslen_sse2+512>; ret
0x4589ba: add [rax],al; add [rax+0x63],cl; ret
0x436512: mov [rdi+0x4],dh; mov [rdi],ecx; ret
0x40de9a: add [rax],al; mov [r9+0xa8],0x0; ret
0x44d911: add [rax],al; add [rcx-0x77],cl; ret
0x410556: add [rax],al; add [rax+0x39],cl; ret
0x4394b5: xor [rbp+0xf],al; adc [rbx],eax; ret
0x40ddb8: add [rax],al; add [rax],al; repz ret
0x4102ac: idiv edi; call [rax+0x290d8d48]; ret
0x4370be: add [rax],al; lea rax,[rdi+0x3]; ret
0x46adf3: mov ecx,0x48002395; add esp,0x8; ret
0x4370ee: add [rax],al; lea rax,[rdi+0x6]; ret
0x43913b: vmovups ZMMWORD [rsi+0xc0],zmm2; ret
0x4134ff: jmp 0xffffffffab8a2807; pop rbx; ret
0x436f3f: add [rax],eax; add dh,dh; ret 0x7504
0x464c7e: add [rax],al; add [rbp-0x77],cl; ret
0x4397e9: sar [rsi+0x7f],0x23; vzeroupper; ret
0x456147: add [rax-0x1],bh; mov [rdi],rsi; ret
0x41d551: fldenv [rsi+0xf]; xlat ds:[rbx]; ret
0x457289: sbb [rax],al; add [rax-0x7d],cl; ret
0x46a2a2: rex.R ror [rcx+rcx*4-0x40],0x5b; ret
0x43714e: add [rax],al; lea rax,[rdi+0xd]; ret
0x43710e: add [rax],al; lea rax,[rdi+0x9]; ret
0x400fb5: add al,[rax]; add [rax-0x39],cl; ret
0x43713e: add [rax],al; lea rax,[rdi+0xc]; ret
0x40568a: mov dh,0x73; add [rax-0x77],ecx; ret
0x41158f: add ch,[rcx]; add [rax+0x39],cl; ret
0x44dd6b: add al,[rax]; add [rax+0x63],cl; ret
0x439053: mov [rdi],ecx; mov [rsi-0x2],cx; ret
0x467217: add [rbx],al; add [rax],al; repz ret
0x48ffa4: stc; jnp 0x48ff60 <__tens+5088>; ret
0x43707d: add [rax],al; lea rax,[rdi+0xf]; ret
0x416880: add eax,0x22d1b; cmovne rax,rdx; ret
0x439029: vmovdqu XMMWORD [rsi-0x10],xmm0; ret
0x436553: mov [rdi+0x8],dh; mov [rdi],rcx; ret
0x4082a0: xor [rcx],al; add [rax],al; repz ret
0x46f44e: add [rbp+0x14],dh; add rsp,0x38; ret
0x461f82: add [rbp+0x1e],dh; add rsp,0x38; ret
0x4388c5: sbb eax,eax; sbb eax,0xffffffff; ret
0x4370ce: add [rax],al; lea rax,[rdi+0x4]; ret
0x409617: nop cs:[rax+rax*1+0x0]; pop rbx; ret
0x46d0ee: add [rax],al; mov rax,[rax+0x8]; ret
0x43b976: add [rbp+0x42],dh; add rsp,0x58; ret
0x4743bc: add eax,[rax]; add [rax+0x1],cl; ret
0x41691f: add eax,0x2390c; cmovne rax,rdx; ret
0x4364e0: mov dx,WORD [rsi]; mov [rdi],dx; ret
0x412791: add [rax],al; add [rcx-0x7d],cl; ret
0x44ca8a: or [rcx],eax; add [rax+0x39],cl; ret
0x40ea18: mov eax,[rdi+0x10]; sub eax,edx; ret
0x426f9a: in al,0xf3; movq [rdi-0x10],mm1; ret
0x46b380: clc; dec [rax+0xf]; rex.R ret 0x66c3
0x421554: pop rdi; lock mov [rdi-0x8],rdx; ret
0x4726bc: mov eax,0x489066ff; add esp,0x8; ret
0x436013: mov [rdx],ax; lea rax,[rdx+0x1]; ret
0x436526: mov [rdi],ecx; mov [rdi+0x4],dx; ret
0x42a8cf: mov [rdi],esi; mov [r9-0x4],ecx; ret
0x436568: mov [rdi],ecx; mov [rdi+0x8],dx; ret
0x43709e: add [rax],al; lea rax,[rdi+0x1]; ret
0x416b20: add eax,0x22a7b; cmovne rax,rdx; ret
0x415cb2: and eax,0xf480000; rex.RB ret 0xc3f3
0x47518c: lea eax,[rax+0x8]; mov [r10],r8; ret
0x416819: add eax,0x229d2; cmovne rax,rdx; ret
0x416b01: add al,cs:[rax]; cmovne rax,rdx; ret
0x416a5a: and ch,0x2; cmovne rax,rdx; repz ret
0x45e75a: mov [rax],rdx; xor eax,eax; repz ret
0x488c24: add [rax],al; add [rax],al; ret 0x33
0x4004cb: or ebp,[rdx]; add [rsi-0x70],ah; ret
0x436b03: mov [rdi],dx; lea rax,[rdi+0x1]; ret
0x43901f: vmovdqu YMMWORD [rsi-0x20],ymm2; ret
0x4676b0: or [rdi+0x315],0x4; xor eax,eax; ret
0x4604f8: std; dec [rax+0xf]; rex.R ret 0x90c3
0x421a7d: rex.WRXB cmc; mov [rdi-0x4],edx; ret
0x4370ae: add [rax],al; lea rax,[rdi+0x2]; ret
0x43bbc5: add [rbp+0x43],dh; add rsp,0x18; ret
0x47746b: add rax,[r8+0xd0]; add rsp,0x18; ret
0x427b48: mov [rdi+0x1],edx; mov [rdi],cx; ret
0x4490bd: mov [rdi],0x0; pop rbx; pop r14; ret
0x4775a7: rex.R and al,0x10; add rsp,0x28; ret
0x43711e: add [rax],al; lea rax,[rdi+0xa]; ret
0x4383a5: mov dh,0x56; icebp; sub eax,edx; ret
0x436f11: add [rax],eax; add dh,dh; ret 0x7540
0x43702a: add [rax],al; lea rax,[rdi+0x7]; ret
0x415bbd: add [rax],al; add [rax+0x16],bh; ret
0x42a8be: mov [rdi],esi; mov [r9-0x8],rcx; ret
0x439274: rep movs es:[rdi],ds:[rsi]; cld; ret
0x46bbf9: mov rbx,[rsp]; add rsp,0x30; bnd ret
0x44554e: test [rsi+rdi*8-0x7cb70001],esi; ret
0x4082f1: add [rax],al; add [rax-0x77],cl; ret
0x48e9bb: mov ebx,0xbfbebdbc; rol cl,0xc2; ret
0x415d00: add eax,0x2307b; cmovne rax,rdx; ret
0x48f24b: xchg [rsp+rax*1+0x6fa9ce9d],esp; ret
0x43905c: add [rdx+0x2],esi; mov [rdi],cl; ret
0x4397e7: movabs al,ds:0x77f8c5237f7ec1c4; ret
0x432a9f: mov al,0xc5; std; xlat ds:[rbx]; ret
0x41d65e: xor [rsi+0xf],ah; xlat ds:[rbx]; ret
0x4169bf: add eax,0x22ffc; cmovne rax,rdx; ret
0x44cfcd: or [rax],eax; add [rcx-0x77],cl; ret
0x421516: pop rdi; lock mov [rdi-0x8],rcx; ret
0x48f6f6: cld; test al,0x97; xchg esp,eax; ret
0x4370fe: add [rax],al; lea rax,[rdi+0x8]; ret
0x4514f5: out dx,eax; cli; dec [rax+0x29]; ret
0x45db3a: jo 0x45db4c; mov [rax+0x40],rcx; ret
0x438f08: ror [rax+0x1],0xf8; sub rax,rsi; ret
0x438fda: vmovups ZMMWORD [rsi-0x40],zmm2; ret
0x40569d: add [rax],al; add [rax-0x7d],cl; ret
0x43dc11: and dh,al; rex.RXB sub [r9],r8b; ret
0x46d290: add [rbp+0x30],dh; add rsp,0x38; ret
0x46bbfa: mov ebx,[rsp]; add rsp,0x30; bnd ret
0x48f77b: rex.WRB push r8; and ebx,[rbx]; iret
0x4169e0: add eax,0x22bab; cmovne rax,rdx; ret
0x41685f: add eax,0x2316c; cmovne rax,rdx; ret
0x47a2d6: jmp 0x90c2623; pop rbx; pop rbp; ret
0x46cb73: add al,[rax]; add [rcx-0x77],al; ret
0x436567: mov [rdi],rcx; mov [rdi+0x8],dx; ret
0x421c6d: rex.WRXB hlt; mov [rdi-0x4],edx; ret
0x4348c8: add eax,0x48054289; mov eax,edi; ret
0x42a8bd: mov [rdi],rsi; mov [r9-0x8],rcx; ret
0x416979: add eax,0x22862; cmovne rax,rdx; ret
0x471656: add [rax],al; add [rcx-0x77],al; ret
0x4168ce: add eax,0x237dd; cmovne rax,rdx; ret
0x43715e: add [rax],al; lea rax,[rdi+0xe]; ret
0x416aff: add eax,0x22ecc; cmovne rax,rdx; ret
0x46d435: add [rbp+0x1c],dh; add rsp,0x48; ret
0x416882: sub eax,0xf480002; rex.RB ret 0x66c3
0x41d7fb: mov esp,0xf80148c0; add rax,rcx; ret
0x436ce0: adc al,0x48; lea eax,[rdi+0x14]; ret
0x416a5b: in eax,0x2; cmovne rax,rdx; repz ret
0x46d69f: add [rbp+0x12],dh; add rsp,0x38; ret
0x40edc1: add al,[rax]; add rsp,0x80; repz ret
0x41d7fc: ror [rax+0x1],0xf8; add rax,rcx; ret
0x432e53: mov esp,0xd00148d2; sub rax,rdi; ret
0x45e75b: mov [rax],edx; xor eax,eax; repz ret
0x46fe05: add [rax],r8b; xor eax,eax; repz ret
0x4022fe: add [rax],al; add [rax-0x39],cl; ret
0x4364f4: mov [rdi],ecx; mov [rdi+0x2],dh; ret
0x488734: add [rax],al; add [rax],al; ret 0x24
0x416ab9: add eax,0x22732; cmovne rax,rdx; ret
0x4774af: or [rbp+0x1a],dh; mov rax,[rax]; ret
0x4370de: add [rax],al; lea rax,[rdi+0x5]; ret
0x43c9c4: mov [rdx],rdi; pop rbx; pop rbp; ret
0x46ae9c: add eax,0x239507; mov [rsi],rax; ret
0x461e3b: add [rbp+0x45],dh; add rsp,0x58; ret
0x43b746: add [rbp+0x10],dh; add rsp,0x28; ret
0x421682: push rsi; clc; mov [rdi-0x8],rdx; ret
0x4327f0: bsf rax,rax; lea rax,[rdi+rax*1]; ret
0x4383c4: movzx edx,[rsi-0xd]; sub eax,edx; ret
0x4365b7: mov [rdi],rcx; mov [rdi+0x7],rdx; ret
0x44a696: add [rbp+0x4a],dh; add rsp,0x148; ret
0x436535: mov [rdi],ecx; mov [rdi+0x3],edx; ret
0x415e04: add [rax],al; add [rcx-0x77],cl; retf
0x461118: nop [rax+rax*1+0x0]; mov rax,0x6; ret
0x43d1f3: add [rax],0x0; add [rax],al; repz ret
0x461d2c: mov ecx,0x48000000; add esp,0x78; ret
0x43da05: add eax,[rax]; add [rcx-0x77],al; ret
0x426fb9: push rdi; hlt; mov [rdi-0x4],ecx; ret
0x4365a7: mov [rdi],rcx; mov [rdi+0x6],rdx; ret
0x41d741: mov esp,0x448d48c0; cmp [rax],ah; ret
0x41f464: movzx ecx,[rsi-0x1]; sub eax,ecx; ret
0x435f94: mov [rdx],eax; lea rax,[rdx+0x7]; ret
0x40ed08: nop [rax+rax*1+0x0]; mov rax,rdi; ret
0x40f5a8: add [rax],eax; add [rax],al; repz ret
0x40fceb: jne 0x40fcef <top_check+79>; repz ret
0x407f1d: add [rcx+0x415d5be8],cl; pop rsp; ret
0x42f4cd: mov edx,[rcx+rdx*4]; sub eax,edx; ret
0x436b73: mov [rdi],rdx; lea rax,[rdi+0x7]; ret
0x436b74: mov [rdi],edx; lea rax,[rdi+0x7]; ret
0x427837: mov [rdi+0x2],rdx; mov [rdi],rcx; ret
0x427607: mov [rdi+0x7],rdx; mov [rdi],rcx; ret
0x41d71f: add [rdi],cl; mov esp,0xf80148c0; ret
0x4278a7: mov [rdi+0x1],rdx; mov [rdi],rcx; ret
0x4383e4: movzx edx,[rsi-0xb]; sub eax,edx; ret
0x436b87: mov [rdi],ecx; lea rax,[rdi+0x8]; ret
0x4326d3: bsf eax,eax; lea rax,[rdi+rax*1]; ret
0x462b20: pushf; mov ?,ebp; dec [rax+0x39]; ret
0x415bd9: or al,0x0; add [rax],al; pop rbx; ret
0x4022fd: add [rax],0x0; add [rax-0x39],cl; ret
0x46e00a: or [rcx-0x2d],cl; jmp 0x1096695e; ret
0x436598: mov [rdi],ecx; mov [rdi+0x5],rdx; ret
0x421df1: push rsi; cld; mov [rdi-0x4],edx; ret
0x439047: mov [rdi],ecx; mov [rsi-0x4],ecx; ret
0x4726b9: jmp 0x0; xchg ax,ax; add rsp,0x8; ret
0x46c457: cmp eax,[rax]; add [rcx-0x77],cl; ret
0x427a65: mov [rdi+0x1],edx; mov [rdi],ecx; ret
0x45fc58: bsr rsi,rsi; lea rax,[rcx+rsi*1]; ret
0x4383d4: movzx edx,[rsi-0xc]; sub eax,edx; ret
0x436577: mov [rdi],ecx; mov [rdi+0x7],edx; ret
0x4149f5: nop [rax]; add rsp,0x10; pop rbx; ret
0x489ec4: add [rax],al; add [rax],al; ret 0x1d5
0x46d52f: rex.XB adc [r8+0x5a],bl; pop rbx; ret
0x4383f4: movzx edx,[rsi-0xa]; sub eax,edx; ret
0x435f93: mov [rdx],rax; lea rax,[rdx+0x7]; ret
0x4610f8: nop [rax+rax*1+0x0]; mov rax,0x4; ret
0x41d731: mov esp,0x448d48c0; cmp [rax],dl; ret
0x44df72: add [rax],al; add [rax-0x77],cl; iret
0x427678: mov [rdi+0x6],edx; mov [rdi],rcx; ret
0x421ff7: push rdi; sti; mov [rdi-0x4],ecx; ret
0x4774de: add [rax],al; mov rax,[rdi+0x90]; ret
0x40cd15: add eax,[rax]; add rsp,0x80; repz ret
0x4223f7: push rdi; stc; mov [rdi-0x4],ecx; ret
0x455bd8: add [rax],eax; add [rax-0x7d],cl; ret
0x47746c: add eax,[rax+0xd0]; add rsp,0x18; ret
0x4610a8: nop [rax+rax*1+0x0]; add rax,0x3; ret
0x438f49: lea rax,[rdi+rcx*1]; sub rax,rsi; ret
0x4276e7: mov [rdi+0x5],rdx; mov [rdi],rcx; ret
0x4277c7: mov [rdi+0x3],rdx; mov [rdi],rcx; ret
0x427758: mov [rdi+0x4],edx; mov [rdi],rcx; ret
0x4221f7: push rdi; cli; mov [rdi-0x4],ecx; ret
0x436b86: mov [rdi],rcx; lea rax,[rdi+0x8]; ret
0x4383a4: movzx edx,[rsi-0xf]; sub eax,edx; ret
0x436b22: mov [rdi],edx; lea rax,[rdi+0x3]; ret
0x415e6d: sbb cl,[rcx+rcx*4-0x30]; pop rbx; ret
0x436ec8: nop [rax+rax*1+0x0]; xor rax,rax; ret
0x49bf01: add [rdi],0x48; or eax,0x35b0303; ret
0x47756e: add [rax],al; mov rax,[rdi+0xa0]; ret
0x42abb3: vmovups ZMMWORD [r9+0x1c0],zmm15; ret
0x45fb54: bsr rsi,rsi; lea rax,[rdi+rsi*1]; ret
0x4783d8: nop [rax+rax*1+0x0]; mov eax,0x2; ret
0x40ecfe: add [rax],al; mov rax,[rdi+0x68]; ret
0x403d46: mov [rcx-0x75],0x47; add al,0xeb; ret
0x43dc22: push rdi; adc [rbx-0x1e],dh; repz ret
0x45fb55: bsr esi,esi; lea rax,[rdi+rsi*1]; ret
0x4630f4: mov al,0xd3; stc; dec [rax+0x39]; ret
0x460bdc: jne 0x460bd0 <wcschrnul+16>; repz ret
0x4610e8: nop [rax+rax*1+0x0]; mov rax,0x3; ret
0x411020: adc [rcx],ch; add [rax-0x7d],cl; retf
0x455d0a: add [rcx+0x415d5bd0],cl; pop rsp; ret
0x46b769: push 0x23; add [rcx],al; pop rbx; ret
0x47755e: add [rax],al; mov [rdi+0x98],rsi; ret
0x43837b: movzx edx,[rsi-0x9]; sub eax,edx; ret
0x427677: mov [rdi+0x6],rdx; mov [rdi],rcx; ret
0x42709a: out 0xf3,al; movq [rdi-0x10],mm1; ret
0x43ee2b: add [rax],al; add al,ch; pop rbp; ret
0x427757: mov [rdi+0x4],rdx; mov [rdi],rcx; ret
0x48972c: add [rax],al; add [rax],al; ret 0x1d4
0x4775a5: mov rax,[rsp+0x10]; add rsp,0x28; ret
0x4610d8: nop [rax+rax*1+0x0]; mov rax,0x2; ret
0x4057ea: add [rax],al; nop [rax+0x0]; repz ret
0x4610c8: nop [rax+rax*1+0x0]; mov rax,0x1; ret
0x438f4a: lea eax,[rdi+rcx*1]; sub rax,rsi; ret
0x436587: mov [rdi],ecx; mov [rdi+0x8],edx; ret
0x496735: add [rsi+rcx*1+0x10],ecx; rex.RXB ret
0x4278a8: mov [rdi+0x1],edx; mov [rdi],rcx; ret
0x4365a8: mov [rdi],ecx; mov [rdi+0x6],rdx; ret
0x427608: mov [rdi+0x7],edx; mov [rdi],rcx; ret
0x4276e8: mov [rdi+0x5],edx; mov [rdi],rcx; ret
0x4775a6: mov eax,[rsp+0x10]; add rsp,0x28; ret
0x436b35: mov [rdi],ecx; lea rax,[rdi+0x4]; ret
0x40dec8: nop [rax+rax*1+0x0]; xor eax,eax; ret
0x4277c8: mov [rdi+0x3],edx; mov [rdi],rcx; ret
0x40fa76: add [rax],al; mov [rdi+0x60],rcx; ret
0x48ef02: mov ch,0x31; mov ah,bl; push rsi; ret
0x461108: nop [rax+rax*1+0x0]; mov rax,0x5; ret
0x4775be: add [rax],al; mov rax,[rdi+0xb0]; ret
0x427838: mov [rdi+0x2],edx; mov [rdi],rcx; ret
0x41f217: movzx edx,[rsi-0x1]; sub eax,edx; ret
0x436586: mov [rdi],rcx; mov [rdi+0x8],edx; ret
0x436b04: mov [rdi],edx; lea rax,[rdi+0x1]; ret
0x409ab9: add [rax],al; mov eax,0xffffffff; ret
0x46d234: rex.XB sbb [r8+0x5a],bl; pop rbx; ret
0x461128: nop [rax+rax*1+0x0]; mov rax,0x7; ret
0x436576: mov [rdi],rcx; mov [rdi+0x7],edx; ret
0x49becd: add [rdi],0x48; or eax,0x34b0303; ret
0x47a5c3: nop [rax+rax*1+0x0]; add rsp,0x8; ret
0x47757e: add [rax],al; mov rax,[rdi+0xb8]; ret
0x436597: mov [rdi],rcx; mov [rdi+0x5],rdx; ret
0x49bf35: add [rdi],0x48; or eax,0x1370303; ret
0x430da2: mov eax,[rcx+rax*4]; sub eax,edx; ret
0x45610f: or [rsi-0x2f],esi; mov [rdi],rsi; ret
0x43dc2e: add [rax],al; mov [rdi+0x20],rsi; ret
0x4365b8: mov [rdi],ecx; mov [rdi+0x7],rdx; ret
0x400b2c: call 0x4083f0 <puts>; nop; leave; ret
0x47751a: test [rax+0x7508313c],0x10894804; ret
0x4279f5: mov [rdi+0x2],edx; mov [rdi],ecx; ret
0x427039: push rdi; cmc; mov [rdi-0x4],ecx; ret
0x40f722: fld [rax-0x78]; cmp al,0x30; repz ret
0x427985: mov [rdi+0x3],edx; mov [rdi],ecx; ret
0x436042: mov [rdx],eax; lea rax,[rdx+0x3]; ret
0x472f28: clc; add ebx,[rbp+0x41]; pop rsp; ret
0x46211d: add [rax],eax; add [rax-0x77],cl; ret
0x403116: sub [rax],eax; add [rax-0x77],cl; ret
0x471b15: add [rbx-0xbb63],ecx; jmp [rcx]; retf
0x45fc59: bsr esi,esi; lea rax,[rcx+rsi*1]; ret
0x4391d8: vmovups ZMMWORD [rsi+0x1c0],zmm2; ret
0x4775ce: add [rax],al; mov rax,[rdi+0xa8]; ret
0x4142c4: dec [rax-0x77]; add eax,0x28d594; ret
0x45e7fc: inc ebx; xchg ax,ax; xor eax,eax; ret
0x4383b4: movzx edx,[rsi-0xe]; sub eax,edx; ret
0x436014: mov [rdx],eax; lea rax,[rdx+0x1]; ret
0x43b114: xor [rsi],esp; add [rax+0x39],cl; ret
0x42701a: in eax,0xf3; movq [rdi-0x10],mm1; ret
0x4752ae: add [rax],al; mov rax,[rsi+0xa8]; ret
0x42d0d6: mov eax,[rdx+rax*4]; sub eax,ecx; ret
0x472bda: push rdi; or [rcx+0x1],cl; ret 0x894c
0x46e4d1: add rdx,r8; mov rax,rdx; pop rbx; ret
0x436649: movq [rdi],mm0; mov [rdi+0xe],rcx; ret
0x49571a: or [rax+0xb],cl; add dh,[rcx+0xa]; ret
0x47984f: add [rbx+0x75c08507],cl; or dh,bl; ret
0x46128d: ror [rax-0x3f],1; call 0x783ed797; ret
0x415c7c: add al,[rax]; cmovne rax,rdx; repz ret
0x438eb0: enter 0x357e,0x48; movsxd eax,ecx; ret
0x43ae07: or [rax+0x1],bh; pop rbx; pop rbp; ret
0x40f32f: call 0x5c82508f; pop r13; pop r14; ret
0x421eaf: jg 0x421ef8 <__memcpy_ssse3+8952>; ret
0x46f094: fmul [rax+0x11]; rcr [rbp+0x5b],1; ret
0x46126d: ror [rax-0x3f],1; call 0x783ed777; ret
0x460bab: adc eax,0x30; cmovne rax,rdx; repz ret
0x46a2a0: cmove r8,rax; mov rax,r8; pop rbx; ret
0x43eb02: inc [rbx]; add [rax+0xf],cl; rex.R ret
0x42223e: rex.WRXB icebp; mov [rdi-0x8],rdx; ret
0x45fd49: dec [rax+0xf]; mov ebp,0xf80148c6; ret
0x4604f5: adc eax,0xfffd9d16; cmove rax,rdx; ret
0x461feb: jmp [rcx+rcx*4+0x10]; xor eax,eax; ret
0x4365d5: movq [rdi],mm0; mov [rdi+0x10],dh; ret
0x45c6f1: call 0x5c872451; pop r13; pop r14; ret
0x408390: call 0x5c81e0f0; pop r13; pop r14; ret
0x46163e: xchg ax,ax; mov eax,0xc9; syscall; ret
0x46b37f: cmp eax,0xffffffff; cmove rax,rdx; ret
0x41d742: ror [rax-0x73],0x44; cmp [rax],ah; ret
0x461191: ror [rax-0x3f],1; call 0x783ed69b; ret
0x40bbc7: adc [rbx+0x6],dh; movzx eax,[rax]; ret
0x409ab5: mov [rax],0x9; mov eax,0xffffffff; ret
0x42203e: rex.WRXB; repnz mov [rdi-0x8],rdx; ret
0x43c546: ja 0x43c550 <getrlimit64+32>; repz ret
0x46defa: clc; shl r9,cl; mov [rdi-0x10],r9; ret
0x461249: ror [rax-0x3f],1; call 0x783ed753; ret
0x40f283: call 0x5c824fe3; pop r13; pop r14; ret
0x4388c4: enter 0xc019,0x83; fdivr st,st(7); ret
0x46f08a: push rdi; or [rcx+0x29],cl; ret 0x894c
0x4615bd: ror [rax-0x3f],1; call 0x783edac7; ret
0x451686: div eax; add r9d,eax; mov eax,r9d; ret
0x43ac85: call 0x419fede5; pop rbp; pop rbp; ret
0x45fbd6: shl [rsi+0xf],1; outs dx,ds:[rsi]; ret
0x4615dd: ror [rax-0x3f],1; call 0x783edae7; ret
0x4614fe: ror [rax-0x3f],1; call 0x783eda08; ret
0x442387: mov edx,0xffffffff; cmovs eax,edx; ret
0x415cb3: add [rax],al; cmovne rax,rdx; repz ret
0x4671e4: add [rax],al; mov [rdi+0x308],rax; ret
0x43bdac: and al,0xc; add rsp,0x10; pop rbx; ret
0x43a573: rol bl,0x48; mov eax,edx; pop rbx; ret
0x447b1d: sub [rbx+rcx*4+0x35],cl; push rbx; ret
0x43b78a: mov [rdx],eax; mov eax,0xffffffff; ret
0x46137a: ror [rax-0x3f],1; call 0x783ed884; ret
0x41d732: ror [rax-0x73],0x44; cmp [rax],dl; ret
0x46e4d2: add edx,eax; mov rax,rdx; pop rbx; ret
0x40ea21: push rax; adc [rbx-0x2fd6efb9],cl; ret
0x4333c3: adc [rax-0x7b],cl; ror [rdi],0x85; ret
0x436669: movq [rdi],mm0; mov [rdi+0xf],rcx; ret
0x45e7ee: cmp ecx,[rdx+0x4c]; cmove eax,ecx; ret
0x45e7ed: cmp rcx,[rdx+0x4c]; cmove eax,ecx; ret
0x438394: movzx edx,[rsi-0x10]; sub eax,edx; ret
0x4155d6: lea ecx,[rdx-0x8]; cmovne rax,rcx; ret
0x436533: push rsi; add ecx,[rcx+0x357890f]; ret
0x402776: mov esp,0x8024; add [rax-0x39],cl; ret
0x4364c8: nop [rax+rax*1+0x0]; mov [rdi],dh; ret
0x46f35e: dec [rax+0x48e57506]; mov eax,esi; ret
0x40ee3d: add [rax],r8b; mov eax,0xffffffff; ret
0x461542: ror [rax-0x3f],1; call 0x783eda4c; ret
0x42ad15: vmovups ZMMWORD [rdi-0x200],zmm15; ret
0x4783f2: inc [rsi*2+0x8b80f]; add [rax],al; ret
0x40ea16: push rax; sbb [rbx-0x2fd6efb9],cl; ret
0x439f7c: jg 0x439f85 <__memset_chk_erms+5>; ret
0x406fdd: ror [rax-0x3f],1; call 0x64cdbbe8; ret
0x461599: ror [rax-0x3f],1; call 0x783edaa3; ret
0x46d100: mov rax,[rax+0x8]; sub rax,fs:0x0; ret
0x436608: movq [rdi],mm0; mov [rdi+0xf],ecx; ret
0x439f9a: rep stos es:[rdi],al; mov rax,rdx; ret
0x42711a: out 0xf3,eax; movq [rdi-0x10],mm1; ret
0x46f1dd: mov [rdx],0xffffc002; mov eax,0x1; ret
0x46fe3e: xchg ax,ax; mov eax,0x27; syscall; ret
0x464ab1: mov [rsi],0xffffffff; xor eax,eax; ret
0x461562: ror [rax-0x3f],1; call 0x783eda6c; ret
0x49bf12: add [rdi],0xd; add eax,[rdx]; cld; ret
0x46162b: ror [rax-0x3f],1; call 0x783edb35; ret
0x421e29: jg 0x421e7a <__memcpy_ssse3+8826>; ret
0x487506: add [rax],al; ror [rax+rax*1],0x0; ret
0x49648e: add [rsp+rax*2],0xe; xor [rdx],al; ret
0x46f4a0: rex.WXB and rax,[r8]; add rsp,0x8; ret
0x44a733: ja 0x44a740 <sigprocmask+32>; repz ret
0x47aad4: pop rbp; jmp 0x414960 <free>; repz ret
0x40835c: call 0x419cc4be; pop rbp; pop r14; ret
0x41dbac: and [rax+0x1],cl; clc; vzeroupper; ret
0x46d101: mov eax,[rax+0x8]; sub rax,fs:0x0; ret
0x436c55: movq [rdi],mm0; lea rax,[rdi+0xf]; ret
0x426e9a: push rdi; repnz mov [rdi-0x8],rcx; ret
0x4612db: ror [rax-0x3f],1; call 0x783ed7e5; ret
0x469210: outs dx,ds:[rsi]; or [rax+0x1],cl; ret
0x477f01: jmp rax; nop [rax+rax*1+0x0]; repz ret
0x43bdad: or al,0x48; add esp,0x10; pop rbx; ret
0x43c60a: je 0x43c60e <getpagesize+14>; repz ret
0x4604d8: or al,0x0; add [rbx+rax*1-0xd],dh; ret
0x456148: mov eax,0xffffffff; mov [rdi],rsi; ret
0x461522: ror [rax-0x3f],1; call 0x783eda2c; ret
0x4365e9: movq [rdi],mm0; mov [rdi+0x10],cx; ret
0x409af6: or [rax-0x1],bh; pop rbx; pop rbp; ret
0x43a1ac: rol [rax+0x48000000],0x39; retf 0xe175
0x4155d5: lea rcx,[rdx-0x8]; cmovne rax,rcx; ret
0x45e0c9: push rax; sbb [rcx+0x5bc0310b],cl; ret
0x451685: div r8d; add r9d,eax; mov eax,r9d; ret
0x415bb8: nop [rax+rax*1+0x0]; mov eax,0x16; ret
0x47754e: mov [rsi],eax; mov rax,[rdi+0x98]; ret
0x472d1b: or [rdi],cl; mov dh,0xc0; neg eax; ret
0x462000: mov [rax],0xc; mov eax,0xffffffff; ret
0x43a48e: add ah,bh; add eax,[rax]; pop rbx; ret
0x451751: sbb ah,[rsi+0xf]; outs dx,ds:[rsi]; ret
0x41e51c: inc ebp; std; xlat ds:[rbx]; ret 0xe883
0x44a361: mov eax,0xfffffff0; add rax,fs:0x0; ret
0x46a1eb: mov [rsi],edi; mov rax,r8; pop rbx; ret
0x45fb9c: xor [rsi+0xf],ah; outs dx,ds:[rsi]; ret
0x415ce3: add [rax],eax; cmovne rax,rdx; repz ret
0x461c8f: ja 0x461c98 <__fxstatat64+40>; repz ret
0x40b6c6: or [rbx+0x5d],bl; pop r12; pop r13; ret
0x455fb7: add [rax],al; mov eax,edx; pop rbx; ret
0x426e0a: push rdi; icebp; mov [rdi-0x8],rcx; ret
0x47752d: jmp [rsi-0x70]; mov rax,[rdi+0x98]; ret
0x417fa8: movzx eax,[rdi+rdx*1]; sub eax,ecx; ret
0x43a4bf: add [rdi],cl; mov dh,0xc1; pop rbx; ret
0x43a535: or [rax],al; add [rax],al; pop rbx; ret
0x437088: nop [rax+rax*1+0x0]; lea rax,[rdi]; ret
0x472d19: add esp,0x8; movzx eax,al; neg eax; ret
0x418013: movzx edx,[rsi+rdx*1]; sub eax,edx; ret
0x41c5f8: movzx edx,[rsi+rcx*1]; sub eax,edx; ret
0x4167c2: je 0x41678a <memcmp_ifunc+26>; repz ret
0x41d4f4: add [rax+0x1],cl; clc; add rax,rcx; ret
0x4913b3: or eax,0xeeb0f650; fcmovb st,st(3); ret
0x491f87: pop rdx; out 0xf5,eax; mov ch,0xab; ret
0x427bb0: movzx edx,WORD [rsi]; mov [rdi],dx; ret
0x44a381: mov eax,0xffffffe8; add rax,fs:0x0; ret
0x421e75: jg 0x421ec6 <__memcpy_ssse3+8902>; retf
0x421850: mov dl,[rsi-0x1]; mov [rdi-0x1],dl; ret
0x408549: fcomp [rbx+0x5d]; pop r12; pop r13; ret
0x421eef: jg 0x421f38 <__memcpy_ssse3+9016>; retf
0x43b7a0: mov [rax],0x16; mov eax,0xffffffff; ret
0x4330ba: and al,[rsp+riz*8-0xb7f68c]; ret 0xc148
0x427742: rex.RXB or al,0xf3; movq [rdi],mm1; ret
0x407cc9: rol [rax],1; add [rax],al; pop rbx; ret
0x4619ac: rcr [rbx+0x5d],1; pop r12; pop r13; ret
0x43a43d: lock jmp rax; xor eax,eax; pop rbx; ret
0x436618: movq [rdi],mm0; mov [rdi+0x10],ecx; ret
0x477fac: add [rdi+0x2],dh; sbb eax,eax; repz ret
0x415bd6: add [rax],al; mov eax,0xc; pop rbx; ret
0x421c18: mov [rdi-0x3],dx; mov [rdi-0x2],cx; ret
0x42177a: jg 0x4217c3 <__memcpy_ssse3+7107>; iret
0x472d0c: in al,dx; or al,ch; rex.WRB retf 0xffff
0x421704: jg 0x421755 <__memcpy_ssse3+6997>; iret
0x41f668: test [rsi],esp; add eax,0xc0310000; ret
0x4247f9: jg 0x42484a <__memmove_ssse3+8826>; ret
0x41d78c: xor bl,al; xchg ax,ax; xor eax,eax; ret
0x44a3a1: mov eax,0xffffffe0; add rax,fs:0x0; ret
0x46a1ea: mov [rsi],rdi; mov rax,r8; pop rbx; ret
0x455fb2: add rsp,0x80; mov eax,edx; pop rbx; ret
0x436689: movq [rdi],mm0; mov [rdi+0x10],rcx; ret
0x4776e8: rcr [rbx+0x5d],0xc3; nop [rax+0x0]; ret
0x46c76a: add ecx,[rbp-0x77]; dec [rax-0x7d]; ret
0x472d18: add rsp,0x8; movzx eax,al; neg eax; ret
0x40fc52: or [rax-0x77],cl; fcomp [rbx+0x5d]; ret
0x455fb3: add esp,0x80; mov eax,edx; pop rbx; ret
0x4157d0: je 0x41575b <mallinfo+251>; retf 0x4c89
0x40bb35: add [rax-0x77],cl; call 0x5c821898; ret
0x48f77a: int 0x4d; push rax; and ebx,[rbx]; iret
0x42487f: jg 0x4248c8 <__memmove_ssse3+8952>; ret
0x43d9a7: xor eax,eax; cmp rdx,rdi; setae al; ret
0x460d9c: ror [rax+0x29],1; clc; shr rax,0x2; ret
0x418181: movzx edx,[rdx+rcx*1]; sub eax,edx; ret
0x40d344: push rdi; rex.W; mov [rdi+0x8],rax; ret
0x40ee58: rol [rbx-0x6af00002],0xc0; neg eax; ret
0x40eae8: jmp 0x1f50eaec; add [rax],r8b; repz ret
0x405158: add [rax-0x9],ecx; ror [rax+0x1],1; ret
0x46a2a1: cmove eax,eax; mov rax,r8; pop rbx; ret
0x46b6af: add [rax-0x7d],cl; call 0x7cd1feb8; ret
0x43ee93: pop rdx; add es:[rbp-0xcf98b40],al; ret
0x46fe98: and eax,[rax]; add [rdx+rax*2],0x1; ret
0x491840: mov dl,0x9f; sub edi,esi; int 0x6b; ret
0x41dbeb: shl [rax+0x48],0x1; clc; vzeroupper; ret
0x45e0cb: mov [rbx],ecx; xor eax,eax; pop rbx; ret
0x439265: add esi,ebx; movs es:[rdi],ds:[rsi]; ret
0x4216cb: mov [rdi-0x9],r8; mov [rdi-0x4],edx; ret
0x400d2f: sub al,[rax]; add rsp,0x88; pop rbx; ret
0x4094e4: add cl,[rax+0xf]; scas eax,es:[rdi]; ret
0x40ed07: nop cs:[rax+rax*1+0x0]; mov rax,rdi; ret
0x436057: mov [rdx+0x4],al; lea rax,[rdx+0x4]; ret
0x47a5e8: jmp 0x414960 <free>; nop [rax]; repz ret
0x43b113: sub [rcx],esi; add es:[rax+0x39],cl; ret
0x416994: adc eax,0xe7b7; cmovne rax,rdx; repz ret
0x40f983: or [rax-0x75],cl; adc [rcx-0x7d],al; ret
0x415bb0: mov [rbx],eax; xor eax,eax; pop rbx; ret
0x4240d4: jg 0x424125 <__memmove_ssse3+6997>; iret
0x40c03e: scas eax,es:[rdi]; nop; xor eax,eax; ret
0x477a01: clc; mov rbp,[rbp+0x0]; mov rsp,rcx; ret
0x438efd: xchg edx,eax; ror [rdi],0x94; ret 0xc085
0x421a31: mov edx,[rsi-0x2]; mov [rdi-0x2],dx; ret
0x4217c7: mov [rdi-0x9],rcx; mov [rdi-0x1],dl; ret
0x4913a9: jnp 0x4913f4 <__tens+10356>; retf 0x99e0
0x415e6c: mov [rdx],ebx; mov rax,r10; pop rbx; ret
0x46dfbf: add [rbp+0xf],cl; lods eax,ds:[rsi]; ret
0x491f86: ficomp [rdx-0x19]; cmc; mov ch,0xab; ret
0x415cb0: adc eax,0x25cb; cmovne rax,rdx; repz ret
0x43ee7f: add [rax-0x73],cl; add eax,0x263479; ret
0x427ac2: rex.RXB add al,0xf3; movq [rdi],mm1; ret
0x403113: cmp eax,0x29de5f; add [rax-0x77],cl; ret
0x436b16: mov [rdi+0x2],dh; lea rax,[rdi+0x2]; ret
0x414465: ror [rax-0x77],cl; rcr [rbx+0x5d],1; ret
0x40f60c: add [rax-0x77],cl; add eax,0x2921cc; ret
0x4330bc: in al,0x74; or [rax-0x1],ecx; ret 0xc148
0x447cff: add [rax-0x75],cl; add eax,0x25c171; ret
0x44cc72: add [rbp-0x7b],eax; in al,0xf; lahf; ret
0x43a53c: adc [rax],al; add [rax],al; pop rbx; ret
0x4602ff: add [rcx+rcx*4-0x40],cl; vzeroupper; ret
0x438d67: nop cs:[rax+rax*1+0x0]; xor eax,eax; ret
0x4620d9: mov es,WORD [rbx]; add al,0x11; repz ret
0x415e6b: mov [rdx],rbx; mov rax,r10; pop rbx; ret
0x4610c7: nop cs:[rax+rax*1+0x0]; mov rax,0x1; ret
0x40e052: mov esp,0x8c48348; pop rbx; pop rbp; ret
0x400b5b: add [rax],al; add [rax],al; pop rbp; ret
0x40a900: add [rcx+0x5c],al; pop r13; pop r14; ret
0x400a79: sub [rdx],ch; add [rcx],al; pop rbp; ret
0x41e2ca: adc al,0xe; sub eax,edx; vzeroupper; ret
0x460624: add [rax-0x77],cl; fucomip st,st(0); ret
0x4774c8: je 0x4774a5 <_Unwind_GetGR+21>; repz ret
0x415dba: adc eax,0x4f71; cmovne rax,rdx; repz ret
0x478f47: rex.R and al,0x10; or [rax-0x7d],cl; ret
0x475115: movups XMMWORD [rsp-0x28],xmm0; repz ret
0x4572d0: dec [rax-0x7d]; clc; dec [rax-0x77]; ret
0x438e0a: inc eax; add rsp,0x100; sub rax,rdx; ret
0x414435: sbb [rax-0x77],cl; rcr [rbx+0x5d],1; ret
0x4217c8: mov [rdi-0x9],ecx; mov [rdi-0x1],dl; ret
0x45617d: enter 0x5d5b,0x41; pop rsp; pop r13; ret
0x436ec7: nop cs:[rax+rax*1+0x0]; xor rax,rax; ret
0x4757be: add [rax-0x77],cl; fucomip st,st(1); ret
0x415bd5: add [rax],r8b; mov eax,0xc; pop rbx; ret
0x487903: add [rbp-0x3ffffff1],bh; sldt [rax]; ret
0x416b7a: adc bh,[rbx+0xf480001]; rex.R ret 0x66c3
0x41e334: mov cl,[rsi+rdx*1-0x1]; sub eax,ecx; ret
0x43a476: mov edx,0x0; cmove rax,rdx; pop rbx; ret
0x421c19: mov [rdi-0x3],edx; mov [rdi-0x2],cx; ret
0x44ac25: sti; dec [rbp-0x7b]; dec [rax-0x77]; ret
0x47a446: loope 0x47a4a3 <free_derivation+83>; ret
0x436029: mov [rdx+0x2],al; lea rax,[rdx+0x2]; ret
0x436068: mov [rdx+0x4],ax; lea rax,[rdx+0x5]; ret
0x46c2cf: ins es:[rdi],dx; cmp eax,0x89490000; ret
0x49bedd: cmp [rbx+0x3030d07],al; or al,[rcx]; ret
0x47843c: rol bl,0x66; nop; mov rax,[rsi+0x8]; ret
0x461c0e: add [rax],al; mov eax,0x6c; syscall; ret
0x40a647: xor [rcx],al; add [rax],al; pop rbx; ret
0x436b48: mov [rdi+0x4],dx; lea rax,[rdi+0x5]; ret
0x41dbcb: rol [rax+0x48],0x1; clc; vzeroupper; ret
0x436b9a: mov [rdi+0x8],dx; lea rax,[rdi+0x9]; ret
0x43a4be: add [rax],al; movzx eax,cl; pop rbx; ret
0x42414a: jg 0x424193 <__memmove_ssse3+7107>; iret
0x46f4b6: add [rax-0x77],cl; add eax,0x234baa; ret
0x47ab47: add [rax],al; add rsp,0x10; pop rbx; ret
0x4614b3: mov rax,r8; shr rax,0x2; vzeroupper; ret
0x424845: jg 0x424896 <__memmove_ssse3+8902>; retf
0x40ea80: mov [rdx+0x8],eax; xor eax,eax; repz ret
0x48ef01: gs mov ch,0x31; mov ah,bl; push rsi; ret
0x406216: cmp [rbx+0x5d],bl; pop r12; pop r13; ret
0x461bfe: add [rax],al; mov eax,0x68; syscall; ret
0x4388a7: rex.RX push [rbp+0x1a]; xor eax,eax; ret
0x46777d: push rax; std; inc [rbp+0x5b0e78c0]; ret
0x40ea7f: mov [rdx+0x8],rax; xor eax,eax; repz ret
0x4610a7: nop cs:[rax+rax*1+0x0]; add rax,0x3; ret
0x46b3cc: movs es:[rdi],ds:[rsi]; xor eax,eax; ret
0x415baf: mov [rbx],rax; xor eax,eax; pop rbx; ret
0x43ed2c: sbb [rbx+0x5d],bl; pop r12; pop r13; ret
0x4580d6: dec [rdi]; test [rcx-0x7c000015],al; ret
0x461bde: add [rax],al; mov eax,0x66; syscall; ret
0x43a543: xor [rax],al; add [rax],al; pop rbx; ret
0x416ad4: adc eax,0xe697; cmovne rax,rdx; repz ret
0x426d7a: lock movdqu XMMWORD [rdi-0x10],xmm0; ret
0x40ecdf: add [rax-0x75],cl; add eax,0x292439; ret
0x40961c: add [rax],al; add [rax],al; pop rbx; ret
0x4063a4: adc [rcx],al; add [rax],al; pop rbx; ret
0x438e09: inc rax; add rsp,0x100; sub rax,rdx; ret
0x4248bf: jg 0x424908 <__memmove_ssse3+9016>; retf
0x43df03: in al,0x80; cli; cmp eax,0x83491774; ret
0x461bee: add [rax],al; mov eax,0x6b; syscall; ret
0x40f5dc: add [rax-0x77],cl; add eax,0x292204; ret
0x43a54a: and [rax],al; add [rax],al; pop rbx; ret
0x46ffdb: add [rbx+0x5d],bl; pop r12; pop r13; ret
0x4009c9: add ah,dh; nop [rax+rax*1+0x0]; repz ret
0x4403ef: add [rax-0x75],cl; add eax,0x264531; ret
0x400d34: mov [rax],al; add [rax],al; pop rbx; ret
0x436c1b: mov [rdi+0x6],edx; lea rax,[rdi+0xd]; ret
0x40ddb7: or [rax],al; add [rax],al; add bl,dh; ret
0x421c6c: mov [rdi-0xc],ecx; mov [rdi-0x4],edx; ret
0x43613a: mov [rdx+0x6],rax; lea rax,[rdx+0xd]; ret
0x432b48: add eax,ecx; add rax,rdi; vzeroupper; ret
0x43a1d2: sub al,0x72; add cl,[rax+0x77f8c50f]; ret
0x42189b: mov [rdi-0xa],rcx; mov [rdi-0x4],edx; ret
0x40d785: je 0x40d790 <_IO_doallocbuf+16>; repz ret
0x4726bb: fnstcw [rax+0x489066ff]; add esp,0x8; ret
0x432b47: add rax,rcx; add rax,rdi; vzeroupper; ret
0x460e8f: add [rax],al; add bl,al; mov eax,0x2; ret
0x427892: rex.RXB or r11d,r14d; movq [rdi],mm1; ret
0x43484f: add [rdx+0x48028801],cl; mov eax,edi; ret
0x427759: push rdi; add al,0x48; mov [rdi],ecx; ret
0x426e99: mov [rdi-0xe],edx; mov [rdi-0x8],rcx; ret
0x436c1a: mov [rdi+0x6],rdx; lea rax,[rdi+0xd]; ret
0x421ff6: mov [rdi-0x5],edx; mov [rdi-0x4],ecx; ret
0x43615b: mov [rdx+0x7],eax; lea rax,[rdx+0xe]; ret
0x436c3a: mov [rdi+0x7],rdx; lea rax,[rdi+0xe]; ret
0x427137: mov [rdi-0x9],rdx; mov [rdi-0x4],ecx; ret
0x432ead: add eax,ecx; sub rax,rdx; vzeroupper; ret
0x4416ef: add [rax+0xf],cl; mov esi,0x83480147; ret
0x406268: jne 0x406243 <__hash_string+19>; repz ret
0x405c43: inc [rbx-0x2f7cfe08]; dec [rax-0x7d]; ret
0x40ed0d: add [rax],al; add [rax-0x77],cl; clc; ret
0x4223f6: mov [rdi-0x7],edx; mov [rdi-0x4],ecx; ret
0x432fbf: rol ch,cl; std; xlat ds:[rbx]; ret 0xc085
0x43a507: add [rax+0xf48f0e5],al; rex.RB ret 0xc35b
0x436119: add eax,0x5428948; lea rax,[rdx+0xc]; ret
0x43606a: rex.X add al,0x48; lea eax,[rdx+0x5]; ret
0x426f2a: push rdi; xrelease mov [rdi-0x8],rcx; ret
0x46f9f8: add [rax],al; mov [rax],rdx; pop rbx; ret
0x42203d: mov [rdi-0xe],ecx; mov [rdi-0x8],rdx; ret
0x43a509: in eax,0xf0; cmovne rax,rdx; pop rbx; ret
0x447b47: or [rcx],dh; ror [rcx+0x1e3d8bc5],cl; ret
0x45fea5: lea eax,[rdi+rax*1-0x20]; vzeroupper; ret
0x4019a4: xor ecx,[rax-0x77]; fucomip st,st(0); ret
0x416a10: adc eax,0x1df4b; cmovne rax,rdx; repz ret
0x436099: mov [rdx+0x5],eax; lea rax,[rdx+0x8]; ret
0x432f64: add rax,rdi; sub rax,rdx; vzeroupper; ret
0x4602fe: add [rax],al; mov rax,r8; vzeroupper; ret
0x435feb: mov [rdx+0x8],eax; lea rax,[rdx+0xf]; ret
0x42223c: mov [rdi-0xf],rcx; mov [rdi-0x8],rdx; ret
0x43ac84: gs call 0x419fede5; pop rbp; pop rbp; ret
0x436bb9: mov [rdi+0x7],edx; lea rax,[rdi+0xa]; ret
0x439212: movups XMMWORD [rdi+rdx*1-0x10],xmm1; ret
0x43613b: mov [rdx+0x6],eax; lea rax,[rdx+0xd]; ret
0x461190: sub eax,edx; shr rax,0x2; vzeroupper; ret
0x40d74c: mov [rbx],eax; add rsp,0x20; pop rbx; ret
0x421680: mov rdx,[rsi-0x8]; mov [rdi-0x8],rdx; ret
0x432fcb: fcmovnb st,st(5); std; xlat ds:[rbx]; ret
0x4168ed: add al,ss:[rax]; cmovne rax,rdx; repz ret
0x426f29: mov [rdi-0xd],edx; mov [rdi-0x8],rcx; ret
0x41dc11: bsf eax,eax; add rax,rdi; vzeroupper; ret
0x43905b: cli; add [rdx+0x2],esi; mov [rdi],cl; ret
0x41da23: add eax,edi; add rax,rcx; vzeroupper; ret
0x42189c: mov [rdi-0xa],ecx; mov [rdi-0x4],edx; ret
0x43615a: mov [rdx+0x7],rax; lea rax,[rdx+0xe]; ret
0x426e08: mov [rdi-0xf],rdx; mov [rdi-0x8],rcx; ret
0x402833: and al,0x80; add [rax],al; add al,ch; ret
0x41fbc7: inc [rax]; add [rax],al; sub eax,ecx; ret
0x4162df: add [rcx+rcx*8-0x7cb7de8c],al; ret 0x4801
0x427138: mov [rdi-0x9],edx; mov [rdi-0x4],ecx; ret
0x43611a: mov [rdx+0x5],rax; lea rax,[rdx+0xc]; ret
0x46b41f: push rbx; adc [rbx+0x5d],bl; pop r12; ret
0x416834: adc eax,0x11407; cmovne rax,rdx; repz ret
0x421e3d: mov [rdi-0xd],ecx; mov [rdi-0x8],rdx; ret
0x47529c: rol bl,0x66; nop; mov rax,[rsi+0xb8]; ret
0x40ecc4: inc ebx; nop cs:[rax+rax*1+0x0]; repz ret
0x436c3b: mov [rdi+0x7],edx; lea rax,[rdi+0xe]; ret
0x439fed: movdqu XMMWORD [rdi+rdx*1-0x20],xmm0; ret
0x43a479: add [rax],al; cmove rax,rdx; pop rbx; ret
0x421714: mov [rdi-0x9],ecx; mov [rdi-0x4],edx; ret
0x426fb7: mov [rdi-0xc],rdx; mov [rdi-0x4],ecx; ret
0x43a4b9: nop [rax+0x0]; movzx eax,cl; pop rbx; ret
0x40618b: or [rax+rax*8-0x38b79f8c],eax; ret 0xfff0
0x468322: inc [rbp-0xfd8a01]; ror [rax-0x7d],1; ret
0x4277b2: rex.RXB or r14d,r11d; movq [rdi],mm1; ret
0x4360b9: mov [rdx+0x6],eax; lea rax,[rdx+0x9]; ret
0x4270b7: mov [rdi-0xa],rdx; mov [rdi-0x4],ecx; ret
0x421713: mov [rdi-0x9],rcx; mov [rdi-0x4],edx; ret
0x46ad33: add [rax-0x77],ecx; add eax,0x239675; ret
0x415c79: adc eax,0x211d2; cmovne rax,rdx; repz ret
0x4614b4: mov eax,eax; shr rax,0x2; vzeroupper; ret
0x42203c: mov [rdi-0xe],rcx; mov [rdi-0x8],rdx; ret
0x40fa34: mov [rdi+0x10],eax; pop rbx; pop rbp; ret
0x436b67: mov [rdi+0x3],edx; lea rax,[rdi+0x6]; ret
0x43a4ad: cmp edx,0xff; cmove rax,rcx; pop rbx; ret
0x460334: sub ecx,[rcx+rcx*4-0x40]; vzeroupper; ret
0x436bfb: mov [rdi+0x5],edx; lea rax,[rdi+0xc]; ret
0x42223d: mov [rdi-0xf],ecx; mov [rdi-0x8],rdx; ret
0x421681: mov edx,[rsi-0x8]; mov [rdi-0x8],rdx; ret
0x426e09: mov [rdi-0xf],edx; mov [rdi-0x8],rcx; ret
0x41da22: add rax,rdi; add rax,rcx; vzeroupper; ret
0x42a8bc: clc; mov [rdi],rsi; mov [r9-0x8],rcx; ret
0x439399: movups XMMWORD [rdi+rdx*1-0x20],xmm3; ret
0x43a07a: mov [rdi+rdx*1-0x2],cx; mov [rdi],cx; ret
0x436aed: add [rax],al; add [rax+0x78d4837],cl; ret
0x43611b: mov [rdx+0x5],eax; lea rax,[rdx+0xc]; ret
0x436087: mov [rdx+0x3],eax; lea rax,[rdx+0x6]; ret
0x41f93f: shl [rsi+0xf],1; cmp [rdi],dl; ret 0x830f
0x439314: mov [rdi+rdx*1-0x2],cx; mov [rdi],si; ret
0x436bd9: mov [rdi+0x8],edx; lea rax,[rdi+0xb]; ret
0x45fac5: add [rax+0xf],cl; mov ebp,0xf80148c0; ret
0x44a32f: mov edx,0xffffffe0; mov fs:[rdx],rax; ret
0x4364c7: nop cs:[rax+rax*1+0x0]; mov [rdi],dh; ret
0x432eac: add rax,rcx; sub rax,rdx; vzeroupper; ret
0x4360f9: mov [rdx+0x8],eax; lea rax,[rdx+0xb]; ret
0x436069: mov [rdx+0x4],eax; lea rax,[rdx+0x5]; ret
0x426e98: mov [rdi-0xe],rdx; mov [rdi-0x8],rcx; ret
0x461fff: mov fs:[rax],0xc; mov eax,0xffffffff; ret
0x40ddb2: add [rax],al; mov [rax+0x8],0x0; repz ret
0x409ab4: mov fs:[rax],0x9; mov eax,0xffffffff; ret
0x427902: rex.RXB or r11b,r14b; movq [rdi],mm1; ret
0x427038: mov [rdi-0xb],edx; mov [rdi-0x4],ecx; ret
0x409af7: mov eax,0xffffffff; pop rbx; pop rbp; ret
0x48f24a: cli; xchg [rsp+rax*1+0x6fa9ce9d],esp; ret
0x421e3c: mov [rdi-0xd],rcx; mov [rdi-0x8],rdx; ret
0x432f65: add eax,edi; sub rax,rdx; vzeroupper; ret
0x461bdd: add [rax],r8b; mov eax,0x66; syscall; ret
0x426fb8: mov [rdi-0xc],edx; mov [rdi-0x4],ecx; ret
0x4167a5: adc eax,0x209c6; cmovne rax,rdx; repz ret
0x470152: mov [rbx],rax; add rsp,0x10; pop rbx; ret
0x4783d1: add [rax],al; add [rbp+0x1a],dh; repz ret
0x45e060: add [rax],eax; add [rax],al; pop rbx; ret
0x4620d8: or al,0x8e; add eax,[rcx+rdx*1]; repz ret
0x436b49: mov [rdi+0x4],edx; lea rax,[rdi+0x5]; ret
0x46118f: sub rax,rdx; shr rax,0x2; vzeroupper; ret
0x421e3e: rex.WRXB; xrelease mov [rdi-0x8],rdx; ret
0x421a7b: mov [rdi-0xb],rcx; mov [rdi-0x4],edx; ret
0x40a908: nop [rax+rax*1+0x0]; movzx eax,[rdx]; ret
0x43b789: mov fs:[rdx],eax; mov eax,0xffffffff; ret
0x43a508: and ch,0xf0; cmovne rax,rdx; pop rbx; ret
0x4004ca: cli; or ebp,[rdx]; add [rsi-0x70],ah; ret
0x45414e: sbb [rsi+0xf],esp; outs dx,ds:[rsi]; retf
0x470153: mov [rbx],eax; add rsp,0x10; pop rbx; ret
0x439273: std; rep movs es:[rdi],ds:[rsi]; cld; ret
0x435fea: mov [rdx+0x8],rax; lea rax,[rdx+0xf]; ret
0x4599d8: enter 0xc148,0xf8; add cl,[rcx+0x29]; ret
0x427822: rex.RXB or r14b,r11b; movq [rdi],mm1; ret
0x41e3aa: rol ebp,1; stc; xlat ds:[rbx]; ret 0xff2d
0x436b9b: mov [rdi+0x8],edx; lea rax,[rdi+0x9]; ret
0x426f28: mov [rdi-0xd],rdx; mov [rdi-0x8],rcx; ret
0x41342a: or al,0x0; add [rax],al; xor eax,eax; ret
0x421df0: mov edx,[rsi-0x4]; mov [rdi-0x4],edx; ret
0x41026e: scas al,es:[rdi]; adc eax,0x39480029; ret
0x45e759: nop; mov [rax],rdx; xor eax,eax; repz ret
0x4168eb: add eax,0x23660; cmovne rax,rdx; repz ret
0x4654d5: and al,0x80; add [rax],al; add cl,ch; ret
0x415ce0: adc eax,0x1d4cb; cmovne rax,rdx; repz ret
0x4270b8: mov [rdi-0xa],edx; mov [rdi-0x4],ecx; ret
0x43a4b1: add [rax],al; cmove rax,rcx; pop rbx; ret
0x434908: rex.B add eax,0x5428948; mov rax,rdi; ret
0x421c6b: mov [rdi-0xc],rcx; mov [rdi-0x4],edx; ret
0x436bfa: mov [rdi+0x5],rdx; lea rax,[rdi+0xc]; ret
0x421a7c: mov [rdi-0xb],ecx; mov [rdi-0x4],edx; ret
0x436058: rex.X add al,0x48; lea eax,[rdx+0x4]; ret
0x4360d9: mov [rdx+0x7],eax; lea rax,[rdx+0xa]; ret
0x4221f6: mov [rdi-0x6],edx; mov [rdi-0x4],ecx; ret
0x416a59: add [rax+0xf4802e5],al; rex.RB ret 0xc3f3
0x42a8ce: cld; mov [rdi],esi; mov [r9-0x4],ecx; ret
0x4216cc: mov [rdi-0x9],eax; mov [rdi-0x4],edx; ret
0x47aaeb: jne 0x47aaf0 <free_slotinfo+16>; repz ret
0x45fea4: lea rax,[rdi+rax*1-0x20]; vzeroupper; ret
0x4774c5: add [rax],al; add [rbx+rbx*8-0xd],dh; ret
0x442c83: add [rax],al; add [rax+0xf],cl; rex.R ret
0x427037: mov [rdi-0xb],rdx; mov [rdi-0x4],ecx; ret
0x439376: movups XMMWORD [rdi+rdx*1-0x40],xmm7; ret
0x415bb7: nop cs:[rax+rax*1+0x0]; mov eax,0x16; ret
0x47ab43: mov [rbx],0x0; add rsp,0x10; pop rbx; ret
0x436596: add eax,0x480f8948; mov [rdi+0x5],edx; ret
0x46d889: ror ebx,cl; std; inc [rbp-0x76b08a40]; ret
0x43650f: add [rbx+0x477880e],cl; mov [rdi],ecx; ret
0x41f163: sub al,0xa; add [rax],al; xor eax,eax; ret
0x41dea6: sar rdx,cl; movzx edx,dl; sub eax,edx; ret
0x40d313: mov [rdi+0x18],eax; mov [rdi+0x8],rax; ret
0x436c9b: mov [rdi+0xf],ecx; lea rax,[rdi+0x12]; ret
0x427ba2: rex.RXB add r14b,r11b; movq [rdi],mm1; ret
0x41f897: add al,0x3; add [rax],al; xor eax,eax; ret
0x436c7c: mov [rdi+0x10],cx; lea rax,[rdi+0x11]; ret
0x48ffa3: sar ecx,1; jnp 0x48ff60 <__tens+5088>; ret
0x436d60: mov [rdi+0x18],dh; lea rax,[rdi+0x18]; ret
0x43880e: mov bl,0x0; add [rax],al; xor eax,eax; ret
0x436cde: mov [rdi+0x14],dh; lea rax,[rdi+0x14]; ret
0x459a15: mov ebp,0xfffffae8; add [rcx-0x77],al; ret
0x436cfc: mov [rdi+0xe],rcx; lea rax,[rdi+0x15]; ret
0x43dbc1: mov [rax+0x10],ecx; mov [rax+0x8],rdx; ret
0x455155: add ch,[rbx]; add [rax],al; add cl,ch; ret
0x40551d: or bl,[rbx+0x31]; rcr [rbp+0x41],0x5c; ret
0x40a445: sub [rax],eax; add [rdx+rax*1-0xd],dh; ret
0x43a48a: shr eax,0xe; and eax,0x3fc00; pop rbx; ret
0x45fd82: fld st(5); std; xlat ds:[rbx]; retf 0xfdc5
0x407a64: popf; add [rax],al; add [rax-0x7d],cl; ret
0x46211c: nop; add [rax],eax; add [rax-0x77],cl; ret
0x432e52: bsf edx,edx; add rax,rdx; sub rax,rdi; ret
0x4383d3: hlt; movzx edx,[rsi-0xc]; sub eax,edx; ret
0x46d638: and eax,[rax]; mov [rax],rdx; pop rbx; ret
0x41dbca: add eax,0x40; add rax,rdi; vzeroupper; ret
0x41dbfe: add [rax],al; vzeroupper; xor eax,eax; ret
0x446ba1: add [rsi+0x41],ah; cmp ecx,0x860f07ff; ret
0x436c68: mov [rdi+0x10],dh; lea rax,[rdi+0x10]; ret
0x46107a: adc eax,0xe180d188; pcmpeqb mm3,[rsi]; ret
0x40c02c: rcr [rbx+0x5d],0x41; pop rsp; pop r13; ret
0x40d343: mov [rdi+0x48],edx; mov [rdi+0x8],rax; ret
0x436d1c: mov [rdi+0xf],rcx; lea rax,[rdi+0x16]; ret
0x41dc25: add eax,0x20; add rax,rdi; vzeroupper; ret
0x46d9ea: sbb eax,eax; and eax,0x2; sub eax,0x1; ret
0x40de95: mov [rcx+0x130],r8; mov [r9+0xa8],0x0; ret
0x439375: ror [rdi],1; adc [rdi+rdx*1-0x40],edi; ret
0x41dc24: add rax,0x20; add rax,rdi; vzeroupper; ret
0x427c12: rex.RXB add r11d,r14d; movq [rdi],mm1; ret
0x49bf49: add eax,[rdx]; movs es:[rdi],ds:[rsi]; ret
0x427540: movzx edx,[rsi-0x1]; mov [rdi-0x1],dl; ret
0x436d84: mov [rdi+0x18],cx; lea rax,[rdi+0x19]; ret
0x475280: xor [rbp+0x35],dh; mov rax,[rsi+0xb0]; ret
0x436098: add eax,0x48054289; lea eax,[rdx+0x8]; ret
0x41dbea: add eax,0x60; add rax,rdi; vzeroupper; ret
0x400a01: jmp rax; nop [rax+rax*1+0x0]; pop rbp; ret
0x405a5b: mov esp,0x24448b48; sub [rax-0x7d],cl; ret
0x455e2c: fldpi; stos es:[rdi],eax; mov eax,0x1; ret
0x4141ca: cwde; add al,[rax]; add rsp,0x80; repz ret
0x4397e6: rex.B movabs al,ds:0x77f8c5237f7ec1c4; ret
0x462391: leave; jne 0x46237d <is_dst+173>; repz ret
0x4366ac: mov [rdi+0x10],rcx; mov [rdi+0x18],dh; ret
0x4479b2: add al,0x72; adc ecx,[rcx+0x29d231fb]; ret
0x40d342: mov [rdi+0x48],rdx; mov [rdi+0x8],rax; ret
0x43965c: vmovdqu XMMWORD [rdi+rdx*1-0x10],xmm1; ret
0x437087: nop cs:[rax+rax*1+0x0]; lea rax,[rdi]; ret
0x40edbf: sbb eax,0x480002ec; add esp,0x80; repz ret
0x45610e: stc; or [rsi-0x2f],esi; mov [rdi],rsi; ret
0x40f5a7: add [rcx],al; add [rax],al; add bl,dh; ret
0x421552: mov [rdi-0x10],r11; mov [rdi-0x8],rdx; ret
0x477437: add [rdx+riz*8+0x48],dh; add esp,0x18; ret
0x43a07b: mov [rdi+rdx*1-0x2],ecx; mov [rdi],cx; ret
0x47841e: xor [rbp+0x27],dh; mov rax,[rsi+0x10]; ret
0x421553: mov [rdi-0x10],ebx; mov [rdi-0x8],rdx; ret
0x40f848: nop [rax+rax*1+0x0]; xor eax,eax; repz ret
0x45dfec: je 0x45dff0 <_IO_wdoallocbuf+16>; repz ret
0x41dea7: sar edx,cl; movzx edx,dl; sub eax,edx; ret
0x4279f2: add cl,[rbx+0x257890e]; mov [rdi],ecx; ret
0x43b79f: mov fs:[rax],0x16; mov eax,0xffffffff; ret
0x460d9a: add rax,rdx; sub rax,rdi; shr rax,0x2; ret
0x472a3a: add bl,al; nop [rax+0x0]; xor eax,eax; ret
0x432e51: bsf rdx,rdx; add rax,rdx; sub rax,rdi; ret
0x40ed77: add [rbx+0x294f9505],al; add [rcx],al; ret
0x421514: mov [rdi-0x10],r11; mov [rdi-0x8],rcx; ret
0x462320: leave; jne 0x462370 <is_dst+160>; repz ret
0x46fe95: adc eax,0x2342de; add [rdx+rax*2],0x1; ret
0x40eccb: add [rax],al; add [rax],al; add bl,dh; ret
0x44dd6a: rex.X add al,[rax]; add [rax+0x63],cl; ret
0x41d730: bsf eax,eax; lea rax,[rax+rdi*1+0x10]; ret
0x41d710: bsf eax,eax; lea rax,[rax+rdi*1-0x10]; ret
0x41f666: ror [rdi],0x85; es add eax,0xc0310000; ret
0x4366d0: mov [rdi+0x10],rdx; mov [rdi+0x18],cx; ret
0x41db4a: add [rax],al; xor eax,eax; vzeroupper; ret
0x421515: mov [rdi-0x10],ebx; mov [rdi-0x8],rcx; ret
0x45ffcd: test [rsi+0x48000000],bl; bsf eax,edx; ret
0x46f749: mov bl,0x8; mov ecx,0x1f0fff; pop rbx; ret
0x4366ad: mov [rdi+0x10],ecx; mov [rdi+0x18],dh; ret
0x427b32: rex.RXB add r14d,r11d; movq [rdi],mm1; ret
0x4383c3: repz movzx edx,[rsi-0xd]; sub eax,edx; ret
0x4740ca: jne 0x473ff1 <call_init.part+33>; repz ret
0x40fb02: sub eax,0x1; mov [rdi+0x880],rax; repz ret
0x45f983: rcr [rbp+0x41],0x5c; pop r13; pop r14; ret
0x460d9b: add eax,edx; sub rax,rdi; shr rax,0x2; ret
0x41db80: rol [rbp+0x311b75c0],0xc0; vzeroupper; ret
0x40ddae: mov [rax],0x0; mov [rax+0x8],0x0; repz ret
0x499ec1: add [rax],al; add [rax+0x7800005f],cl; ret
0x472dc7: fdiv [rbp+0xa]; add rsp,0x30; pop rbx; ret
0x4348c7: rex.B add eax,0x48054289; mov eax,edi; ret
0x41f4e6: mov ch,0x6; add [rax],al; xor eax,eax; ret
0x46eeb1: jne 0x46eeee <__mpn_mul_n+142>; leave; ret
0x40ee59: cmp esi,0xffffffff; setne al; neg eax; ret
0x41d7fa: bsf eax,eax; add rax,rdi; add rax,rcx; ret
0x416b00: int3; add al,cs:[rax]; cmovne rax,rdx; ret
0x439315: mov [rdi+rdx*1-0x2],ecx; mov [rdi],si; ret
0x436cfd: mov [rdi+0xe],ecx; lea rax,[rdi+0x15]; ret
0x41d66f: bsf eax,eax; lea rax,[rdi+rax*1+0x30]; ret
0x44037f: add [rax-0x75],cl; cmp ecx,[rax-0x7d]; ret
0x40d3c5: ror [rax-0x7d],0xc4; or [rbx+0x5d],bl; ret
0x4366d1: mov [rdi+0x10],edx; mov [rdi+0x18],cx; ret
0x43ba6a: ja 0x43ba70 <__read_nocancel+16>; repz ret
0x436d1d: mov [rdi+0xf],ecx; lea rax,[rdi+0x16]; ret
0x43662b: mov [rdi+0x10],ecx; mov [rdi+0x14],dh; ret
0x41dbc9: add rax,0x40; add rax,rdi; vzeroupper; ret
0x41d740: bsf eax,eax; lea rax,[rax+rdi*1+0x20]; ret
0x43d898: add [rax],al; add [rbp-0x3dbbf040],al; ret
0x40fb01: sub rax,0x1; mov [rdi+0x880],rax; repz ret
0x477420: add [rbp+rbx*1+0x48],dh; add esp,0x18; ret
0x41dbe9: add rax,0x60; add rax,rdi; vzeroupper; ret
0x43dbc0: mov [rax+0x10],rcx; mov [rax+0x8],rdx; ret
0x40fa71: mov [rdi+0x8],0x0; mov [rdi+0x60],rcx; ret
0x4604f7: popf; std; dec [rax+0xf]; rex.R ret 0x90c3
0x4383e3: cmc; movzx edx,[rsi-0xb]; sub eax,edx; ret
0x40d312: mov [rdi+0x18],rax; mov [rdi+0x8],rax; ret
0x496734: nop; add [rsi+rcx*1+0x10],ecx; rex.RXB ret
0x46109a: add al,bl; nop [rax+0x0]; add rax,0x1; ret
0x43670f: mov [rdi+0x10],rdx; mov [rdi+0x18],ecx; ret
0x49bf34: rex.R add [rdi],0x48; or eax,0x1370303; ret
0x42759c: jg 0x4275a5 <__memcpy_ssse3_back+9269>; ret
0x437138: nop [rax+rax*1+0x0]; lea rax,[rdi+0xc]; ret
0x436d85: mov [rdi+0x18],ecx; lea rax,[rdi+0x19]; ret
0x43ee92: jp 0x43eeee; add es:[rbp-0xcf98b40],al; ret
0x45daf9: mov [rax+0x10],edx; mov [rax+0x40],rcx; ret
0x43bb3d: ja 0x43bb48 <__write_nocancel+24>; repz ret
0x42ad14: stc; vmovups ZMMWORD [rdi-0x200],zmm15; ret
0x4326d2: or eax,0x48c0bc0f; lea eax,[rdi+rax*1]; ret
0x439034: vmovq [rdi],xmm0; vmovq [rsi-0x8],xmm0; ret
0x426eef: jg 0x426f38 <__memcpy_ssse3_back+7624>; ret
0x4370b8: nop [rax+rax*1+0x0]; lea rax,[rdi+0x3]; ret
0x43a06b: mov [rdi+rdx*1-0x8],ecx; mov [rdi],rcx; ret
0x4366ef: mov [rdi+0x10],rdx; mov [rdi+0x17],ecx; ret
0x437158: nop [rax+rax*1+0x0]; lea rax,[rdi+0xe]; ret
0x46f4ba: stos es:[rdi],al; rex.WXB and rax,[r8]; ret
0x47a445: jne 0x47a428 <buffer_free+24>; pop rbx; ret
0x436da3: mov [rdi+0x17],ecx; lea rax,[rdi+0x1a]; ret
0x40a90d: add [rax],al; add [rdi],cl; mov dh,0x2; ret
0x40829b: add [rax],al; mov [rcx+0x130],rdx; repz ret
0x45e811: mov eax,[rdi+0x48]; mov eax,[rax+0x4c]; ret
0x4397e8: vmovdqu YMMWORD [r11],ymm4; vzeroupper; ret
0x40de96: mov [rcx+0x130],eax; mov [r9+0xa8],0x0; ret
0x4743bb: leave; add eax,[rax]; add [rax+0x1],cl; ret
0x4275f6: jg 0x427607 <__memcpy_ssse3_back+9367>; ret
0x45db38: mov [rax+0x10],rsi; mov [rax+0x40],rcx; ret
0x457644: ror [rax-0x3f],0xf8; add al,[rcx+0x29]; ret
0x448627: add [rax],al; add [rax-0x3f],cl; ret 0x4811
0x46d0e8: nop [rax+rax*1+0x0]; mov rax,[rax+0x8]; ret
0x4277b6: jg 0x4277c7 <__memcpy_ssse3_back+9815>; ret
0x467212: add [rax],al; mov [rdi+0x300],rax; repz ret
0x40caa1: ror [rax-0x7d],0xc4; sbb [rbx+0x5d],bl; ret
0x43a073: mov [rdi+rdx*1-0x4],ecx; mov [rdi],ecx; ret
0x4370f8: nop [rax+rax*1+0x0]; lea rax,[rdi+0x8]; ret
0x49becc: rex.R add [rdi],0x48; or eax,0x34b0303; ret
0x479904: sub [rdx-0x3f7affde],0x74; add al,0xf3; ret
0x4366f0: mov [rdi+0x10],edx; mov [rdi+0x17],ecx; ret
0x44b1b7: add [rax],al; xor eax,eax; add rsp,0x8; ret
0x436dde: movq [rdi+0xd],mm2; lea rax,[rdi+0x1c]; ret
0x41e3b4: jne 0x41e2c0 <__memcmp_avx2_movbe+272>; ret
0x41d71e: add [rax],al; bsf eax,eax; add rax,rdi; ret
0x439305: mov [rdi+rdx*1-0x4],ecx; mov [rdi],esi; ret
0x49a5df: or cl,[rsi]; or [rdi+0xb],al; push rsp; ret
0x44b1b2: add rsp,0x80; xor eax,eax; add rsp,0x8; ret
0x436cbb: mov [rdi+0x10],ecx; lea rax,[rdi+0x13]; ret
0x4276d6: jg 0x4276e7 <__memcpy_ssse3_back+9591>; ret
0x461ec0: or [rdi],cl; mov dh,0xc0; add rsp,0x58; ret
0x4370c8: nop [rax+rax*1+0x0]; lea rax,[rdi+0x4]; ret
0x4370e8: nop [rax+rax*1+0x0]; lea rax,[rdi+0x6]; ret
0x436710: mov [rdi+0x10],edx; mov [rdi+0x18],ecx; ret
0x437098: nop [rax+rax*1+0x0]; lea rax,[rdi+0x1]; ret
0x427a62: add [rbx+0x157890e],ecx; mov [rdi],ecx; ret
0x43a0d2: vmovdqu YMMWORD [rdi],ymm0; vzeroupper; ret
0x460c84: add [rax],al; bsf rax,rdx; shr rax,0x2; ret
0x45ef10: add al,0x0; add [rbx+0x5d],bl; pop r12; ret
0x415bc4: add bl,al; nop cs:[rax+rax*1+0x0]; repz ret
0x490121: cmp eax,0x7170d773; mov ebp,0xfb67d10d; ret
0x43dc0f: mov [rdi+0x20],edx; mov [rdi+0x28],0x1; ret
0x46eeae: add [rax],al; add [rbp+0x3b],dh; leave; ret
0x411037: add [rbx+0x31],bl; rcr [rbp+0x41],0x5c; ret
0x437108: nop [rax+rax*1+0x0]; lea rax,[rdi+0x9]; ret
0x43dc0e: mov [rdi+0x20],rdx; mov [rdi+0x28],0x1; ret
0x4126d2: add [rax],al; add [rax+0xf],cl; rex.RXB ret
0x4389bd: add [rax],al; add [rax-0x7d],cl; ret 0x3a01
0x436dc3: mov [rdi+0x18],ecx; lea rax,[rdi+0x1b]; ret
0x43ba2d: add [rax],al; add [rax-0x39],cl; ret 0xffc0
0x427982: add ecx,[rbx+0x357890e]; mov [rdi],ecx; ret
0x436e1e: movq [rdi+0xf],mm2; lea rax,[rdi+0x1e]; ret
0x45e810: mov rax,[rdi+0x48]; mov eax,[rax+0x4c]; ret
0x45daf8: mov [rax+0x10],rdx; mov [rax+0x40],rcx; ret
0x43dbc6: push rax; or bl,al; nop [rax+0x0]; repz ret
0x43a1e1: vmovdqu XMMWORD [rdi],xmm0; vzeroupper; ret
0x4392f7: mov [rdi+rdx*1-0x8],ecx; mov [rdi],rsi; ret
0x461fce: cmp edi,edx; ja 0x461ff8 <brk+72>; repz ret
0x43db59: add [rax],al; nop [rax+rax*1+0x0]; repz ret
0x43bded: ja 0x43bdf8 <__close_nocancel+24>; repz ret
0x49bf00: rex.R add [rdi],0x48; or eax,0x35b0303; ret
0x439f99: cli; rep stos es:[rdi],al; mov rax,rdx; ret
0x437118: nop [rax+rax*1+0x0]; lea rax,[rdi+0xa]; ret
0x427826: jg 0x427837 <__memcpy_ssse3_back+9927>; ret
0x44c6f0: push rsi; sub dh,al; add [rcx-0x7d],cl; ret
0x43e1e1: add [rax],esp; jmp rdx; nop [rax]; repz ret
0x436c7d: mov [rdi+0x10],ecx; lea rax,[rdi+0x11]; ret
0x45db39: mov [rax+0x10],esi; mov [rax+0x40],rcx; ret
0x46f102: or rsi,rax; mov eax,0x1; mov [rdi],rsi; ret
0x435fff: add [rdx+0x48028801],cl; lea eax,[rdx]; ret
0x45610c: xor [rbx-0x2e89f607],al; mov [rdi],rsi; ret
0x46f709: jne 0x46f710 <check_free.isra+32>; repz ret
0x46777c: and [rax-0x3],dl; inc [rbp+0x5b0e78c0]; ret
0x43bc71: jne 0x43bcf6 <fcntl+230>; add rsp,0x68; ret
0x47746d: adc al,0x0; add [rax],al; add rsp,0x18; ret
0x436d3d: mov [rdi+0x10],ecx; lea rax,[rdi+0x17]; ret
0x461fcd: cmp rdi,rdx; ja 0x461ff8 <brk+72>; repz ret
0x46ae78: or [rax-0x7b],cl; push [rbp-0x2e]; repz ret
0x44b1b3: add esp,0x80; xor eax,eax; add rsp,0x8; ret
0x45dafa: push rax; adc [rax-0x77],cl; rex.W; rex ret
0x43a06a: mov [rdi+rdx*1-0x8],rcx; mov [rdi],rcx; ret
0x490288: je 0x49024f <__tens+5839>; xor al,0xd8; ret
0x4392f6: mov [rdi+rdx*1-0x8],rcx; mov [rdi],rsi; ret
0x4753a6: add [rax],al; add [rax+0x39],cl; ret 0x9272
0x41dc10: tzcnt eax,eax; add rax,rdi; vzeroupper; ret
0x40a448: je 0x40a44c <_IO_vtable_check+12>; repz ret
0x4484c7: je 0x4484d0 <do_release_shlib+16>; repz ret
0x4370d8: nop [rax+rax*1+0x0]; lea rax,[rdi+0x5]; ret
0x4155db: rex.RB rol r11d,0x66; nop; xor eax,eax; ret
0x4370a8: nop [rax+rax*1+0x0]; lea rax,[rdi+0x2]; ret
0x40f80c: ror [rax+0x48417411],cl; mov [rsi],ecx; ret
0x427666: jg 0x427677 <__memcpy_ssse3_back+9479>; ret
0x438393: lock movzx edx,[rsi-0x10]; sub eax,edx; ret
0x45fac4: add [rax],al; bsr rax,rax; add rax,rdi; ret
0x437148: nop [rax+rax*1+0x0]; lea rax,[rdi+0xd]; ret
0x437128: nop [rax+rax*1+0x0]; lea rax,[rdi+0xb]; ret
0x46f1de: add al,[rdx]; sar bh,0xff; mov eax,0x1; ret
0x45761d: ror [rax-0x3f],0xf8; add cl,[rax+0x29]; ret
0x46f103: or esi,eax; mov eax,0x1; mov [rdi],rsi; ret
0x400fcd: add bh,bh; push rbx; adc [rax-0x7d],cl; ret
0x41d4f3: add [rax],al; add rax,rdi; add rax,rcx; ret
0x40e9f0: mov eax,[rdi+0x10]; sub eax,[rsi+0x10]; ret
0x43988f: vmovdqu YMMWORD [r11],ymm8; vzeroupper; ret
0x427746: jg 0x427757 <__memcpy_ssse3_back+9703>; ret
0x436d3c: mov [rdi+0x10],rcx; lea rax,[rdi+0x17]; ret
0x472a32: rex.WX sub [rbx-0x26],sil; mov eax,0x1; ret
0x4383b3: repnz movzx edx,[rsi-0xe]; sub eax,edx; ret
0x48e9b9: mov ecx,0xbdbcbbba; mov esi,0xc2c1c0bf; ret
0x401979: add [rax-0x7d],cl; clc; dec [rax-0x77]; ret
0x436dfe: movq [rdi+0xe],mm2; lea rax,[rdi+0x1d]; ret
0x426f99: rex.RXB in al,0xf3; movq [rdi-0x10],mm1; ret
0x432e54: ror [rax+0x1],cl; ror [rax+0x29],1; clc; ret
0x46112c: add [rax],al; add [rax],al; mov rax,0x7; ret
0x46111c: add [rax],al; add [rax],al; mov rax,0x6; ret
0x4752a8: nop [rax+rax*1+0x0]; mov rax,[rsi+0xa8]; ret
0x4610dc: add [rax],al; add [rax],al; mov rax,0x2; ret
0x4057e9: icebp; add [rax],al; nop [rax+0x0]; repz ret
0x413990: add al,[rax]; add rsp,0x80; add rsp,0x8; ret
0x427ba6: jg 0x427bb7 <__memcpy_ssse3_back+10823>; ret
0x4392d1: mov rcx,rdx; rep movs es:[rdi],ds:[rsi]; ret
0x436e3e: movq [rdi+0x10],mm2; lea rax,[rdi+0x1f]; ret
0x46f280: sub eax,r8d; mov [rdx],eax; mov eax,0x2; ret
0x41f18b: adc [rdx],cl; add [rax],al; xor eax,eax; ret
0x461d2b: test [rcx+0x48000000],edi; add esp,0x78; ret
0x43bdab: rex.R and al,0xc; add rsp,0x10; pop rbx; ret
0x429a0f: jg 0x429a58 <__memmove_ssse3_back+7704>; ret
0x46d0df: add [rax],al; add [rax],al; add rsp,0x8; ret
0x4676a2: and eax,[rax]; xor eax,eax; add rsp,0x8; ret
0x42a116: jg 0x42a127 <__memmove_ssse3_back+9447>; ret
0x4774d8: nop [rax+rax*1+0x0]; mov rax,[rdi+0x90]; ret
0x40f60d: mov [rip+0x2921cc],rax # 0x6a17e0 <mp_>; ret
0x43a531: add [rbx-0x3d],bl; mov eax,0x8; pop rbx; ret
0x44a34b: mov rax,[rax]; mov rax,[rax+rdi*8+0x80]; ret
0x477568: nop [rax+rax*1+0x0]; mov rax,[rdi+0xa0]; ret
0x479854: jne 0x479860 <__register_frame+16>; repz ret
0x4610cc: add [rax],al; add [rax],al; mov rax,0x1; ret
0x44a36a: add al,0x25; add [rax],al; add [rax],al; ret
0x43b866: test [rsi+0x48000000],ebp; add esp,0x68; ret
0x436ecc: add [rax],al; add [rax],al; xor rax,rax; ret
0x427c1f: add [rdi],cl; mov dh,0x16; mov [rdi],dl; ret
0x43dc28: nop [rax+rax*1+0x0]; mov [rdi+0x20],rsi; ret
0x427976: jg 0x427987 <__memcpy_ssse3_back+10263>; ret
0x477558: nop [rax+rax*1+0x0]; mov [rdi+0x98],rsi; ret
0x40909a: add [rax-0x7d],cl; clc; dec [rax-0x77]; retf
0x42a2d6: jg 0x42a2e7 <__memmove_ssse3_back+9895>; ret
0x477578: nop [rax+rax*1+0x0]; mov rax,[rdi+0xb8]; ret
0x46183a: add al,[rax]; add [rax],al; xor eax,eax; ret
0x42a1f6: jg 0x42a207 <__memmove_ssse3_back+9671>; ret
0x46d8d4: fdiv [rbp+0x1e]; add rsp,0x110; pop rbx; ret
0x46fdcd: movsxd eax,ecx; add rax,rdi; sub rax,r8; ret
0x45e7ea: or eax,0x3b484a8b; rex.WX; cmove r8,rcx; ret
0x448649: add [rax],al; add [rdi],cl; rex.W ret 0xc083
0x4692c1: dec [rcx+rcx*4+0x65]; mov [rax-0x77],cl; ret
0x448514: sub eax,0x1; mov [rbx+0x8],eax; pop rbx; ret
0x4775b8: nop [rax+rax*1+0x0]; mov rax,[rdi+0xb0]; ret
0x4057e7: jmp 0x414960 <free>; nop [rax+0x0]; repz ret
0x4383a3: icebp; movzx edx,[rsi-0xf]; sub eax,edx; ret
0x4610ac: add [rax],al; add [rax],al; add rax,0x3; ret
0x43b865: jne 0x43b919 <open64+281>; add rsp,0x68; ret
0x41fbc3: add [rax],al; and ecx,0xff; sub eax,ecx; ret
0x427a56: jg 0x427a67 <__memcpy_ssse3_back+10487>; ret
0x46d0bf: jbe 0x46d0c8 <_dl_unload_cache+24>; repz ret
0x44b1ea: jmp 0x406cb0 <getenv>; nop; xor eax,eax; ret
0x438f48: leave; lea rax,[rdi+rcx*1]; sub rax,rsi; ret
0x4392d2: mov ecx,edx; rep movs es:[rdi],ds:[rsi]; ret
0x46f1a0: sub eax,ecx; mov [rdx],eax; mov eax,0x1; ret
0x4145c4: mov esi,ebx; call 0x410940 <arena_get_retry>
0x40ec88: nop [rax+rax*1+0x0]; mov eax,0xffffffff; ret
0x438e0f: add [rcx],al; add [rax],al; sub rax,rdx; ret
0x46110c: add [rax],al; add [rax],al; mov rax,0x5; ret
0x44a34c: mov eax,[rax]; mov rax,[rax+rdi*8+0x80]; ret
0x413500: add esi,ebx; stos es:[rdi],rax; pop rbx; ret
0x40f80e: adc [rcx+rax*2+0x48],esi; mov [rsi],ecx; ret
0x46f0e9: add [rax],al; add [rax],al; mov eax,0x1; ret
0x4279e6: jg 0x4279f7 <__memcpy_ssse3_back+10375>; ret
0x40f60e: mov [rip+0x2921cc],eax # 0x6a17e0 <mp_>; ret
0x4610ec: add [rax],al; add [rax],al; mov rax,0x3; ret
0x427ac6: jg 0x427ad7 <__memcpy_ssse3_back+10599>; ret
0x40dcfe: jne 0x40dcf0 <_IO_enable_locks+32>; repz ret
0x46f2fa: add [rax],al; add [rax],al; mov eax,0x2; ret
0x46fdcc: movsxd rax,ecx; add rax,rdi; sub rax,r8; ret
0x439313: mov ss:[rdi+rdx*1-0x2],cx; mov [rdi],si; ret
0x41dbab: shl [rax],0x48; add eax,edi; vzeroupper; ret
0x40decc: add [rax],al; add [rax],al; xor eax,eax; ret
0x43a4d5: shr eax,0x6; and eax,0x3fffc00; pop rbx; ret
0x472e7c: add [rbp+0xd],dh; add rsp,0x30; pop rbx; ret
0x427b36: jg 0x427b47 <__memcpy_ssse3_back+10711>; ret
0x42a186: jg 0x42a197 <__memmove_ssse3_back+9559>; ret
0x47752c: clc; jmp [rsi-0x70]; mov rax,[rdi+0x98]; ret
0x47746e: rol [rax],1; add [rax],al; add rsp,0x18; ret
0x43a1ae: add [rax],al; add [rax+0x39],cl; retf 0xe175
0x46d4e9: add [rbp+0x6],dh; add rsp,0x20; pop rbx; ret
0x4775c8: nop [rax+rax*1+0x0]; mov rax,[rdi+0xa8]; ret
0x427906: jg 0x427917 <__memcpy_ssse3_back+10151>; ret
0x427896: jg 0x4278a7 <__memcpy_ssse3_back+10039>; ret
0x400d2c: add eax,0x2a30ef; add rsp,0x88; pop rbx; ret
0x42184f: nop; mov dl,[rsi-0x1]; mov [rdi-0x1],dl; ret
0x421a30: mov dx,WORD [rsi-0x2]; mov [rdi-0x2],dx; ret
0x41044c: add [rbp+0x6],dh; add rsp,0x10; pop rbx; ret
0x40d2e1: jne 0x40d2d0 <_IO_least_marker+16>; repz ret
0x434850: mov al,[rcx]; mov [rdx],al; mov rax,rdi; ret
0x4136f2: or [rax-0x75],cl; or [r11+0x94807e0],al; ret
0x40f5a4: push 0x1002922; add [rax],al; add bl,dh; ret
0x46ae7c: jne 0x46ae50 <_dl_count_modids+48>; repz ret
0x40ecf8: nop [rax+rax*1+0x0]; mov rax,[rdi+0x68]; ret
0x4145c3: mov rsi,rbx; call 0x410940 <arena_get_retry>
0x41fbc0: and eax,0xff; and ecx,0xff; sub eax,ecx; ret
0x427baf: add [rdi],cl; mov bh,0x16; mov [rdi],dx; ret
0x414ef4: add [rax],al; xor eax,eax; add rsp,0x18; ret
0x42a266: jg 0x42a277 <__memmove_ssse3_back+9783>; ret
0x42a0bc: jg 0x42a0c5 <__memmove_ssse3_back+9349>; ret
0x41d719: nop [rax+0x0]; bsf eax,eax; add rax,rdi; ret
0x46f281: sub eax,eax; mov [rdx],eax; mov eax,0x2; ret
0x4610fc: add [rax],al; add [rax],al; mov rax,0x4; ret
0x40ed0c: add [rax],al; add [rax],al; mov rax,rdi; ret
0x40df5e: add [rax],al; mov rax,0xffffffffffffffff; ret
0x461c0d: add [rax],al; add [rax+0x6c],bh; syscall; ret
0x40ad7f: mov [rbx+0x10],eax; xor eax,eax; pop rbx; ret
0x43eb45: data16 inc [rbx]; add [rax+0xf],cl; rex.R ret
0x43a53f: add [rbx-0x3d],bl; mov eax,0x30; pop rbx; ret
0x45e236: or [rbx-0x3b7cb7fe],cl; or [rbx+0x5d],bl; ret
0x43b6fa: mov [rcx],eax; or rax,0xffffffffffffffff; ret
0x43dc25: loop 0x43dc1a <do_tunable_update_val+42>; ret
0x432921: cmp dh,[rax]; cmovne rax,rdx; vzeroupper; ret
0x4364cc: add [rax],al; add [rax],al; mov [rdi],dh; ret
0x415bbc: add [rax],al; add [rax],al; mov eax,0x16; ret
0x474926: or [rcx+0x415d5be8],cl; pop rsp; pop r13; ret
0x44a4dd: mov [rbx+0x40],esi; xor eax,eax; pop rbx; ret
0x401484: add [rax],al; add [rbx+0x5d],bl; pop r12; ret
0x43bdaa: mov eax,[rsp+0xc]; add rsp,0x10; pop rbx; ret
0x42a3b6: jg 0x42a3c7 <__memmove_ssse3_back+10119>; ret
0x43a371: add [rax],eax; add [rax+0x39],cl; retf 0xd975
0x491f85: lock ficomp [rdx-0x19]; cmc; mov ch,0xab; ret
0x461bfd: add [rax],al; add [rax+0x68],bh; syscall; ret
0x46deaf: add [rbp+0xf],cl; movs es:[rdi],ds:[rsi]; ret
0x438f07: movsxd eax,ecx; add rax,rdi; sub rax,rsi; ret
0x4094e3: sti; add cl,[rax+0xf]; scas eax,es:[rdi]; ret
0x40a5c7: mov [rbx+0x10],eax; mov rax,rbx; pop rbx; ret
0x43d897: add fs:[rax],al; add [rbp-0x3dbbf040],al; ret
0x43a475: lock mov edx,0x0; cmove rax,rdx; pop rbx; ret
0x468235: jmp [rsi+0x2e]; nop [rax+rax*1+0x0]; repz ret
0x46fa7d: jne 0x46fa84 <__dlinfo+84>; add rsp,0x38; ret
0x43a1ad: add [rax],0x0; add [rax+0x39],cl; retf 0xe175
0x410a7a: add [rax-0x77],cl; add eax,0x290dde; repz ret
0x409614: jmp rax; nop cs:[rax+rax*1+0x0]; pop rbx; ret
0x427019: rex.RXB in eax,0xf3; movq [rdi-0x10],mm1; ret
0x4580d5: clc; dec [rdi]; test [rcx-0x7c000015],al; ret
0x4610a5: nop; nop cs:[rax+rax*1+0x0]; add rax,0x3; ret
0x43a524: add al,0x12; pop rbx; and eax,0x7ff80000; ret
0x46fe3d: add [rsi-0x70],ah; mov eax,0x27; syscall; ret
0x4157cf: rex.W je 0x41575b <mallinfo+251>; retf 0x4c89
0x41e341: mov dh,0x7; movzx ecx,[rsi]; sub eax,ecx; ret
0x40de97: xor [rax],0x49000001; mov [rcx+0xa8],0x0; ret
0x42a731: jg 0x42a77a; add ebx,esi; movq [rdi],mm1; ret
0x40e9d6: jne 0x40e9c8 <_IO_remove_marker+24>; repz ret
0x41de81: mov dh,0x7; movzx edx,[rsi]; sub eax,edx; ret
0x41d703: xlat ds:[rbx]; rol [rbp+0x315775c0],0xc0; ret
0x42a426: jg 0x42a437 <__memmove_ssse3_back+10231>; ret
0x46c7cf: dec [rax-0x77]; fisttp [rax-0x77]; ret 0xcde8
0x46f2f6: add [rax],al; mov [rdx],0x0; mov eax,0x2; ret
0x427099: rex.RXB out 0xf3,al; movq [rdi-0x10],mm1; ret
0x40a442: cmp eax,0x296b70; add [rdx+rax*1-0xd],dh; ret
0x40a4ee: add [rax],al; mov [rdi],0x0; mov rax,rdi; ret
0x4610c5: nop; nop cs:[rax+rax*1+0x0]; mov rax,0x1; ret
0x438d58: test eax,0xfffd3be9; jmp [rsi-0x70]; repz ret
0x460e8b: rol bl,0xb8; add [rax],eax; add [rax],al; ret
0x43a554: add [rbx-0x3d],bl; mov eax,0x40; pop rbx; ret
0x451367: or [rbx-0x1776cf3b],al; pop rbx; pop rbp; ret
0x43aace: add [rbp+0x23],dh; add rsp,0x20; pop rbx; ret
0x413556: add [rax],al; call 0x410940 <arena_get_retry>
0x42a346: jg 0x42a357 <__memmove_ssse3_back+10007>; ret
0x44a30e: je 0x44a318 <_nl_postload_ctype+88>; repz ret
0x43a538: add [rbx-0x3d],bl; mov eax,0x10; pop rbx; ret
0x40fa33: and al,0x89; rex.RXB adc [r11+0x5d],r11b; ret
0x43a54d: add [rbx-0x3d],bl; mov eax,0x60; pop rbx; ret
0x434861: mov eax,[rcx]; mov [rdx],ax; mov rax,rdi; ret
0x46f092: or [rcx-0x2feeb728],cl; pop rbp; pop rbx; ret
0x42a6c6: jg 0x42a6d7 <__memmove_ssse3_back+10903>; ret
0x42a496: jg 0x42a4a7 <__memmove_ssse3_back+10343>; ret
0x45e628: sub r8,rcx; sar r8,0x2; lea eax,[r8-0x1]; ret
0x461bed: add [rax],al; add [rax+0x6b],bh; syscall; ret
0x436b4a: push rdi; add al,0x48; lea eax,[rdi+0x5]; ret
0x462381: mov edx,0x0; cmp rsi,rdi; cmovne rax,rdx; ret
0x46adf4: xchg ebp,eax; and eax,[rax]; add rsp,0x8; ret
0x43b788: fsub [rcx+rcx*4+0x2]; mov eax,0xffffffff; ret
0x478334: test [rdi+rdi*8-0x1],esi; dec [rax-0x7d]; ret
0x46d9e6: jmp 0x1a081333; rol [rbx-0x177cfd20],0x1; ret
0x40dddf: add [rax],al; add [rax],al; add [rax],al; ret
0x477a04: ins es:[rdi],dx; add [rax-0x77],cl; int3; ret
0x4671e0: mov [rdi+0x2f4],ecx; mov [rdi+0x308],rax; ret
0x42739a: in al,dx; movdqu XMMWORD [rdi-0x10],xmm1; ret
0x410281: jmp 0xfffffffff8ca4ae1; pop rbp; pop r12; ret
0x408547: or [rcx+0x415d5bd8],cl; pop rsp; pop r13; ret
0x4560a2: jne 0x4560ac <fprintf+172>; add rsp,0xd8; ret
0x439d68: vmovdqu64 ZMMWORD [r11],zmm8; vzeroupper; ret
0x40ed05: nop; nop cs:[rax+rax*1+0x0]; mov rax,rdi; ret
0x414ef0: mov [rax],0xc; xor eax,eax; add rsp,0x18; ret
0x49bf33: cmp [rbx+rax*4+0x7],al; or rax,0x1370303; ret
0x46d9e9: rcr [rcx],0xc0; and eax,0x2; sub eax,0x1; ret
0x42a506: jg 0x42a517 <__memmove_ssse3_back+10455>; ret
0x42a576: jg 0x42a587 <__memmove_ssse3_back+10567>; ret
0x4599e4: add [rdi+rcx*1+0x48],cl; fmul [rbp+0x63]; ret
0x45dac1: jne 0x45dab0 <_IO_least_wmarker+32>; repz ret
0x438f06: movsxd rax,ecx; add rax,rdi; sub rax,rsi; ret
0x439ca2: vmovdqu64 ZMMWORD [r11],zmm4; vzeroupper; ret
0x40a5c6: mov [rbx+0x10],rax; mov rax,rbx; pop rbx; ret
0x475111: call 0x103a5117; adc [rsp-0x28],eax; repz ret
0x436ec5: nop; nop cs:[rax+rax*1+0x0]; xor rax,rax; ret
0x49beff: cmp [rbx+rax*4+0x7],al; or rax,0x35b0303; ret
0x461fcf: xlat ds:[rbx]; ja 0x461ff8 <brk+72>; repz ret
0x46163d: add [rsi-0x70],ah; mov eax,0xc9; syscall; ret
0x41e34b: add [rax],0x0; add [rax],al; xor eax,eax; ret
0x40f847: nop cs:[rax+rax*1+0x0]; xor eax,eax; repz ret
0x4660be: inc [rbp-0x597bf040]; add eax,0x83480000; ret
0x43ee98: je 0x43eea0 <__libc_init_secure+16>; repz ret
0x4490fc: add esi,eax; add [rdi],ch; mov [rdi],0x0; ret
0x40ad7e: mov [rbx+0x10],rax; xor eax,eax; pop rbx; ret
0x40ea7e: lock mov [rdx+0x8],rax; xor eax,eax; repz ret
0x46f7cc: ror [rax-0x7b],cl; ror [rdi],0x94; ret 0x950f
0x42a5e6: jg 0x42a5f7 <__memmove_ssse3_back+10679>; ret
0x417fc1: mov dh,0xe; movzx eax,[rdi]; sub eax,ecx; ret
0x42a656: jg 0x42a667 <__memmove_ssse3_back+10791>; ret
0x43a583: and eax,0x7ff80000; div ecx; mov eax,eax; ret
0x43a25d: vmovdqu64 ZMMWORD [rdi],zmm0; vzeroupper; ret
0x43a546: add [rbx-0x3d],bl; mov eax,0x20; pop rbx; ret
0x467216: xchg [rax],eax; add eax,[rax]; add bl,dh; ret
0x49becb: cmp [rbx+rax*4+0x7],al; or rax,0x34b0303; ret
0x416920: or al,0x39; add al,[rax]; cmovne rax,rdx; ret
0x46d635: adc eax,0x235506; mov [rax],rdx; pop rbx; ret
0x46e009: rex.RXB or [r9-0x2d],r9b; jmp 0x1096695e; ret
0x45cc33: or [rcx+0x415d5bf0],cl; pop rsp; pop r13; ret
0x46fe97: rex.X and eax,[rax]; add [rdx+rax*2],0x1; ret
0x4142d4: sub [rax],al; add [rax],al; add [rax],al; ret
0x447e59: add [rax],al; add [rbx+0x41],bl; pop rsp; ret
0x40a643: add [rax-0x77],cl; mov edx,0x130; pop rbx; ret
0x41f2f6: add [rax],al; and ecx,0xffff; sub eax,ecx; ret
0x4222f9: jmp 0xfffffffff191ac46; mov [rdi-0x8],rdx; ret
0x47ad9d: add [rax],0x0; add [rbx+0x5d],bl; pop r12; ret
0x40d42e: add [rax],al; mov [rbx+0x50],0x0; pop rbx; ret
0x45c360: jbe 0x45c333 <read_int+35>; mov [rdi],rsi; ret
0x46df8d: mov [rdi],r8; shr r9,cl; mov [rdi+0x8],r9; ret
0x46f2f5: add [rax],r8b; mov [rdx],0x0; mov eax,0x2; ret
0x46f126: mov [rdi],esi; mov [rdx],eax; mov eax,0x1; ret
0x43ba3a: mov [rdx],eax; mov rax,0xffffffffffffffff; ret
0x421fd7: clc; mov [rdi-0xd],rcx; mov [rdi-0x8],rdx; ret
0x4365c1: movq mm0,[rsi]; movdqu XMMWORD [rdi],xmm0; ret
0x4484ff: add al,[rax]; mov [rbx+0x10],0x0; pop rbx; ret
0x46c8aa: add [rax],al; mov [rbx+0x10],0x0; pop rbx; ret
0x46b37e: cmp rax,0xffffffffffffffff; cmove rax,rdx; ret
0x437127: nop cs:[rax+rax*1+0x0]; lea rax,[rdi+0xb]; ret
0x4370c7: nop cs:[rax+rax*1+0x0]; lea rax,[rdi+0x4]; ret
0x437137: nop cs:[rax+rax*1+0x0]; lea rax,[rdi+0xc]; ret
0x456110: jbe 0x4560e3 <read_int+35>; mov [rdi],rsi; ret
0x4079d2: jne 0x4079dc <asprintf+172>; add rsp,0xd8; ret
0x46f8ea: and eax,[rax]; mov [rax],rdx; add rsp,0x8; ret
0x421ff5: cld; mov [rdi-0x5],edx; mov [rdi-0x4],ecx; ret
0x437107: nop cs:[rax+rax*1+0x0]; lea rax,[rdi+0x9]; ret
0x40f579: cmovae eax,[rdi+0x10]; sub rax,[rdi+0x18]; ret
0x4370d7: nop cs:[rax+rax*1+0x0]; lea rax,[rdi+0x5]; ret
0x422283: jmp 0xfffffffff191abd0; mov [rdi-0x8],rdx; ret
0x456e1a: add [rcx+0xf],al; mov dh,0x56; or al,0x83; ret
0x4364f7: ja 0x4364fb <__strcpy_sse2_unaligned+907>; ret
0x47404b: add eax,[rbp-0x7cdc8b40]; call 0x74d48c57; ret
0x40e97b: mov [rsi+0x60],ebx; add rsp,0x10; pop rbx; ret
0x424d07: jmp 0xfffffffff191d654; mov [rdi-0x8],rdx; ret
0x421c06: cld; mov [rdi-0xb],rcx; mov [rdi-0x4],edx; ret
0x400b55: call 0x400abd <vul>; mov eax,0x0; pop rbp; ret
0x421def: nop; mov edx,[rsi-0x4]; mov [rdi-0x4],edx; ret
0x4370e7: nop cs:[rax+rax*1+0x0]; lea rax,[rdi+0x6]; ret
0x437147: nop cs:[rax+rax*1+0x0]; lea rax,[rdi+0xd]; ret
0x4223f5: cld; mov [rdi-0x7],edx; mov [rdi-0x4],ecx; ret
0x40ede0: sub [rax],eax; add [rax],al; add [rax],al; ret
0x424cc9: jmp 0xfffffffff191d616; mov [rdi-0x8],rdx; ret
0x437097: nop cs:[rax+rax*1+0x0]; lea rax,[rdi+0x1]; ret
0x43d896: mov edx,0x64; test eax,eax; cmove eax,edx; ret
0x40f578: cmovae rax,[rdi+0x10]; sub rax,[rdi+0x18]; ret
0x40e97a: mov [rsi+0x60],rbx; add rsp,0x10; pop rbx; ret
0x461d2a: jne 0x461de9 <openat64+281>; add rsp,0x78; ret
0x436aee: add [rax],al; mov [rdi],dh; lea rax,[rdi]; ret
0x45db84: mov [rbx+0x74],eax; add rsp,0x20; pop rbx; ret
0x43708c: add [rax],al; add [rax],al; lea rax,[rdi]; ret
0x410a78: sub eax,0x89480000; add eax,0x290dde; repz ret
0x43c8e7: or [rbx+rcx*4+0x57],cl; adc [rcx-0x77],cl; ret
0x46f125: mov [rdi],rsi; mov [rdx],eax; mov eax,0x1; ret
0x45a6d7: add [rdi+rcx*1+0x48],cl; fimul [rbp+0x63]; ret
0x424d3f: jmp 0xfffffffff191d68c; mov [rdi-0x8],rdx; ret
0x437157: nop cs:[rax+rax*1+0x0]; lea rax,[rdi+0xe]; ret
0x46048a: adc cl,[rdx]; add [rax],al; cmove rax,rdx; ret
0x42223b: jmp 0xfffffffff191ab88; mov [rdi-0x8],rdx; ret
0x4223d7: clc; mov [rdi-0xf],rcx; mov [rdi-0x8],rdx; ret
0x40f5dd: mov [rip+0x292204],rax # 0x6a17e8 <mp_+8>; ret
0x4370b7: nop cs:[rax+rax*1+0x0]; lea rax,[rdi+0x3]; ret
0x4223bf: jmp 0xfffffffff191ad0c; mov [rdi-0x8],rdx; ret
0x42236f: jmp 0xfffffffff191acbc; mov [rdi-0x8],rdx; ret
0x4370f7: nop cs:[rax+rax*1+0x0]; lea rax,[rdi+0x8]; ret
0x421a26: cld; mov [rdi-0xa],rcx; mov [rdi-0x4],edx; ret
0x421846: cld; mov [rdi-0x9],rcx; mov [rdi-0x4],edx; ret
0x43ef04: add al,[rax]; nop cs:[rax+rax*1+0x0]; repz ret
0x475112: add [rax],eax; movss [rsp-0x28],xmm0; repz ret
0x422075: jg 0x4220c6 <__memcpy_ssse3+9414>; retf 0x894c
0x479a08: dec [rax-0x77]; fcomp [rbx+0x5d]; pop r12; ret
0x474c79: jne 0x474c86 <_dl_vsym+230>; add rsp,0x28; ret
0x4370a7: nop cs:[rax+rax*1+0x0]; lea rax,[rdi+0x2]; ret
0x40eca6: inc ebx; nop [rax+rax*1+0x0]; xor eax,eax; ret
0x40f670: add [rax-0x77],ecx; adc eax,0x2921b8; repz ret
0x46def9: rex.RXB clc; shl r9,cl; mov [rdi-0x10],r9; ret
0x472df6: add [rax],al; mov [rbx+0x20],rax; pop rbx; ret
0x45e14c: rex.W add [rax],al; add [rax],al; pop rbx; ret
0x479a84: jne 0x479a90 <__deregister_frame+16>; repz ret
0x40edc0: in al,dx; add al,[rax]; add rsp,0x80; repz ret
0x45e147: add [rax],al; mov [rax+0x48],0x0; pop rbx; ret
0x43dc10: push rdi; and dh,al; rex.RXB sub [r9],r8b; ret
0x43c8e6: or [r11+r9*4+0x57],r9b; adc [rcx-0x77],cl; ret
0x415bd3: nop [rax+rax*1+0x0]; mov eax,0xc; pop rbx; ret
0x474d17: add [rax],al; mov rax,[rsp]; add rsp,0x38; ret
0x426f27: clc; mov [rdi-0xd],rdx; mov [rdi-0x8],rcx; ret
0x45e7ec: rex.WX; cmp rcx,[rdx+0x4c]; cmove eax,ecx; ret
0x40df59: nop [rax+0x0]; mov rax,0xffffffffffffffff; ret
0x49bede: add [rdi],0xd; add eax,[rbx]; or al,[rcx]; ret
0x45e38f: add [rbx-0x3b7cb7fe],cl; or [rbx+0x5d],bl; ret
0x427136: cld; mov [rdi-0x9],rdx; mov [rdi-0x4],ecx; ret
0x427036: cld; mov [rdi-0xb],rdx; mov [rdi-0x4],ecx; ret
0x45f12a: add cl,[rsi]; add [rax],al; cmove rax,rdx; ret
0x424c53: jmp 0xfffffffff191d5a0; mov [rdi-0x8],rdx; ret
0x426e97: clc; mov [rdi-0xe],rdx; mov [rdi-0x8],rcx; ret
0x462384: add [rax],al; cmp rsi,rdi; cmovne rax,rdx; ret
0x426e07: clc; mov [rdi-0xf],rdx; mov [rdi-0x8],rcx; ret
0x427119: rex.RXB out 0xf3,eax; movq [rdi-0x10],mm1; ret
0x479804: and al,[rax]; add [rax],eax; add [rax],al; ret
0x4780aa: sbb [rax-0x75],cl; rex.X or [rax-0x77],cl; ret
0x422337: jmp 0xfffffffff191ac84; mov [rdi-0x8],rdx; ret
0x46ee31: adc [rax-0x77],cl; jmp 0xffffffffe9457781; ret
0x489732: add [rax],eax; add [rax],al; add [rax],al; ret
0x4004c8: jmp [rip+0x2a0bfa] # 0x6a10c8; xchg ax,ax; ret
0x46de83: mov [rdi],r8; shl r9,cl; mov [rdi-0x8],r9; ret
0x4221f5: cld; mov [rdi-0x6],edx; mov [rdi-0x4],ecx; ret
0x434880: mov eax,[rcx]; mov [rdx],eax; mov rax,rdi; ret
0x424c91: jmp 0xfffffffff191d5de; mov [rdi-0x8],rdx; ret
0x40ad91: or esp,[rax]; mov eax,0xffffffff; pop rbx; ret
0x43d899: add [rax],al; test eax,eax; cmove eax,edx; ret
0x432920: cmp sil,[rax]; cmovne rax,rdx; vzeroupper; ret
0x45e629: sub eax,ecx; sar r8,0x2; lea eax,[r8-0x1]; ret
0x45e006: je 0x45e010 <_IO_wdoallocbuf+48>; pop rbx; ret
0x424d8f: jmp 0xfffffffff191d6dc; mov [rdi-0x8],rdx; ret
0x439fec: lock movdqu XMMWORD [rdi+rdx*1-0x20],xmm0; ret
0x413553: mov esi,0x240; call 0x410940 <arena_get_retry>
0x424c0b: jmp 0xfffffffff191d558; mov [rdi-0x8],rdx; ret
0x462339: je 0x46231f <is_dst+79>; xor eax,eax; repz ret
0x426fb6: cld; mov [rdi-0xc],rdx; mov [rdi-0x4],ecx; ret
0x439398: lock movups XMMWORD [rdi+rdx*1-0x20],xmm3; ret
0x4392f5: mov ss:[rdi+rdx*1-0x8],rcx; mov [rdi],rsi; ret
0x4221d7: clc; mov [rdi-0xe],rcx; mov [rdi-0x8],rdx; ret
0x472ccb: jne 0x472cdc <__dlopen+108>; add rsp,0x38; ret
0x4347e1: mov eax,[rcx]; mov [rdx],rax; mov rax,rdi; ret
0x4274aa: out dx,al; movdqu XMMWORD [rdi-0x10],xmm1; ret
0x421de6: cld; mov [rdi-0xc],rcx; mov [rdi-0x4],edx; ret
0x464ab0: mov [rsi],0xffffffffffffffff; xor eax,eax; ret
0x45f15a: adc cl,[rcx]; add [rax],al; cmove rax,rdx; ret
0x437117: nop cs:[rax+rax*1+0x0]; lea rax,[rdi+0xa]; ret
0x439304: mov ss:[rdi+rdx*1-0x4],ecx; mov [rdi],esi; ret
0x4222c1: jmp 0xfffffffff191ac0e; mov [rdi-0x8],rdx; ret
0x40f5de: mov [rip+0x292204],eax # 0x6a17e8 <mp_+8>; ret
0x424d67: jmp 0xfffffffff191d6b4; mov [rdi-0x8],rdx; ret
0x4324bd: add al,0x7; cmp [rax],sil; cmovne rax,rdx; ret
0x436000: mov al,[rcx]; mov [rdx],al; lea rax,[rdx]; ret
0x4220eb: jg 0x422134 <__memcpy_ssse3+9524>; retf 0x894c
0x472d42: add [rax],al; mov [rbx+0x18],rax; pop rbx; ret
0x4270b6: cld; mov [rdi-0xa],rdx; mov [rdi-0x4],ecx; ret
0x422397: jmp 0xfffffffff191ace4; mov [rdi-0x8],rdx; ret
0x4347e0: mov rax,[rcx]; mov [rdx],rax; mov rax,rdi; ret
0x43e5ea: jmp 0x43e300 <_dl_aux_init+272>; nop; repz ret
0x43fb42: add [rax],eax; add [rbx+0x5d],bl; pop r12; ret
0x46f361: jne 0x46f348 <_itoa_word+40>; mov rax,rsi; ret
0x42741a: in eax,dx; movdqu XMMWORD [rdi-0x10],xmm1; ret
0x46118e: enter 0x2948,0xd0; shr rax,0x2; vzeroupper; ret
0x407204: add [rcx],dh; rcr [rbx+0x5d],0x41; pop rsp; ret
0x4274c0: movzx edx,WORD [rsi-0x2]; mov [rdi-0x2],dx; ret
0x46f29b: or eax,edx; mov [rdi+0x8],rax; mov eax,0x2; ret
0x4215ff: call 0xfffffffff0a19f50; mov [rdi-0x8],rdx; ret
0x409403: add cl,[rax+0xf]; scas eax,es:[rdi]; ret 0x2948
0x4604d7: add [rax+rax*1],cl; add [rbx+rax*1-0xd],dh; ret
0x4365d9: ja 0x4365eb <__strcpy_sse2_unaligned+1147>; ret
0x421513: call 0xfffffffff0a19e64; mov [rdi-0x8],rcx; ret
0x438a81: jne 0x438a70 <__strstr_sse2_unaligned+400>; ret
0x421589: call 0xfffffffff0a19eda; mov [rdi-0x8],rcx; ret
0x43c6f8: mov [rax],0x16; mov rax,0xffffffffffffffff; ret
0x44a3a0: mov rax,0xffffffffffffffe0; add rax,fs:0x0; ret
0x46f29a: or rax,rdx; mov [rdi+0x8],rax; mov eax,0x2; ret
0x407148: call 0x4019f0 <__assert_fail>; xor eax,eax; ret
0x421627: call 0xfffffffff0a19f78; mov [rdi-0x8],rdx; ret
0x4365c6: jg 0x4365cf <__strcpy_sse2_unaligned+1119>; ret
0x4775b7: nop cs:[rax+rax*1+0x0]; mov rax,[rdi+0xb0]; ret
0x442c82: cwde; add [rax],al; add [rax+0xf],cl; rex.R ret
0x4273ad: add [rax],al; add [rbx+0x5789fc56],cl; cld; ret
0x44b755: fbld T[rsi+0x2e]; nop [rax+rax*1+0x0]; repz ret
0x4134fd: add cl,al; jmp 0xffffffffab8a2807; pop rbx; ret
0x424abb: jg 0x424b04 <__memmove_ssse3+9524>; retf 0x894c
0x40f684: mov [rip+0x2921b6],eax # 0x6a1840 <mp_+96>; ret
0x40ea25: adc [rcx],ch; rol bl,1; mov eax,0xffffffff; ret
0x409d57: adc [rcx],dh; rcr [rbx+0x5d],0x41; pop rsp; ret
0x40ecb7: nop cs:[rax+rax*1+0x0]; mov eax,0xffffffff; ret
0x42401f: call 0xfffffffff0a1c970; mov [rdi-0x8],rdx; ret
0x416836: adc al,0x1; add [rax+0xf],cl; rex.RB ret 0xc3f3
0x434862: add [rsi-0x77],esp; add cl,[rax-0x77]; clc; ret
0x46de84: mov [rdi],eax; shl r9,cl; mov [rdi-0x8],r9; ret
0x436b64: add ecx,[rcx+0x357890f]; lea rax,[rdi+0x6]; ret
0x41f5e9: cmps ds:[rsi],es:[rdi]; add eax,0xc0310000; ret
0x41d65d: rex.WRXB xor [r14+0xf],r12b; xlat ds:[rbx]; ret
0x40fa30: add [rcx+0x4789246f],cl; adc [rbx+0x5d],bl; ret
0x400a7a: sub al,[rax]; add [rbp-0x3d],ebx; nop; repz ret
0x45736c: inc [rcx-0x1]; push rbp; cmp [rax+0x39],cl; ret
0x416a12: fild [rcx]; add [rax+0xf],cl; rex.RB ret 0xc3f3
0x46f98c: mov rdx,[rdi+0x30]; mov [rax],rdx; pop rbx; ret
0x437085: nop; nop cs:[rax+rax*1+0x0]; lea rax,[rdi]; ret
0x43a489: enter 0xe8c1,0xe; and eax,0x3fc00; pop rbx; ret
0x461be8: nop [rax+rax*1+0x0]; mov eax,0x6b; syscall; ret
0x423f21: call 0xfffffffff0a1c872; mov [rdi-0x8],rdx; ret
0x40f623: mov [rip+0x2921d6],rax # 0x6a1800 <mp_+32>; ret
0x436118: rex.B add eax,0x5428948; lea rax,[rdx+0xc]; ret
0x46f3e5: jne 0x46f3c0 <_itoa_word+160>; mov rax,rsi; ret
0x421551: call 0xfffffffff0a19ea2; mov [rdi-0x8],rdx; ret
0x4726ba: rex.X fnstcw [rax+0x489066ff]; add esp,0x8; ret
0x46fb60: jne 0x46fb74 <__dlmopen+116>; add rsp,0x38; ret
0x424a45: jg 0x424a96 <__memmove_ssse3+9414>; retf 0x894c
0x467dcc: add [rax-0x75],cl; rex.XB adc [r8-0x7d],cl; ret
0x46df8e: mov [rdi],eax; shr r9,cl; mov [rdi+0x8],r9; ret
0x40f634: mov [rip+0x2921be],eax # 0x6a17f8 <mp_+24>; ret
0x4660c3: cmps ds:[rsi],es:[rdi]; add eax,0x83480000; ret
0x46f999: mov eax,[rbx+0x18]; mov [rax],rdi; pop rbx; ret
0x43a39a: cmp dh,[rdx+0x2]; mov [rdi],cl; vzeroupper; ret
0x461f83: jne 0x461fa3 <tcgetattr+211>; add rsp,0x38; ret
0x46f998: mov rax,[rbx+0x18]; mov [rax],rdi; pop rbx; ret
0x461bdb: nop [rax+rax*1+0x0]; mov eax,0x66; syscall; ret
0x487901: sldt [rax]; mov ebp,0xc000000f; sldt [rax]; ret
0x461099: rol [rdx],0xc3; nop [rax+0x0]; add rax,0x1; ret
0x43d8eb: or [rax+0x26],0xc4834800; or [rbx+0x5d],bl; ret
0x423f97: call 0xfffffffff0a1c8e8; mov [rdi-0x8],rdx; ret
0x46f979: mov edx,[rbx+0x18]; mov [rdx],rax; pop rbx; ret
0x40a642: add [rax],al; mov [rdx+0x130],rdi; pop rbx; ret
0x40f683: mov [rip+0x2921b6],rax # 0x6a1840 <mp_+96>; ret
0x40f624: mov [rip+0x2921d6],eax # 0x6a1800 <mp_+32>; ret
0x40f633: mov [rip+0x2921be],rax # 0x6a17f8 <mp_+24>; ret
0x46f98d: mov edx,[rdi+0x30]; mov [rax],rdx; pop rbx; ret
0x46048b: or al,[rax]; add [rax+0xf],cl; rex.R ret 0x66c3
0x41158e: out dx,al; add ch,[rcx]; add [rax+0x39],cl; ret
0x461c08: nop [rax+rax*1+0x0]; mov eax,0x6c; syscall; ret
0x41681a: shr [rcx],cl; add al,[rax]; cmovne rax,rdx; ret
0x43603f: add [rbx+0x48028901],cl; lea eax,[rdx+0x3]; ret
0x40ad90: or [rbx],0x20; mov eax,0xffffffff; pop rbx; ret
0x436095: add cl,[rbx+0x42890541]; add eax,0x8428d48; ret
0x4903e1: fld [rsi+0x32]; mov bh,0xb4; mov edi,[rdx]; ret
0x46ae9e: xchg ebp,eax; and eax,[rax]; mov [rsi],rax; ret
0x46f978: mov rdx,[rbx+0x18]; mov [rdx],rax; pop rbx; ret
0x415dbc: rex.WRXB add [r8],r8b; cmovne rax,rdx; repz ret
0x4589b8: mov ?,esi; add [rax],al; add [rax+0x63],cl; ret
0x45f18c: out 0xe8,al; es adc edi,edx; dec [rax+0x1]; ret
0x44a34a: mov rax,fs:[rax]; mov rax,[rax+rdi*8+0x80]; ret
0x427ace: add [rax],al; mov edx,[rsi]; mov [rdi],edx; ret
0x4703cd: add [rax],al; add bh,bh; ror [rax-0x77],cl; ret
0x40e0a6: add [rax],al; sub r8,rcx; lea eax,[r8-0x1]; ret
0x473368: test bl,dl; or [rax],al; add [rax-0x7d],cl; ret
0x46769f: adc eax,0x23ab7c; xor eax,eax; add rsp,0x8; ret
0x421667: clc; mov [rdi-0x10],r11; mov [rdi-0x8],rdx; ret
0x43662f: ja 0x436645 <__strcpy_sse2_unaligned+1237>; ret
0x46f29c: ror [rax-0x77],1; rex.RXB or [r8+0x2],r15b; ret
0x4774d7: nop cs:[rax+rax*1+0x0]; mov rax,[rdi+0x90]; ret
0x423ee3: call 0xfffffffff0a1c834; mov [rdi-0x8],rcx; ret
0x423ff7: call 0xfffffffff0a1c948; mov [rdi-0x8],rdx; ret
0x46f106: add [rax],eax; add [rax],al; mov [rdi],rsi; ret
0x42790e: add [rax],al; mov rdx,[rsi]; mov [rdi],rdx; ret
0x40fa0d: add [rcx+rax*1+0x57],al; sbb [rax+0x39],cl; ret
0x45e6ea: add ch,[rcx]; rol bl,1; mov eax,0xffffffff; ret
0x40f5bd: mov [rip+0x292249],eax # 0x6a180c <mp_+44>; ret
0x44a360: mov rax,0xfffffffffffffff0; add rax,fs:0x0; ret
0x46f0e4: div [rbp+0x29]; mov [rdx],0x0; mov eax,0x1; ret
0x40a444: imul ebp,[rcx],0x0; add [rdx+rax*1-0xd],dh; ret
0x46a1e9: add ecx,[rax-0x77]; ds mov rax,r8; pop rbx; ret
0x423f59: call 0xfffffffff0a1c8aa; mov [rdi-0x8],rcx; ret
0x40ecf7: nop cs:[rax+rax*1+0x0]; mov rax,[rdi+0x68]; ret
0x4215c7: call 0xfffffffff0a19f18; mov [rdi-0x8],rdx; ret
0x4168cf: fnsave [rdi]; add al,[rax]; cmovne rax,rdx; ret
0x461bf8: nop [rax+rax*1+0x0]; mov eax,0x68; syscall; ret
0x4389d1: jne 0x4389c0 <__strstr_sse2_unaligned+224>; ret
0x42164f: call 0xfffffffff0a19fa0; mov [rdi-0x8],rdx; ret
0x44a380: mov rax,0xffffffffffffffe8; add rax,fs:0x0; ret
0x4347e2: add [rax-0x77],ecx; add cl,[rax-0x77]; clc; ret
0x48f6f5: fdivr st,st(4); test al,0x97; xchg esp,eax; ret
0x42752a: out dx,eax; movdqu XMMWORD [rdi-0x10],xmm1; ret
0x416aba: xor ah,[rdi]; add al,[rax]; cmovne rax,rdx; ret
0x44a44f: jne 0x44a456 <__setfpucw+70>; add rsp,0x18; ret
0x47aad3: pop rbx; pop rbp; jmp 0x414960 <free>; repz ret
0x44c685: sub eax,[rcx+0xf]; mov dh,0x47; or al,0x83; ret
0x423fcf: call 0xfffffffff0a1c920; mov [rdi-0x8],rdx; ret
0x416ad6: out 0x0,al; add [rax+0xf],cl; rex.RB ret 0xc3f3
0x43da29: je 0x43da2c <__libc_enable_asynccancel+44>; ret
0x4366b1: ja 0x4366cb <__strcpy_sse2_unaligned+1371>; ret
0x46cb71: xchg dl,dl; add al,[rax]; add [rcx-0x77],al; ret
0x4364fd: add [rax],r8b; mov edx,[rsi]; mov [rdi],edx; ret
0x426d79: rex.RX; lock movdqu XMMWORD [rdi-0x10],xmm0; ret
0x436097: rex.B add eax,0x48054289; lea eax,[rdx+0x8]; ret
0x427c1e: add [rax],al; movzx edx,[rsi]; mov [rdi],dl; ret
0x474967: dec [rax-0x77]; add ebx,[rax+0x5a]; pop rbx; ret
0x427909: nop [rax+0x0]; mov rdx,[rsi]; mov [rdi],rdx; ret
0x416996: out 0x0,eax; add [rax+0xf],cl; rex.RB ret 0xc3f3
0x41e276: adc [rbp+0x31000002],0xffffffc0; vzeroupper; ret
0x4134fe: shr ecx,0x3; rep stos es:[rdi],rax; pop rbx; ret
0x474e9d: je 0x474ec3 <__lttf2+83>; adc [rcx-0x77],cl; ret
0x426ded: jg 0x426e3e <__memcpy_ssse3_back+7374>; lock ret
0x43678b: jg 0x436794; movdqu XMMWORD [rdi+0x10],xmm2; ret
0x43a4d6: call 0xfffffffffc43c9e1; inc [rbx]; pop rbx; ret
0x42a8bb: rex.WB clc; mov [rdi],rsi; mov [r9-0x8],rcx; ret
0x4610d6: add bl,al; nop [rax+rax*1+0x0]; mov rax,0x2; ret
0x42731d: jg 0x42736e <__memcpy_ssse3_back+8702>; lock ret
0x447b1c: in al,dx; sub [rbx+rcx*4+0x35],cl; push rbx; ret
0x40940e: adc [rcx+0x2b],cl; rex.RXB or [r8+0x29],r9b; ret
0x426d7d: jg 0x426dc6 <__memcpy_ssse3_back+7254>; lock ret
0x4607ad: jo 0x46080a <wcrtomb+346>; pop rbp; pop r12; ret
0x41db47: test [rax+rax*1-0x3fcf0000],edx; vzeroupper; ret
0x46ef53: mov [rdi+0x8],r10; mov eax,ecx; adc eax,eax; ret
0x474de0: jne 0x474d10 <__unordtf2+112>; add rsp,0x38; ret
0x41d70f: add [rdi],cl; mov esp,0x448d48c0; cmp al,dh; ret
0x46925c: xchg bh,cl; add [rax],al; add [rax-0x7d],cl; ret
0x4348a7: add al,0x66; mov [rdx+0x4],eax; mov rax,rdi; ret
0x461bb8: cmp eax,0xfffff001; jae 0x461bc0 <uname+16>; ret
0x461106: add bl,al; nop [rax+rax*1+0x0]; mov rax,0x5; ret
0x426f0d: jg 0x426f5e <__memcpy_ssse3_back+7662>; lock ret
0x41dcb7: mov esp,0xf80148c0; add rax,rcx; vzeroupper; ret
0x43aa67: jmp 0x414960 <free>; nop [rax+0x0]; pop rbx; ret
0x469e81: add [rax-0x77],cl; call 0x5c87fbe4; pop r13; ret
0x45f15b: or [rax],eax; add [rax+0xf],cl; rex.R ret 0x66c3
0x43ef05: add [rsi+0x2e],ah; nop [rax+rax*1+0x0]; repz ret
0x40f693: mov [rip+0x2921ae],rax # 0x6a1848 <mp_+104>; ret
0x47510f: add eax,0x1e870; movss [rsp-0x28],xmm0; repz ret
0x462448: test bl,ah; add [rax],al; add [rax-0x7d],cl; ret
0x43653d: add [rax],r8b; mov rdx,[rsi]; mov [rdi],rdx; ret
0x4274ad: jg 0x4274fe <__memcpy_ssse3_back+9102>; lock ret
0x42711d: jg 0x42716e <__memcpy_ssse3_back+8190>; lock ret
0x4610f6: add bl,al; nop [rax+rax*1+0x0]; mov rax,0x4; ret
0x426f9d: jg 0x426fee <__memcpy_ssse3_back+7806>; lock ret
0x427ac9: nop [rax+0x0]; mov edx,[rsi]; mov [rdi],edx; ret
0x40e0a5: add [rax],r8b; sub r8,rcx; lea eax,[r8-0x1]; ret
0x42729d: jg 0x4272ee <__memcpy_ssse3_back+8574>; lock ret
0x40bbc6: rex.RXB adc [r11+0x6],r14b; movzx eax,[rax]; ret
0x448511: sar [rsi+0x8],0x83; call 0x8880e1b; pop rbx; ret
0x40282f: or eax,0x24bc8d49; add [rax],0x0; add al,ch; ret
0x42721d: jg 0x42726e <__memcpy_ssse3_back+8446>; lock ret
0x41f2f3: and eax,0xffff; and ecx,0xffff; sub eax,ecx; ret
0x4093df: add [rcx+0x2b],cl; rex.RXB adc [r8+0x1],r9b; ret
0x46d9ed: loopne 0x46d9f1 <__mpn_cmp+49>; sub eax,0x1; ret
0x42709d: jg 0x4270ee <__memcpy_ssse3_back+8062>; lock ret
0x46ef54: mov [rdi+0x8],edx; mov eax,ecx; adc eax,eax; ret
0x4604d9: add [rax],al; je 0x4604e0 <wmemset+32>; repz ret
0x4009c8: add [rax],al; hlt; nop [rax+rax*1+0x0]; repz ret
0x40a90c: add [rax],al; add [rax],al; movzx eax,[rdx]; ret
0x46b783: sar bh,0xff; call [rbx+0x64]; mov eax,[rax]; ret
0x432b46: ror [rax+0x1],0xc8; add rax,rdi; vzeroupper; ret
0x46f9f4: mov edx,[rdi+0x448]; mov [rax],rdx; pop rbx; ret
0x47529a: sbb eax,0x66c3c031; nop; mov rax,[rsi+0xb8]; ret
0x44d0b6: test bh,al; or [rax],eax; add [rcx-0x77],cl; ret
0x40dec5: add bl,al; nop [rax+rax*1+0x0]; xor eax,eax; ret
0x46f9f3: mov rdx,[rdi+0x448]; mov [rax],rdx; pop rbx; ret
0x406fed: add [rax],al; add bh,bh; adc ecx,[rax-0x7d]; ret
0x4603b8: nop [rax+rax*1+0x0]; mov rax,r8; vzeroupper; ret
0x462002: or al,0x0; add [rax],al; mov eax,0xffffffff; ret
0x414eef: mov fs:[rax],0xc; xor eax,eax; add rsp,0x18; ret
0x46107d: and cl,0xf; je 0x4610a0 <__wcslen_sse2+512>; ret
0x43a9ee: loope 0x43a9e3 <__strcasecmp_l_nonascii+35>; ret
0x43b6f9: mov fs:[rcx],eax; or rax,0xffffffffffffffff; ret
0x43d1ec: jmp 0x43c800 <trecurse>; nop [rax+0x0]; repz ret
0x432b45: mov esp,0xc80148c0; add rax,rdi; vzeroupper; ret
0x432cf4: je 0x432cfa <__strlen_sse2+58>; bsf eax,edx; ret
0x43c94e: or [rax-0xa],al; mov [rcx],0x75; or esi,ebx; ret
0x46ad32: rex.RX add [rax-0x77],r9d; add eax,0x239675; ret
0x43a1e0: lock vmovdqu XMMWORD [rdi],xmm0; vzeroupper; ret
0x409346: add [rcx+0x2b],cl; rex.RXB and [r8+0x1],r9b; ret
0x43a478: add [rax],al; add [rax+0xf],cl; rex.R ret 0xc35b
0x426e7d: jg 0x426ece <__memcpy_ssse3_back+7518>; lock ret
0x41dcb8: ror [rax+0x1],0xf8; add rax,rcx; vzeroupper; ret
0x41e522: call 0xffffffffc56c5b26; std; xlat ds:[rbx]; ret
0x467782: js 0x467792 <_dl_protect_relro+82>; pop rbx; ret
0x427596: lddqu xmm0,[rsi]; movdqu XMMWORD [rdi],xmm0; ret
0x47751c: cmp al,0x31; or [rbp+0x4],dh; mov [rax],rdx; ret
0x43da8d: je 0x43da90 <__libc_disable_asynccancel+48>; ret
0x461116: add bl,al; nop [rax+rax*1+0x0]; mov rax,0x6; ret
0x4610e6: add bl,al; nop [rax+rax*1+0x0]; mov rax,0x3; ret
0x4743ba: test cl,cl; add eax,[rax]; add [rax+0x1],cl; ret
0x42719d: jg 0x4271ee <__memcpy_ssse3_back+8318>; lock ret
0x432f63: ror [rax+0x1],0xf8; sub rax,rdx; vzeroupper; ret
0x42701d: jg 0x42706e <__memcpy_ssse3_back+7934>; lock ret
0x42752d: jg 0x42757e <__memcpy_ssse3_back+9230>; lock ret
0x434896: add al,0x88; rex.X add al,0x48; mov eax,edi; ret
0x432f62: mov esp,0xf80148c0; sub rax,rdx; vzeroupper; ret
0x46d9f0: call 0x1f569cf6; add [rax],r8b; xor eax,eax; ret
0x42739d: jg 0x4273ee <__memcpy_ssse3_back+8830>; lock ret
0x499ec0: rex.W add [rax],al; add [rax+0x7800005f],cl; ret
0x41697b: sub [rdx],al; add [rax+0xf],cl; rex.RB ret 0xfc3
0x40f694: mov [rip+0x2921ae],eax # 0x6a1848 <mp_+104>; ret
0x42741d: jg 0x42746e <__memcpy_ssse3_back+8958>; lock ret
0x42a8cd: rex.WB cld; mov [rdi],esi; mov [r9-0x4],ecx; ret
0x46c96a: je 0x46c8c0 <_dl_cache_libcmp>; sub eax,edx; ret
0x461126: add bl,al; nop [rax+rax*1+0x0]; mov rax,0x7; ret
0x47787d: mov esi,[rbp-0x10]; mov r15,[rbp-0x8]; leave; ret
0x46f8e7: adc eax,0x233274; mov [rax],rdx; add rsp,0x8; ret
0x4600da: ror [rax-0x3f],0xe1; and [rax+0x9],cl; retf 0xf4c
0x436c54: movdqu XMMWORD [rdi],xmm0; lea rax,[rdi+0xf]; ret
0x40bf43: add [rax-0x77],cl; fcomp [rbx+0x5d]; pop r12; ret
0x41e3e6: jmp 0xfffffffffa06fb5f; xlat ds:[rbx]; ret 0xff2d
0x460d98: mov esp,0xd00148d2; sub rax,rdi; shr rax,0x2; ret
0x46d0be: std; jbe 0x46d0c8 <_dl_unload_cache+24>; repz ret
0x40d311: rex.W; mov [rdi+0x18],rax; mov [rdi+0x8],rax; ret
0x438bfb: add [rax],al; add [rax],al; add [rcx+0x1],cl; ret
0x416921: cmp [rdx],eax; add [rax+0xf],cl; rex.RB ret 0xfc3
0x4079cf: add [rax],al; add [rbp+0x8],dh; add rsp,0xd8; ret
0x45f1b6: add [r8-0x77],r9b; fcomp [rbx+0x5d]; pop r12; ret
0x434838: or [r8-0x77],cl; rex.X or [rax-0x77],cl; clc; ret
0x43bd44: add [rax],al; add [rbp+0x5],dh; add rsp,0x58; ret
0x409ab6: add [rcx],cl; add [rax],al; add [rax-0x1],bh; ret
0x436648: movdqu XMMWORD [rdi],xmm0; mov [rdi+0xe],rcx; ret
0x462390: test ecx,ecx; jne 0x46237d <is_dst+173>; repz ret
0x43c673: add [rax],al; add [rbp+0xf],dh; add rsp,0x28; ret
0x46bbf6: mov rsp,rbx; mov rbx,[rsp]; add rsp,0x30; bnd ret
0x432d9d: je 0x432db0 <__strlen_sse2+240>; bsf rax,rdx; ret
0x434860: mov ax,WORD [rcx]; mov [rdx],ax; mov rax,rdi; ret
0x43ba39: mov fs:[rdx],eax; mov rax,0xffffffffffffffff; ret
0x470088: je 0x4700ae <_dl_fixup+110>; or [rax+0x1],cl; ret
0x41681b: sub [rdx],eax; add [rax+0xf],cl; rex.RB ret 0xfc3
0x4486d7: fisttp [rax-0x77]; fcomp [rbx+0x5d]; pop r12; ret
0x429c3d: jg 0x429c8e <__memmove_ssse3_back+8270>; lock ret
0x40deb1: mov [rdi+0xa0],0xffffffff; mov [r9+0xa8],0x0; ret
0x43dc24: jae 0x43dc08 <do_tunable_update_val+24>; repz ret
0x45e758: adc al,0x90; mov [rax],rdx; xor eax,eax; repz ret
0x408297: mov ecx,[rax+0xa0]; mov [rcx+0x130],rdx; repz ret
0x429b3d: jg 0x429b8e <__memmove_ssse3_back+8014>; lock ret
0x46fc22: add [rax],al; add [rax+0xf],cl; rex.RB ret 0x66c3
0x475c0a: jmp 0x475a8c <execute_cfa_program+1980>; repz ret
0x46d323: add [rax],al; add [rbp+0xc],dh; add rsp,0x38; ret
0x429abd: jg 0x429b0e <__memmove_ssse3_back+7886>; lock ret
0x44a44c: add [rax],al; add [rbp+0x5],dh; add rsp,0x18; ret
0x42989d: jg 0x4298e6 <__memmove_ssse3_back+7334>; lock ret
0x46fa7a: add [rax],al; add [rbp+0x5],dh; add rsp,0x38; ret
0x40ec8b: add [rax],al; add [rax],al; add [rax-0x1],bh; ret
0x4142d1: add eax,0x28fa96; add [rax],al; add [rax],al; ret
0x46d291: jne 0x46d2c3 <dlerror_run+131>; add rsp,0x38; ret
0x42999d: jg 0x4299ee <__memmove_ssse3_back+7598>; lock ret
0x40eddd: add eax,0x294f32; add [rax],al; add [rax],al; ret
0x45403c: add [rbx-0x77],bl; rcr [rbp+0x41],1; pop rsp; ret
0x4654d4: test [rax+rax*4],ah; add [rax],al; add cl,ch; ret
0x41e3a8: jmp 0xfffffffffa07b521; xlat ds:[rbx]; ret 0xff2d
0x487902: add [rax],al; mov ebp,0xc000000f; sldt [rax]; ret
0x43b7ca: add eax,0x1f0fc3f3; add [rax-0x39],cl; ret 0xffc0
0x429cbd: jg 0x429d0e <__memmove_ssse3_back+8398>; lock ret
0x43a4d4: enter 0xe8c1,0x6; and eax,0x3fffc00; pop rbx; ret
0x41675b: ins es:[rdi],dx; add [rax],al; cmove rax,rdx; ret
0x43ef03: mov ebx,0x2e660002; nop [rax+rax*1+0x0]; repz ret
0x44232e: add [rax],al; add [rax],al; add [rax+0x1],cl; ret
0x474c76: add [rax],al; add [rbp+0xb],dh; add rsp,0x28; ret
0x416861: xor [rdx],eax; add [rax+0xf],cl; rex.RB ret 0xfc3
0x429bbd: jg 0x429c0e <__memmove_ssse3_back+8142>; lock ret
0x47028c: add al,[rax]; add [rbp+rcx*4+0x4],cl; retf 0x8b41
0x479839: jne 0x479840 <__register_frame_info+16>; repz ret
0x47787c: mov r14,[rbp-0x10]; mov r15,[rbp-0x8]; leave; ret
0x46f44f: jne 0x46f465 <_fitoa_word+117>; add rsp,0x38; ret
0x408296: mov rcx,[rax+0xa0]; mov [rcx+0x130],rdx; repz ret
0x45fb9b: push rdi; xor [rsi+0xf],ah; outs dx,ds:[rsi]; ret
0x40fb04: add [rax-0x77],ecx; xchg [rax-0xcfffff8],eax; ret
0x429a2d: jg 0x429a7e <__memmove_ssse3_back+7742>; lock ret
0x42d0d4: or al,0x8a; mov eax,[rdx+rax*4]; sub eax,ecx; ret
0x46f2f9: add al,[rax]; add [rax],al; add [rax+0x2],bh; ret
0x4604d4: add [rcx+0xc00f9],al; add [rbx+rax*1-0xd],dh; ret
0x429ebd: jg 0x429f0e <__memmove_ssse3_back+8910>; lock ret
0x43b7a1: add [rsi],dl; add [rax],al; add [rax-0x1],bh; ret
0x43c778: cmp eax,0xfffff001; jae 0x43c780 <munmap+16>; ret
0x427c19: nop [rax+0x0]; movzx edx,[rsi]; mov [rdi],dl; ret
0x45fac2: mov edx,0x48000001; bsr eax,eax; add rax,rdi; ret
0x415d02: xor [rdx],al; add [rax+0xf],cl; rex.RB ret 0x66c3
0x4105e4: adc [rax-0x77],cl; fcomp [rbx+0x5d]; pop r12; ret
0x45ff33: jne 0x45ff39 <__strnlen_sse2+9>; xor rax,rax; ret
0x46231f: test ecx,ecx; jne 0x462370 <is_dst+160>; repz ret
0x42a04d: jg 0x42a09e <__memmove_ssse3_back+9310>; lock ret
0x429f3d: jg 0x429f8e <__memmove_ssse3_back+9038>; lock ret
0x429dbd: jg 0x429e0e <__memmove_ssse3_back+8654>; lock ret
0x4753a5: cwde; add [rax],al; add [rax+0x39],cl; ret 0x9272
0x410a31: add eax,0x293336; add [rax],al; add [rax],al; ret
0x42990d: jg 0x42995e <__memmove_ssse3_back+7454>; lock ret
0x436607: movdqu XMMWORD [rdi],xmm0; mov [rdi+0xf],ecx; ret
0x41dbf8: nop [rax+rax*1+0x0]; vzeroupper; xor eax,eax; ret
0x4774ad: cmp al,0x32; or [rbp+0x1a],dh; mov rax,[rax]; ret
0x4167a7: or [rdx],eax; add [rax+0xf],cl; rex.RB ret 0xc3f3
0x432e49: ror [rax-0x3f],0xe1; and [rax+0x9],cl; retf 0xf48
0x461ebe: add [rbp+0x8],dh; movzx eax,al; add rsp,0x58; ret
0x46e4d0: or [rcx+rax*1-0x3e],cl; mov rax,rdx; pop rbx; ret
0x45e6ce: mov eax,[rdi+0x10]; sar rdx,0x2; sub eax,edx; ret
0x43d91b: cmp eax,0xfffff001; jae 0x43d923 <mremap+19>; ret
0x40f84c: add [rax],al; add [rax],al; xor eax,eax; repz ret
0x40d6c3: je 0x40d5f8 <__uflow+24>; mov eax,0xffffffff; ret
0x44232d: add [r8],r8b; add [rax],al; add [rax+0x1],cl; ret
0x416b22: sub al,[rdx]; add [rax+0xf],cl; rex.RB ret 0x66c3
0x4604d5: cmp ecx,0xc00; je 0x4604e0 <wmemset+32>; repz ret
0x432d3c: je 0x432dc0 <__strlen_sse2+256>; bsf rax,rdx; ret
0x461095: je 0x4610b0 <__wcslen_sse2+528>; add rax,0x2; ret
0x46bbf7: mov esp,ebx; mov rbx,[rsp]; add rsp,0x30; bnd ret
0x429fcd: jg 0x42a01e <__memmove_ssse3_back+9182>; lock ret
0x421a2f: nop; mov dx,WORD [rsi-0x2]; mov [rdi-0x2],dx; ret
0x416732: and [rdx],eax; add [rax+0xf],cl; rex.R ret 0x66c3
0x472cc8: add [rax],al; add [rbp+0xf],dh; add rsp,0x38; ret
0x4365d4: movdqu XMMWORD [rdi],xmm0; mov [rdi+0x10],dh; ret
0x474d18: add [rax-0x75],cl; add al,0x24; add rsp,0x38; ret
0x429e3d: jg 0x429e8e <__memmove_ssse3_back+8782>; lock ret
0x45ff18: nop [rax+rax*1+0x0]; xor eax,eax; vzeroupper; ret
0x4327ed: or rax,rdx; bsf rax,rax; lea rax,[rdi+rax*1]; ret
0x44a32e: mov rdx,0xffffffffffffffe0; mov fs:[rdx],rax; ret
0x429d3d: jg 0x429d8e <__memmove_ssse3_back+8526>; lock ret
0x402777: and al,0x80; add [rax],al; add [rax-0x39],cl; ret
0x4365e7: adc bl,dh; movq [rdi],mm0; mov [rdi+0x10],cx; ret
0x432d3d: test [rsi+0x0],bh; add [rax],al; bsf rax,rdx; ret
0x4388c3: cmp eax,ecx; sbb eax,eax; sbb eax,0xffffffff; ret
0x44795d: and al,0x88; add [rax],al; add [rax-0x77],cl; ret
0x436668: movdqu XMMWORD [rdi],xmm0; mov [rdi+0xf],rcx; ret
0x477508: add [rbp+rax*1+0x48],dh; mov [rdi+rsi*8],edx; ret
0x4365e8: movdqu XMMWORD [rdi],xmm0; mov [rdi+0x10],cx; ret
0x4783db: add [rax],al; add [rax],al; add [rax+0x2],bh; ret
0x4327ee: or eax,edx; bsf rax,rax; lea rax,[rdi+rax*1]; ret
0x46f0e8: add al,[rax]; add [rax],al; add [rax+0x1],bh; ret
0x43dc2d: add [rax],al; add [rax-0x77],cl; ja 0x43dc54; ret
0x46720e: mov [rdi+0x2ec],edx; mov [rdi+0x300],rax; repz ret
0x40569b: add [rax],al; add [rax],al; add [rax-0x7d],cl; ret
0x41f447: test [rbx+0x7],edx; add [rax],al; xor eax,eax; ret
0x427ac0: movq [rdi+0x4],mm0; movdqu XMMWORD [rdi],xmm1; ret
0x44cfcb: mov [rcx],dh; or [rax],eax; add [rcx-0x77],cl; ret
0x4620d6: lea rcx,[rsi+rcx*4]; add eax,[rcx+rdx*1]; repz ret
0x4394b3: adc [rdi+0x30],edi; movups XMMWORD [r11],xmm8; ret
0x46d326: jne 0x46d334 <__libc_dlsym+100>; add rsp,0x38; ret
0x436687: adc bl,dh; movq [rdi],mm0; mov [rdi+0x10],rcx; ret
0x479801: add eax,0x22ab7e; add [rax],eax; add [rax],al; ret
0x41f23d: test [rcx+0x9],edx; add [rax],al; xor eax,eax; ret
0x416a57: add [rax],ax; and ch,0x2; cmovne rax,rdx; repz ret
0x4370bc: add [rax],al; add [rax],al; lea rax,[rdi+0x3]; ret
0x4275f0: movq [rdi+0xf],mm0; movdqu XMMWORD [rdi],xmm1; ret
0x40fce8: cmp rax,rdx; jne 0x40fcef <top_check+79>; repz ret
0x43709c: add [rax],al; add [rax],al; lea rax,[rdi+0x1]; ret
0x490124: jo 0x490197 <__tens+5655>; mov ebp,0xfb67d10d; ret
0x42a8ed: add [rdx+0x4],esi; mov cl,[rsi]; mov [rdi],cl; ret
0x41426a: sub [rax],al; add [rax],al; add [rax],al; repz ret
0x46003c: je 0x460060 <__strnlen_sse2+304>; bsf rax,rdx; ret
0x436617: movdqu XMMWORD [rdi],xmm0; mov [rdi+0x10],ecx; ret
0x427b30: movq [rdi+0x3],mm0; movdqu XMMWORD [rdi],xmm1; ret
0x4620d7: lea ecx,[rsi+rcx*4]; add eax,[rcx+rdx*1]; repz ret
0x4276d0: movq [rdi+0xd],mm0; movdqu XMMWORD [rdi],xmm1; ret
0x436616: adc bl,dh; movq [rdi],mm0; mov [rdi+0x10],ecx; ret
0x43b744: add [rax],al; add [rbp+0x10],dh; add rsp,0x28; ret
0x40ed74: movabs al,ds:0x294f95058300294f; add [rcx],al; ret
0x40040e: je 0x400412 <_init+18>; call rax; add rsp,0x8; ret
0x415c7b: adc [rdx],eax; add [rax+0xf],cl; rex.RB ret 0xc3f3
0x427820: movq [rdi+0xa],mm0; movdqu XMMWORD [rdi],xmm1; ret
0x43672a: movq [rdi],mm0; movdqu XMMWORD [rdi+0xd],xmm2; ret
0x4660bd: stc; inc [rbp-0x597bf040]; add eax,0x83480000; ret
0x43a044: xor [r8-0x7d],cl; rol [rax+0x48],0x39; retf 0xe475
0x4169e2: sub eax,[rdx]; add [rax+0xf],cl; rex.RB ret 0x66c3
0x4383e2: rex.RXB cmc; movzx edx,[rsi-0xb]; sub eax,edx; ret
0x46de82: enter 0x894c,0x7; shl r9,cl; mov [rdi-0x8],r9; ret
0x41d6d7: jne 0x41d780 <__memchr_sse2+784>; xor eax,eax; ret
0x41de80: movzx eax,[rdi]; movzx edx,[rsi]; sub eax,edx; ret
0x4364f1: mov ecx,[rsi]; mov [rdi],cx; mov [rdi+0x2],dh; ret
0x45ff2f: add [rax-0x7b],cl; div [rbp+0x4]; xor rax,rax; ret
0x479911: add eax,0x22aa6e; add [rax],eax; add [rax],al; ret
0x45ffcc: je 0x460070 <__strnlen_sse2+320>; bsf rax,rdx; ret
0x442385: test dh,dh; mov edx,0xffffffff; cmovs eax,edx; ret
0x427900: movq [rdi+0x8],mm0; movdqu XMMWORD [rdi],xmm1; ret
0x46c2cd: or al,ch; ins es:[rdi],dx; cmp eax,0x89490000; ret
0x41d756: jbe 0x41d790 <__memchr_sse2+800>; add rax,rdi; ret
0x4383d2: rex.RXB hlt; movzx edx,[rsi-0xc]; sub eax,edx; ret
0x43942c: adc [rcx-0x30],eax; movups XMMWORD [r11],xmm4; ret
0x40de98: xor [rcx],al; add [rax],al; mov [r9+0xa8],0x0; ret
0x43712c: add [rax],al; add [rax],al; lea rax,[rdi+0xb]; ret
0x43b974: add [rax],al; add [rbp+0x42],dh; add rsp,0x58; ret
0x4277b0: movq [rdi+0xb],mm0; movdqu XMMWORD [rdi],xmm1; ret
0x461e39: add [rax],al; add [rbp+0x45],dh; add rsp,0x58; ret
0x43d948: cmp eax,0xfffff001; jae 0x43d950 <sysinfo+16>; ret
0x46f44c: add [rax],al; add [rbp+0x14],dh; add rsp,0x38; ret
0x43674a: movq [rdi],mm0; movdqu XMMWORD [rdi+0xe],xmm2; ret
0x46b781: mov eax,0xffffffc0; pop rbx; mov eax,fs:[rax]; ret
0x46d28e: add [rax],al; add [rbp+0x30],dh; add rsp,0x38; ret
0x475188: mov r8,[rax]; lea rax,[rax+0x8]; mov [r10],r8; ret
0x462ffa: sub [rcx],al; add [rax],al; add [rax-0x7d],cl; ret
0x43db53: nop [rax+rax*1+0x0]; nop [rax+rax*1+0x0]; repz ret
0x43b787: neg eax; mov fs:[rdx],eax; mov eax,0xffffffff; ret
0x417fc0: movzx ecx,[rsi]; movzx eax,[rdi]; sub eax,ecx; ret
0x40ddd0: mov [rdi+0xa0],0xffffffff; mov [rdi+0xa8],0x0; ret
0x41f32d: test [rcx+0x8],esp; add [rax],al; xor eax,eax; ret
0x46d69d: add [rax],al; add [rbp+0x12],dh; add rsp,0x38; ret
0x41f41d: test [rcx+0x7],esi; add [rax],al; xor eax,eax; ret
0x4913a5: lods eax,ds:[rsi]; mov esi,0x497b96cc; retf 0x99e0
0x488732: add [rax],al; add [rax],al; add [rax],al; ret 0x24
0x4676ae: add [rax],al; or [rdi+0x315],0x4; xor eax,eax; ret
0x43710c: add [rax],al; add [rax],al; lea rax,[rdi+0x9]; ret
0x43bbc3: add [rax],al; add [rbp+0x43],dh; add rsp,0x18; ret
0x46f1a1: enter 0x289,0xb8; add [rax],eax; add [rax],al; ret
0x40829f: xchg ecx,eax; xor [rcx],al; add [rax],al; repz ret
0x415bbb: add [rax],al; add [rax],al; add [rax+0x16],bh; ret
0x43713c: add [rax],al; add [rax],al; lea rax,[rdi+0xc]; ret
0x4331a6: jmp 0x433190 <__stpcpy_sse2+192>; mov rax,rdx; ret
0x43c7d8: cmp eax,0xfffff001; jae 0x43c7e0 <madvise+16>; ret
0x43a99e: je 0x43a9a8 <__cache_sysconf+24>; xor eax,eax; ret
0x43715c: add [rax],al; add [rax],al; lea rax,[rdi+0xe]; ret
0x413429: add [rax+rax*1],cl; add [rax],al; xor eax,eax; ret
0x43676a: movq [rdi],mm0; movdqu XMMWORD [rdi+0xf],xmm2; ret
0x427970: movq [rdi+0x7],mm0; movdqu XMMWORD [rdi],xmm1; ret
0x427a50: movq [rdi+0x5],mm0; movdqu XMMWORD [rdi],xmm1; ret
0x43711c: add [rax],al; add [rax],al; lea rax,[rdi+0xa]; ret
0x427740: movq [rdi+0xc],mm0; movdqu XMMWORD [rdi],xmm1; ret
0x40f982: push rax; or [rax-0x75],cl; adc [rcx-0x7d],al; ret
0x4364de: add [rax],al; mov dx,WORD [rsi]; mov [rdi],dx; ret
0x436f0f: test esp,ebx; add [rax],eax; add dh,dh; ret 0x7540
0x413552: fistp [rsi+0x240]; call 0x410940 <arena_get_retry>
0x439ca1: std; vmovdqu64 ZMMWORD [r11],zmm4; vzeroupper; ret
0x4370ac: add [rax],al; add [rax],al; lea rax,[rdi+0x2]; ret
0x4364c4: jmp rcx; nop cs:[rax+rax*1+0x0]; mov [rdi],dh; ret
0x477469: add [rax],al; add rax,[r8+0xd0]; add rsp,0x18; ret
0x40fce9: cmp eax,edx; jne 0x40fcef <top_check+79>; repz ret
0x46d433: add [rax],al; add [rbp+0x1c],dh; add rsp,0x48; ret
0x427b45: mov ecx,[rsi]; mov [rdi+0x1],dx; mov [rdi],cx; ret
0x436688: movdqu XMMWORD [rdi],xmm0; mov [rdi+0x10],rcx; ret
0x43bbc6: jne 0x43bc0b <fcntl_common+123>; add rsp,0x18; ret
0x41e340: movzx eax,[rdi]; movzx ecx,[rsi]; sub eax,ecx; ret
0x427c10: movq [rdi+0x1],mm0; movdqu XMMWORD [rdi],xmm1; ret
0x407f15: or [rax-0x77],cl; fucomip st,st(0); rex.X retf 0x0
0x461f80: add [rax],al; add [rbp+0x1e],dh; add rsp,0x38; ret
0x427660: movq [rdi+0xe],mm0; movdqu XMMWORD [rdi],xmm1; ret
0x439fcc: jg 0x439fd5 <__memset_sse2_unaligned_erms+53>; ret
0x410555: xchg edi,eax; add [rax],al; add [rax+0x39],cl; ret
0x41d707: jne 0x41d760 <__memchr_sse2+752>; xor eax,eax; ret
0x427ba0: movq [rdi+0x2],mm0; movdqu XMMWORD [rdi],xmm1; ret
0x43c6f7: mov fs:[rax],0x16; mov rax,0xffffffffffffffff; ret
0x4279e0: movq [rdi+0x6],mm0; movdqu XMMWORD [rdi],xmm1; ret
0x46d9f1: add ebx,eax; nop [rax+rax*1+0x0]; xor eax,eax; ret
0x46df8c: enter 0x894c,0x7; shr r9,cl; mov [rdi+0x8],r9; ret
0x4370fc: add [rax],al; add [rax],al; lea rax,[rdi+0x8]; ret
0x488c22: add [rax],al; add [rax],al; add [rax],al; ret 0x33
0x4370dc: add [rax],al; add [rax],al; lea rax,[rdi+0x5]; ret
0x4671df: nop; mov [rdi+0x2f4],ecx; mov [rdi+0x308],rax; ret
0x43c676: jne 0x43c687 <getdtablesize+71>; add rsp,0x28; ret
0x430da0: adc al,0x91; mov eax,[rcx+rax*4]; sub eax,edx; ret
0x434839: or [rax-0x77],cl; rex.X or [rax-0x77],cl; clc; ret
0x48e9b8: mov eax,0xbcbbbab9; mov ebp,0xc1c0bfbe; ret 0xc4c3
0x4370ec: add [rax],al; add [rax],al; lea rax,[rdi+0x6]; ret
0x46d0ec: add [rax],al; add [rax],al; mov rax,[rax+0x8]; ret
0x42f4cb: add al,0x81; mov edx,[rcx+rdx*4]; sub eax,edx; ret
0x464c7c: add [rax],al; add [rax],al; add [rbp-0x77],cl; ret
0x438752: test [rsi+0x1],ebp; add [rax],al; xor eax,eax; ret
0x4370cc: add [rax],al; add [rax],al; lea rax,[rdi+0x4]; ret
0x43a9ed: je 0x43a9d0 <__strcasecmp_l_nonascii+16>; repz ret
0x457287: xchg esi,esp; sbb [rax],al; add [rax-0x7d],cl; ret
0x4330c6: jmp 0x4330b0 <__strcpy_sse2+192>; mov rax,rdi; ret
0x427890: movq [rdi+0x9],mm0; movdqu XMMWORD [rdi],xmm1; ret
0x43714c: add [rax],al; add [rax],al; lea rax,[rdi+0xd]; ret
0x4370f5: nop; nop cs:[rax+rax*1+0x0]; lea rax,[rdi+0x8]; ret
0x40ecfc: add [rax],al; add [rax],al; mov rax,[rdi+0x68]; ret
0x416995: mov bh,0xe7; add [rax],al; cmovne rax,rdx; repz ret
0x47755c: add [rax],al; add [rax],al; mov [rdi+0x98],rsi; ret
0x46d436: jne 0x46d454 <__libc_dlvsym+276>; add rsp,0x48; ret
0x470030: mov eax,[rip+0x23488a] # 0x6a48c0 <_dl_clktck>; ret
0x4370a5: nop; nop cs:[rax+rax*1+0x0]; lea rax,[rdi+0x2]; ret
0x4676ad: add [rax],r8b; or [rdi+0x315],0x4; xor eax,eax; ret
0x4610ef: add [rax-0x39],cl; rol [rbx],0x0; add [rax],al; ret
0x421c6a: in al,dx; mov [rdi-0xc],rcx; mov [rdi-0x4],edx; ret
0x41d73f: add [rdi],cl; mov esp,0x448d48c0; cmp [rax],ah; ret
0x477b4c: jge 0x477b46 <_Unwind_ForcedUnwind+310>; leave; ret
0x46f4b7: mov [rip+0x234baa],rax # 0x6a4068 <static_buf>; ret
0x47252f: mov eax,0xc48348ff; and [rbx+0x5d],bl; pop r12; ret
0x43bc72: test [rdi+0x0],edi; add [rax],al; add rsp,0x68; ret
0x475113: add bl,dh; movups XMMWORD [rsp-0x28],xmm0; repz ret
0x43a045: xor [rax-0x7d],cl; rol [rax+0x48],0x39; retf 0xe475
0x4155d4: add [rax-0x73],ecx; rex.WX clc; cmovne rax,rcx; ret
0x41e2c8: movzx edx,[rsi+rcx*1]; sub eax,edx; vzeroupper; ret
0x4370d5: nop; nop cs:[rax+rax*1+0x0]; lea rax,[rdi+0x5]; ret
0x439f97: mov rdx,rdi; rep stos es:[rdi],al; mov rax,rdx; ret
0x4775bc: add [rax],al; add [rax],al; mov rax,[rdi+0xb0]; ret
0x40a064: je 0x40a08a <vasprintf+250>; cmp [rax+0x29],cl; ret
0x41817f: add al,0x8; movzx edx,[rdx+rcx*1]; sub eax,edx; ret
0x462385: add [rax+0x39],cl; dec [rax+0xf]; rex.RB ret 0x31c3
0x436011: mov eax,[rcx]; mov [rdx],ax; lea rax,[rdx+0x1]; ret
0x43d895: add [rdx+0x64],bh; test eax,eax; cmove eax,edx; ret
0x44a907: je 0x44a92d <_quicksort+461>; sbb [rax+0x1],cl; ret
0x46c8a5: mov [rbx+0x8],0x0; mov [rbx+0x10],0x0; pop rbx; ret
0x4774dc: add [rax],al; add [rax],al; mov rax,[rdi+0x90]; ret
0x460bda: test edx,edx; jne 0x460bd0 <wcschrnul+16>; repz ret
0x41d71d: add [rax],al; add [rdi],cl; mov esp,0xf80148c0; ret
0x4490e7: add [rax-0x77],cl; mov esi,0x415b0007; pop rsi; ret
0x430da1: xchg ecx,eax; mov eax,[rcx+rax*4]; sub eax,edx; ret
0x437095: nop; nop cs:[rax+rax*1+0x0]; lea rax,[rdi+0x1]; ret
0x47754b: and eax,0x1; mov [rsi],eax; mov rax,[rdi+0x98]; ret
0x45ef0f: add [rax+rax*1],al; add [rbx+0x5d],bl; pop r12; ret
0x439f98: mov edx,edi; rep stos es:[rdi],al; mov rax,rdx; ret
0x41672d: dec [rax-0x73]; add eax,0x221ab; cmove rax,rdx; ret
0x47751f: jne 0x477525 <_Unwind_SetGR+53>; mov [rax],rdx; ret
0x44a694: add [rax],al; add [rbp+0x4a],dh; add rsp,0x148; ret
0x475189: mov eax,[rax]; lea rax,[rax+0x8]; mov [r10],r8; ret
0x40ecca: test [rax],al; add [rax],al; add [rax],al; repz ret
0x4370c5: nop; nop cs:[rax+rax*1+0x0]; lea rax,[rdi+0x4]; ret
0x46f4b8: mov [rip+0x234baa],eax # 0x6a4068 <static_buf>; ret
0x40fa74: add [rax],al; add [rax],al; mov [rdi+0x60],rcx; ret
0x400a77: add eax,0x2a2863; add [rbp-0x3d],ebx; nop; repz ret
0x436550: mov rcx,[rsi]; mov [rdi+0x8],dh; mov [rdi],rcx; ret
0x43c7a8: cmp eax,0xfffff001; jae 0x43c7b0 <mprotect+16>; ret
0x43900b: adc [rdi],rdx; vmovups ZMMWORD [rsi-0x40],zmm2; ret
0x4370b5: nop; nop cs:[rax+rax*1+0x0]; lea rax,[rdi+0x3]; ret
0x455d08: add [rax],al; add [rcx+0x415d5bd0],cl; pop rsp; ret
0x47756c: add [rax],al; add [rax],al; mov rax,[rdi+0xa0]; ret
0x437125: nop; nop cs:[rax+rax*1+0x0]; lea rax,[rdi+0xb]; ret
0x477efc: mov edi,0x1; jmp rax; nop [rax+rax*1+0x0]; repz ret
0x437105: nop; nop cs:[rax+rax*1+0x0]; lea rax,[rdi+0x9]; ret
0x46f1b6: cmp ecx,0xe8747fff; mov [rdx],0x0; mov eax,0x1; ret
0x458003: inc [rbx+rcx*4-0x63]; idiv rdi; dec [rax-0x77]; ret
0x45fb52: add [rax],al; bsr rsi,rsi; lea rax,[rdi+rsi*1]; ret
0x460be3: jne 0x460be9 <__wcsnlen_sse4_1+9>; xor rax,rax; ret
0x4774b0: jne 0x4774cc <_Unwind_GetGR+60>; mov rax,[rax]; ret
0x46111f: add [rax-0x39],cl; rol [rsi],0x0; add [rax],al; ret
0x4383c2: rex.RXB; repz movzx edx,[rsi-0xd]; sub eax,edx; ret
0x436551: mov ecx,[rsi]; mov [rdi+0x8],dh; mov [rdi],rcx; ret
0x43bda9: add [rbx+0x480c2444],cl; add esp,0x10; pop rbx; ret
0x47757c: add [rax],al; add [rax],al; mov rax,[rdi+0xb8]; ret
0x46112f: add [rax-0x39],cl; rol [rdi],0x0; add [rax],al; ret
0x47aa1e: loope 0x47aa7b <free_mem+43>; pop rbp; pop r12; ret
0x437115: nop; nop cs:[rax+rax*1+0x0]; lea rax,[rdi+0xa]; ret
0x4610cf: add [rax-0x39],cl; rol [rcx],0x0; add [rax],al; ret
0x43900c: adc [rdi],edx; vmovups ZMMWORD [rsi-0x40],zmm2; ret
0x41d72f: add [rdi],cl; mov esp,0x448d48c0; cmp [rax],dl; ret
0x437155: nop; nop cs:[rax+rax*1+0x0]; lea rax,[rdi+0xe]; ret
0x437145: nop; nop cs:[rax+rax*1+0x0]; lea rax,[rdi+0xd]; ret
0x46bbf8: fmul [rax-0x75]; sbb al,0x24; add rsp,0x30; bnd ret
0x4775cc: add [rax],al; add [rax],al; mov rax,[rdi+0xa8]; ret
0x45e80f: add [rax-0x75],cl; rex.RXB; mov rax,[rax+0x4c]; ret
0x46def7: mov [rdi-0x8],r8; shl r9,cl; mov [rdi-0x10],r9; ret
0x41dea5: ror [rax-0x2d],0xfa; movzx edx,dl; sub eax,edx; ret
0x461fcc: ror [rax+0x39],0xd7; ja 0x461ff8 <brk+72>; repz ret
0x416a58: add [rax],eax; and ch,0x2; cmovne rax,rdx; repz ret
0x417fa6: or al,0x16; movzx eax,[rdi+rdx*1]; sub eax,ecx; ret
0x43678a: movq [rdi],mm0; movdqu XMMWORD [rdi+0x10],xmm2; ret
0x40ec8c: add [rax],al; add [rax],al; mov eax,0xffffffff; ret
0x438e08: ror [rax-0x1],0xc0; add rsp,0x100; sub rax,rdx; ret
0x4348f5: add cl,[rbx+0x42890841]; or [rax-0x77],cl; clc; ret
0x409ab7: or [rax],eax; add [rax],al; mov eax,0xffffffff; ret
0x41c5f6: add al,0xf; movzx edx,[rsi+rcx*1]; sub eax,edx; ret
0x46b765: add [rbx+0x236a7b0d],al; add [rcx],al; pop rbx; ret
0x4752ac: add [rax],al; add [rax],al; mov rax,[rsi+0xa8]; ret
0x40df29: jne 0x40df50 <_IO_default_finish+112>; pop rbx; ret
0x49bf45: cmp [rbx+0x2030d07],al; movs es:[rdi],ds:[rsi]; ret
0x436b01: mov edx,[rsi]; mov [rdi],dx; lea rax,[rdi+0x1]; ret
0x407cc1: add [rcx+0x480975f0],cl; add esp,0xd0; pop rbx; ret
0x462380: add [rdx+0x0],edi; cmp rsi,rdi; cmovne rax,rdx; ret
0x46e007: mov [rdi+0x8],r8; shr r9,cl; mov [rdi+0x10],r9; ret
0x436510: mov ecx,[rsi]; mov [rdi+0x4],dh; mov [rdi],ecx; ret
0x4610df: add [rax-0x39],cl; rol [rdx],0x0; add [rax],al; ret
0x415c3f: cmp eax,0xffffffff; cmove rax,rdx; add rsp,0x8; ret
0x437135: nop; nop cs:[rax+rax*1+0x0]; lea rax,[rdi+0xc]; ret
0x4004c7: nop; jmp [rip+0x2a0bfa] # 0x6a10c8; xchg ax,ax; ret
0x43dc2c: add [rax],al; add [rax],al; mov [rdi+0x20],rsi; ret
0x4370e5: nop; nop cs:[rax+rax*1+0x0]; lea rax,[rdi+0x6]; ret
0x40f80a: div bh; ror [rax+0x48417411],cl; mov [rsi],ecx; ret
0x427754: mov rcx,[rsi]; mov [rdi+0x4],rdx; mov [rdi],rcx; ret
0x427835: mov ecx,[rsi]; mov [rdi+0x2],rdx; mov [rdi],rcx; ret
0x436b70: mov rdx,[rsi]; mov [rdi],rdx; lea rax,[rdi+0x7]; ret
0x4658d1: sldt [rax]; add [rax-0x77],cl; fucomip st,st(0); ret
0x477eff: add [rax],al; jmp rax; nop [rax+rax*1+0x0]; repz ret
0x43c608: test eax,eax; je 0x43c60e <getpagesize+14>; repz ret
0x4383b2: rex.RXB; repnz movzx edx,[rsi-0xe]; sub eax,edx; ret
0x418011: add al,0x17; movzx edx,[rsi+rdx*1]; sub eax,edx; ret
0x41f162: test [rdx+rcx*1],ebp; add [rax],al; xor eax,eax; ret
0x434894: mov al,[rcx+0x4]; mov [rdx+0x4],al; mov rax,rdi; ret
0x43a48b: call 0xfffffffffc43c99e; add eax,[rax]; pop rbx; ret
0x40f671: mov [rip+0x2921b8],rdx # 0x6a1830 <mp_+80>; repz ret
0x40d429: mov [rbx+0x58],0x0; mov [rbx+0x50],0x0; pop rbx; ret
0x4610c4: xchg ax,ax; nop cs:[rax+rax*1+0x0]; mov rax,0x1; ret
0x43b9cf: cmp eax,0xfffff000; ja 0x43ba30 <read+112>; repz ret
0x472ea8: cmp eax,0xfffff001; jae 0x472eb0 <setitimer+16>; ret
0x409402: cli; add cl,[rax+0xf]; scas eax,es:[rdi]; ret 0x2948
0x43ee8f: add [rbx+0x265a7a05],cl; add [rbp-0xcf98b40],al; ret
0x460bac: xor [rax],al; add [rax],al; cmovne rax,rdx; repz ret
0x43b6f8: fsub [rcx+rcx*4+0x1]; or rax,0xffffffffffffffff; ret
0x447d01: mov eax,[rip+0x25c171] # 0x6a3e78 <gconv_cache>; ret
0x4386a4: jne 0x4388b0 <__memcmp_ssse3+5952>; xor eax,eax; ret
0x46f2f3: nop [rax+rax*1+0x0]; mov [rdx],0x0; mov eax,0x2; ret
0x48972a: add [rax],eax; add [rax],al; add [rax],al; ret 0x1d4
0x4216ca: out dx,eax; mov [rdi-0x9],r8; mov [rdi-0x4],edx; ret
0x46def8: mov [rdi-0x8],eax; shl r9,cl; mov [rdi-0x10],r9; ret
0x4136f1: rex.RX or [rax-0x75],r9b; or [r11+0x94807e0],al; ret
0x40a4e8: nop [rax+rax*1+0x0]; mov [rdi],0x0; mov rax,rdi; ret
0x4276e4: mov rcx,[rsi]; mov [rdi+0x5],rdx; mov [rdi],rcx; ret
0x447d00: mov rax,[rip+0x25c171] # 0x6a3e78 <gconv_cache>; ret
0x46f1da: mov [r8],rax; mov [rdx],0xffffc002; mov eax,0x1; ret
0x4279f3: mov ecx,[rsi]; mov [rdi+0x2],edx; mov [rdi],ecx; ret
0x435f90: mov rax,[rcx]; mov [rdx],rax; lea rax,[rdx+0x7]; ret
0x427605: mov ecx,[rsi]; mov [rdi+0x7],rdx; mov [rdi],rcx; ret
0x474965: sbb eax,0x8948ffff; add ebx,[rax+0x5a]; pop rbx; ret
0x456146: add [rax],al; mov eax,0xffffffff; mov [rdi],rsi; ret
0x4604d6: stc; add [rax+rax*1],cl; add [rbx+rax*1-0xd],dh; ret
0x46fc1d: add [rax-0x73],cl; add eax,0x5b; cmovne rax,rdx; ret
0x434876: mov al,[rcx+0x2]; mov [rdx+0x2],al; mov rax,rdi; ret
0x415c7a: rcl [rcx],cl; add al,[rax]; cmovne rax,rdx; repz ret
0x4278a4: mov rcx,[rsi]; mov [rdi+0x1],rdx; mov [rdi],rcx; ret
0x436728: or eax,0x77f0ff3; movdqu XMMWORD [rdi+0xd],xmm2; ret
0x4279f1: push rsi; add cl,[rbx+0x257890e]; mov [rdi],ecx; ret
0x436b20: mov edx,[rsi]; mov [rdi],edx; lea rax,[rdi+0x3]; ret
0x42189a: out dx,al; mov [rdi-0xa],rcx; mov [rdi-0x4],edx; ret
0x46d8d2: add [rcx+0x481e75d8],cl; add esp,0x110; pop rbx; ret
0x479901: sub [rbx+0x22aa8005],cl; add [rbp-0xcfb8b40],al; ret
0x45642f: test [rax],eax; add [rax],al; add [rax+0x29],cl; ret
0x460486: add [rax-0x73],cl; add eax,0xa12; cmove rax,rdx; ret
0x45ff17: nop cs:[rax+rax*1+0x0]; xor eax,eax; vzeroupper; ret
0x40f5a2: mov [rip+0x292268],0x1 # 0x6a1814 <mp_+52>; repz ret
0x40c053: jne 0x40c060 <_IO_new_do_write+16>; xor eax,eax; ret
0x451684: rol [rcx-0x9],cl; lock add r9d,eax; mov eax,r9d; ret
0x438392: rex.RXB; lock movzx edx,[rsi-0x10]; sub eax,edx; ret
0x43a4d2: dec [rcx+0x6e8c1c8]; and eax,0x3fffc00; pop rbx; ret
0x4044a1: add [rbp-0x7c],al; ror [rax+0xf],0x44; shr cl,1; ret
0x427755: mov ecx,[rsi]; mov [rdi+0x4],rdx; mov [rdi],rcx; ret
0x43bd72: cmp eax,0xfffff000; ja 0x43bdb8 <close+88>; repz ret
0x41dc43: rol [rbp-0x3a378a40],0xfd; xlat ds:[rbx]; ret 0xc085
0x44a329: jmp [rax+rcx*2-0x77]; adc [rax-0x39],ecx; ret 0xffe0
0x445ae5: test [rsi],edx; add al,[rax]; add [rax+0x39],cl; ret
0x40f5a6: sub [rax],eax; add [rax],eax; add [rax],al; repz ret
0x427675: mov ecx,[rsi]; mov [rdi+0x6],rdx; mov [rdi],rcx; ret
0x47984d: add [rax],al; add [rbx+0x75c08507],cl; or dh,bl; ret
0x436b71: mov edx,[rsi]; mov [rdi],rdx; lea rax,[rdi+0x7]; ret
0x40ec78: nop [rax+rax*1+0x0]; mov rax,0xffffffffffffffff; ret
0x41675a: adc ch,[rbp+0x0]; add [rax+0xf],cl; rex.R ret 0x66c3
0x4276e5: mov ecx,[rsi]; mov [rdi+0x5],rdx; mov [rdi],rcx; ret
0x4277c5: mov ecx,[rsi]; mov [rdi+0x3],rdx; mov [rdi],rcx; ret
0x41f896: test [rbx+rax*1],eax; add [rax],al; xor eax,eax; ret
0x4797f1: sub [rbx+0x22ab9005],cl; add [rbp-0xcfb8b40],al; ret
0x4278a5: mov ecx,[rsi]; mov [rdi+0x1],rdx; mov [rdi],rcx; ret
0x43b747: jne 0x43b759 <__get_child_max+73>; add rsp,0x28; ret
0x45e05a: call 0x45db50 <_IO_wsetb>; mov eax,0x1; pop rbx; ret
0x456234: rcr [rbx+0x4c],0x89; enter 0x415d,0x5c; pop r13; ret
0x427a63: mov ecx,[rsi]; mov [rdi+0x1],edx; mov [rdi],ecx; ret
0x4383a2: rex.RXB icebp; movzx edx,[rsi-0xf]; sub eax,edx; ret
0x427604: mov rcx,[rsi]; mov [rdi+0x7],rdx; mov [rdi],rcx; ret
0x438751: jne 0x4388c5 <__memcmp_ssse3+5973>; xor eax,eax; ret
0x436595: push rsi; add eax,0x480f8948; mov [rdi+0x5],edx; ret
0x40ea14: or ebp,[rbx]; push rax; sbb [rbx-0x2fd6efb9],cl; ret
0x4009c7: add al,0x0; add ah,dh; nop [rax+rax*1+0x0]; repz ret
0x4388c2: add bh,[rcx]; enter 0xc019,0x83; fdivr st,st(7); ret
0x427834: mov rcx,[rsi]; mov [rdi+0x2],rdx; mov [rdi],rcx; ret
0x4277c4: mov rcx,[rsi]; mov [rdi+0x3],rdx; mov [rdi],rcx; ret
0x46e008: mov [rdi+0x8],eax; shr r9,cl; mov [rdi+0x10],r9; ret
0x45e142: mov [rax+0x50],0x0; mov [rax+0x48],0x0; pop rbx; ret
0x435f91: mov eax,[rcx]; mov [rdx],rax; lea rax,[rdx+0x7]; ret
0x40f672: mov [rip+0x2921b8],edx # 0x6a1830 <mp_+80>; repz ret
0x489ec2: add [rax],eax; add [rax],al; add [rax],al; ret 0x1d5
0x434875: add cl,[rdx+0x42880241]; add cl,[rax-0x77]; clc; ret
0x432a93: rol [rbp-0x3a678a40],0xfd; xlat ds:[rbx]; ret 0xc085
0x4775b5: nop; nop cs:[rax+rax*1+0x0]; mov rax,[rdi+0xb0]; ret
0x427674: mov rcx,[rsi]; mov [rdi+0x6],rdx; mov [rdi],rcx; ret
0x472bd7: add [rbx+rcx*4+0x57],cl; or [rcx+0x1],cl; ret 0x894c
0x436ec4: xchg ax,ax; nop cs:[rax+rax*1+0x0]; xor rax,rax; ret
0x45f126: add [rax-0x73],cl; add eax,0xe02; cmove rax,rdx; ret
0x427983: mov ecx,[rsi]; mov [rdi+0x3],edx; mov [rdi],ecx; ret
0x4217c6: out dx,eax; mov [rdi-0x9],rcx; mov [rdi-0x1],dl; ret
0x47a61d: jmp 0x43c770 <munmap>; nop [rax+rax*1+0x0]; repz ret
0x41dbf7: nop cs:[rax+rax*1+0x0]; vzeroupper; xor eax,eax; ret
0x43c607: test rax,rax; je 0x43c60e <getpagesize+14>; repz ret
0x46d0fe: add [rax],al; mov rax,[rax+0x8]; sub rax,fs:0x0; ret
0x45f156: add [rax-0x73],cl; add eax,0x912; cmove rax,rdx; ret
0x4774d5: nop; nop cs:[rax+rax*1+0x0]; mov rax,[rdi+0x90]; ret
0x442384: test sil,sil; mov edx,0xffffffff; cmovs eax,edx; ret
0x421a7a: in eax,dx; mov [rdi-0xb],rcx; mov [rdi-0x4],edx; ret
0x436040: mov eax,[rcx]; mov [rdx],eax; lea rax,[rdx+0x3]; ret
0x43904f: add dh,[rdx+0x8]; mov [rdi],cx; mov [rsi-0x2],cx; ret
0x40f5f3: mov [rip+0x29479b],eax # 0x6a3d94 <perturb_byte>; ret
0x439645: cmp esi,[rdx+0x5]; movzx ecx,[rsi]; mov [rdi],cl; ret
0x477882: jge 0x47787c <_Unwind_RaiseException+380>; leave; ret
0x427a61: push rsi; add [rbx+0x157890e],ecx; mov [rdi],ecx; ret
0x438f47: movsxd ecx,ecx; lea rax,[rdi+rcx*1]; sub rax,rsi; ret
0x43b977: jne 0x43b9bb <__open_nocancel+155>; add rsp,0x58; ret
0x46f49b: add [rax-0x77],cl; add eax,0x234bc5; add rsp,0x8; ret
0x427981: push rsi; add ecx,[rbx+0x357890e]; mov [rdi],ecx; ret
0x477faa: add [rax],al; add [rdi+0x2],dh; sbb eax,eax; repz ret
0x469f45: call 0x469870 <_dl_debug_vdprintf>; add rsp,0xd8; ret
0x41f189: jne 0x41fb9f <__memcmp_sse4_1+5647>; xor eax,eax; ret
0x43a1ff: mov [rdi+rdx*1-0x2],cx; mov [rdi],cx; vzeroupper; ret
0x43a487: add [rcx+0xee8c1c8],cl; and eax,0x3fc00; pop rbx; ret
0x46de57: loope 0x46dea5 <__mpn_lshift+165>; mov [rdi],ecx; ret
0x40a63e: mov [rbx+0xd8],ecx; mov [rdx+0x130],rdi; pop rbx; ret
0x4951cf: add [rsi+rcx*1+0x30],ecx; add ch,[rsi+rcx*1+0x8]; ret
0x43a587: jg 0x43a580 <handle_amd+400>; icebp; mov eax,eax; ret
0x40dcf6: add [rax-0x75],cl; rex push 0x75c08548; lock repz ret
0x43ee81: lea eax,[rip+0x263479] # 0x6a2300 <_dl_main_map>; ret
0x40f80f: je 0x40f852 <mem2chunk_check+290>; mov [rsi],rcx; ret
0x49b9d0: add [rbp+0xe],ch; adc [rbx+0x80e5802],al; rex.WXB ret
0x40bb33: add [rax],al; add [rax-0x77],cl; call 0x5c821898; ret
0x436ae8: nop [rax+rax*1+0x0]; mov [rdi],dh; lea rax,[rdi]; ret
0x4774c3: fadd [rax]; add [rax],al; add [rbx+rbx*8-0xd],dh; ret
0x46d52c: dec [rax-0x77]; rex.XB adc [r8+0x5a],bl; pop rbx; ret
0x406266: test dl,dl; jne 0x406243 <__hash_string+19>; repz ret
0x40eddf: rex.WRXB sub [r8],r8; add [rax],al; add [rax],al; ret
0x40ece1: mov eax,[rip+0x292439] # 0x6a1120 <_IO_list_all>; ret
0x4490fa: lea edi,[rax+0x1]; mov [rax],0x2f; mov [rdi],0x0; ret
0x40639f: jne 0x4063be <raise+318>; add rsp,0x110; pop rbx; ret
0x43db52: nop cs:[rax+rax*1+0x0]; nop [rax+rax*1+0x0]; repz ret
0x40ec86: inc ebx; nop [rax+rax*1+0x0]; mov eax,0xffffffff; ret
0x46f087: add [rbx+rcx*4+0x57],cl; or [rcx+0x29],cl; ret 0x894c
0x416b46: add [rax-0x73],cl; add eax,0x6c52; cmove rax,rdx; ret
0x42a8df: mov ecx,[rcx-0x2]; mov [rdi],si; mov [r9-0x2],cx; ret
0x4600e5: fimul [rax+0xf]; mov esp,0xd00148d2; sub rax,rdi; ret
0x44850f: add [rbp-0x7cf78140],al; call 0x8880e1b; pop rbx; ret
0x46f27f: inc [rcx+rbp*1-0x40]; mov [rdx],eax; mov eax,0x2; ret
0x43b776: cmp eax,0xfffff000; ja 0x43b780 <_xstat+32>; repz ret
0x4348b3: add cl,[rbx+0x42890341]; add ecx,[rax-0x77]; clc; ret
0x427399: rex.RXB in al,dx; movdqu XMMWORD [rdi-0x10],xmm1; ret
0x499d32: add eax,[rsi+0xe]; and [rsi+rcx*1+0x18],bh; rex.R ret
0x41f161: jne 0x41fb93 <__memcmp_sse4_1+5635>; xor eax,eax; ret
0x40ea7d: add eax,esi; mov [rdx+0x8],rax; xor eax,eax; repz ret
0x421712: out dx,eax; mov [rdi-0x9],rcx; mov [rdi-0x4],edx; ret
0x4776e6: add [rcx],dh; rcr [rbx+0x5d],0xc3; nop [rax+0x0]; ret
0x40ece0: mov rax,[rip+0x292439] # 0x6a1120 <_IO_list_all>; ret
0x4348a5: mov eax,[rcx+0x4]; mov [rdx+0x4],ax; mov rax,rdi; ret
0x40fb03: call 0xffffffff87ca4309; or [rax],0x0; add bl,dh; ret
0x43a523: lea eax,[rdx+rdx*1]; pop rbx; and eax,0x7ff80000; ret
0x45fc55: cmovne esi,edx; bsr rsi,rsi; lea rax,[rcx+rsi*1]; ret
0x49011f: movabs eax,ds:0xdbd7170d7733db8; shl [rdi-0x5],1; ret
0x41414c: jne 0x414110 <__malloc_fork_lock_parent+96>; repz ret
0x416756: add [rax-0x73],cl; add eax,0x6d12; cmove rax,rdx; ret
0x448495: and eax,0x6740000; jmp 0x414960 <free>; nop; repz ret
0x40bb31: adc [rax+0x48000000],0xffffff89; call 0x5c821898; ret
0x48f778: fldcw [rbp+rcx*8+0x4d]; push rax; and ebx,[rbx]; iret
0x43bd47: jne 0x43bd4e <__fcntl_nocancel+78>; add rsp,0x58; ret
0x4490f9: lea rdi,[rax+0x1]; mov [rax],0x2f; mov [rdi],0x0; ret
0x40edbd: add al,ch; sbb eax,0x480002ec; add esp,0x80; repz ret
0x40e9e0: lea rdx,[rax+0x60]; mov rax,[rdi]; mov [rdx],rax; ret
0x438f46: movsxd rcx,ecx; lea rax,[rdi+rcx*1]; sub rax,rsi; ret
0x45166e: rol [rcx+rdi*1-0x39],0x77; fadd [rcx+rcx*4-0x38]; ret
0x46adef: add [rax-0x77],cl; add eax,0x2395b9; add rsp,0x8; ret
0x4057e6: pop rbx; jmp 0x414960 <free>; nop [rax+0x0]; repz ret
0x496dc8: add [rcx+0xe],ah; adc [rbx+0x80e6402],al; rex.WXB ret
0x43ee80: lea rax,[rip+0x263479] # 0x6a2300 <_dl_main_map>; ret
0x426d78: lock rex.RX; lock movdqu XMMWORD [rdi-0x10],xmm0; ret
0x490286: int 0xdd; je 0x49024f <__tens+5839>; xor al,0xd8; ret
0x46d0e6: or bl,al; nop [rax+rax*1+0x0]; mov rax,[rax+0x8]; ret
0x4167c0: add [rax],al; je 0x41678a <memcmp_ifunc+26>; repz ret
0x40ea7c: add rax,rsi; mov [rdx+0x8],rax; xor eax,eax; repz ret
0x40e9e1: lea edx,[rax+0x60]; mov rax,[rdi]; mov [rdx],rax; ret
0x40a63d: mov [rbx+0xd8],rcx; mov [rdx+0x130],rdi; pop rbx; ret
0x416a55: adc eax,0x166b6; and ch,0x2; cmovne rax,rdx; repz ret
0x45fc54: cmovne rsi,rdx; bsr rsi,rsi; lea rax,[rcx+rsi*1]; ret
0x46a29d: fadd [rbx+rbx*8-0x3fbbf0b4]; mov rax,r8; pop rbx; ret
0x43baa2: cmp eax,0xfffff000; ja 0x43bb00 <write+112>; repz ret
0x46f1db: mov [rax],eax; mov [rdx],0xffffc002; mov eax,0x1; ret
0x45fbd5: xlat ds:[rbx]; shl [rsi+0xf],1; outs dx,ds:[rsi]; ret
0x465eb7: sub [rax-0x3f],cl; clc; add dl,[rax-0x77]; ret 0xc389
0x40d593: je 0x40d4c8 <__underflow+24>; mov eax,0xffffffff; ret
0x427bae: add [rax],al; movzx edx,WORD [rsi]; mov [rdi],dx; ret
0x456145: add [rax],r8b; mov eax,0xffffffff; mov [rdi],rsi; ret
0x4614b2: add [rcx+rcx*4-0x40],cl; shr rax,0x2; vzeroupper; ret
0x41f93e: out dx,eax; shl [rsi+0xf],1; cmp [rdi],dl; ret 0x830f
0x43ba38: fsub [rcx+rcx*4+0x2]; mov rax,0xffffffffffffffff; ret
0x43653b: nop [rax+rax*1+0x0]; mov rdx,[rsi]; mov [rdi],rdx; ret
0x40f60a: add [rax],al; add [rax-0x77],cl; add eax,0x2921cc; ret
0x43ef02: mov bh,[rbx+0x2e660002]; nop [rax+rax*1+0x0]; repz ret
0x436b13: mov [rdi],cx; mov [rdi+0x2],dh; lea rax,[rdi+0x2]; ret
0x4364f0: mov cx,WORD [rsi]; mov [rdi],cx; mov [rdi+0x2],dh; ret
0x414463: sbb [rcx],dh; ror [rax-0x77],cl; rcr [rbx+0x5d],1; ret
0x41826d: loop 0x4182a0 <__strcmp_ssse3+32>; shr [rcx],0xc8; ret
0x439733: vmovdqu YMMWORD [rdi+rdx*1-0x40],ymm3; vzeroupper; ret
0x45fea1: bsr eax,eax; lea rax,[rdi+rax*1-0x20]; vzeroupper; ret
0x436dfd: movdqu XMMWORD [rdi+0xe],xmm2; lea rax,[rdi+0x1d]; ret
0x4364fb: nop [rax+rax*1+0x0]; mov edx,[rsi]; mov [rdi],edx; ret
0x4348d6: mov eax,[rcx+0x6]; mov [rdx+0x6],eax; mov rax,rdi; ret
0x414267: add eax,0x28fb10; add [rax],al; add [rax],al; repz ret
0x432a5a: and [rax+0x3a],al; xor [rax+0xf],cl; rex.RB ret 0xf8c5
0x426f26: rex.WRX clc; mov [rdi-0xd],rdx; mov [rdi-0x8],rcx; ret
0x426fb5: rex.WRX cld; mov [rdi-0xc],rdx; mov [rdi-0x4],ecx; ret
0x4348a6: rex.B add al,0x66; mov [rdx+0x4],eax; mov rax,rdi; ret
0x434837: mov eax,[rcx+0x8]; mov [rdx+0x8],rax; mov rax,rdi; ret
0x43e1df: lea edi,[rcx+rax*1+0x20]; jmp rdx; nop [rax]; repz ret
0x477b45: call 0xfffffffff0bd0696; mov r15,[rbp-0x8]; leave; ret
0x434893: add cl,[rdx+0x42880441]; add al,0x48; mov eax,edi; ret
0x40e0a3: nop [rax+rax*1+0x0]; sub r8,rcx; lea eax,[r8-0x1]; ret
0x427419: rex.RXB in eax,dx; movdqu XMMWORD [rdi-0x10],xmm1; ret
0x4602fd: add [rax],al; add [rcx+rcx*4-0x40],cl; vzeroupper; ret
0x43b7c4: cmp eax,0xfffff000; ja 0x43b7d0 <_fxstat+32>; repz ret
0x427135: rex.WRX cld; mov [rdi-0x9],rdx; mov [rdi-0x4],ecx; ret
0x4757bc: add [rax],al; add [rax-0x77],cl; fucomip st,st(1); ret
0x4348c6: mov eax,[rcx+0x5]; mov [rdx+0x5],eax; mov rax,rdi; ret
0x402773: dec [rcx-0x73]; mov esp,0x8024; add [rax-0x39],cl; ret
0x43d894: add es:[rdx+0x64],bh; test eax,eax; cmove eax,edx; ret
0x49a5db: adc [rbx+0xe0a5802],al; or [rdi+0xb],al; push rsp; ret
0x4348b4: mov eax,[rcx+0x3]; mov [rdx+0x3],eax; mov rax,rdi; ret
0x427ba9: nop [rax+0x0]; movzx edx,WORD [rsi]; mov [rdi],dx; ret
0x4395c5: vmovdqu YMMWORD [rdi+rdx*1-0x20],ymm1; vzeroupper; ret
0x408299: movabs al,ds:0x130918948000000; add [rax],al; repz ret
0x439705: vmovdqu YMMWORD [rdi+rdx*1-0x80],ymm7; vzeroupper; ret
0x415d76: add [rax-0x73],cl; add eax,0x1cf42; cmove rax,rdx; ret
0x437084: xchg ax,ax; nop cs:[rax+rax*1+0x0]; lea rax,[rdi]; ret
0x42a80f: adc [rcx-0x2],esi; vmovups ZMMWORD [r9-0x40],zmm7; ret
0x436056: add al,0x88; rex.X add al,0x48; lea eax,[rdx+0x4]; ret
0x43ee7d: add [rax],al; add [rax-0x73],cl; add eax,0x263479; ret
0x46c971: rol bl,1; nop [rax+rax*1+0x0]; mov eax,0xffffffff; ret
0x426e96: rex.WRX clc; mov [rdi-0xe],rdx; mov [rdi-0x8],rcx; ret
0x438efb: add cl,[rdi]; xchg edx,eax; ror [rdi],0x94; ret 0xc085
0x434895: rex.B add al,0x88; rex.X add al,0x48; mov eax,edi; ret
0x40f5da: add [rax],al; add [rax-0x77],cl; add eax,0x292204; ret
0x461831: mov eax,0xffffffc0; mov fs:[rax],0x2; xor eax,eax; ret
0x436067: add al,0x66; mov [rdx+0x4],eax; lea rax,[rdx+0x5]; ret
0x40fa6f: add al,0x2; mov [rdi+0x8],0x0; mov [rdi+0x60],rcx; ret
0x4274a9: rex.RXB out dx,al; movdqu XMMWORD [rdi-0x10],xmm1; ret
0x434947: mov eax,[rcx+0x7]; mov [rdx+0x7],rax; mov rax,rdi; ret
0x427035: rex.WRX cld; mov [rdi-0xb],rdx; mov [rdi-0x4],ecx; ret
0x4783d4: jne 0x4783f0 <size_of_encoded_value.part+48>; repz ret
0x434946: mov rax,[rcx+0x7]; mov [rdx+0x7],rax; mov rax,rdi; ret
0x442c81: and al,0x98; add [rax],al; add [rax+0xf],cl; rex.R ret
0x4348f6: mov eax,[rcx+0x8]; mov [rdx+0x8],eax; mov rax,rdi; ret
0x461c36: cmp eax,0xfffff000; ja 0x461c40 <_lxstat+32>; repz ret
0x434926: mov rax,[rcx+0x6]; mov [rdx+0x6],rax; mov rax,rdi; ret
0x4913a8: xchg esi,eax; jnp 0x4913f4 <__tens+10356>; retf 0x99e0
0x40ed03: push 0x2e6690c3; nop [rax+rax*1+0x0]; mov rax,rdi; ret
0x460622: add [rax],al; add [rax-0x77],cl; fucomip st,st(0); ret
0x42a84b: adc [rcx-0x2],edx; vmovups ZMMWORD [r9-0x40],zmm3; ret
0x439312: mov bh,0x36; mov [rdi+rdx*1-0x2],cx; mov [rdi],si; ret
0x421ff4: rex.WRX cld; mov [rdi-0x5],edx; mov [rdi-0x4],ecx; ret
0x436e1d: movdqu XMMWORD [rdi+0xf],xmm2; lea rax,[rdi+0x1e]; ret
0x434907: mov eax,[rcx+0x5]; mov [rdx+0x5],rax; mov rax,rdi; ret
0x40ecdd: add [rax],al; add [rax-0x75],cl; add eax,0x292439; ret
0x4389d0: leave; jne 0x4389c0 <__strstr_sse2_unaligned+224>; ret
0x43a200: mov [rdi+rdx*1-0x2],ecx; mov [rdi],cx; vzeroupper; ret
0x447b45: mov bh,0x6e; or [rcx],dh; ror [rcx+0x1e3d8bc5],cl; ret
0x4484c5: inc [rbx]; je 0x4484d0 <do_release_shlib+16>; repz ret
0x4221f4: rex.WRX cld; mov [rdi-0x6],edx; mov [rdi-0x4],ecx; ret
0x434836: mov rax,[rcx+0x8]; mov [rdx+0x8],rax; mov rax,rdi; ret
0x434927: mov eax,[rcx+0x6]; mov [rdx+0x6],rax; mov rax,rdi; ret
0x40ee56: adc [rcx],esi; rol [rbx-0x6af00002],0xc0; neg eax; ret
0x42a84a: adc [rcx-0x2],rdx; vmovups ZMMWORD [r9-0x40],zmm3; ret
0x434906: mov rax,[rcx+0x5]; mov [rdx+0x5],rax; mov rax,rdi; ret
0x408298: mov [rax+0x48000000],ah; mov [rcx+0x130],edx; repz ret
0x42a80e: adc [rcx-0x2],rsi; vmovups ZMMWORD [r9-0x40],zmm7; ret
0x416b76: add [rax-0x73],cl; add eax,0x1bb12; cmove rax,rdx; ret
0x427b44: mov cx,WORD [rsi]; mov [rdi+0x1],dx; mov [rdi],cx; ret
0x405a59: in al,0x74; mov esp,0x24448b48; sub [rax-0x7d],cl; ret
0x436f3e: outs dx,ds:[rsi]; add [rax],eax; add dh,dh; ret 0x7504
0x416a11: rex.WXB fild [r9]; add [rax+0xf],cl; rex.RB ret 0xc3f3
0x43a14b: vmovdqu YMMWORD [rdi+rdx*1-0x40],ymm0; vzeroupper; ret
0x413421: mov eax,0xffffffc0; mov fs:[rax],0xc; xor eax,eax; ret
0x436ddd: movdqu XMMWORD [rdi+0xd],xmm2; lea rax,[rdi+0x1c]; ret
0x4779ff: mov edi,[rbp-0x8]; mov rbp,[rbp+0x0]; mov rsp,rcx; ret
0x4082f0: lods al,ds:[rsi]; add [rax],al; add [rax-0x77],cl; ret
0x438f05: fimul [rax+0x63]; ror [rax+0x1],0xf8; sub rax,rsi; ret
0x43bb68: cmp eax,0xfffff000; ja 0x43bb78 <lseek64+24>; repz ret
0x42ad1a: jg 0x42ad14 <__memmove_avx512_no_vzeroupper+1428>; ret
0x4779fe: mov r15,[rbp-0x8]; mov rbp,[rbp+0x0]; mov rsp,rcx; ret
0x46d0bd: clc; std; jbe 0x46d0c8 <_dl_unload_cache+24>; repz ret
0x42a817: jns 0x42a818 <__memmove_avx512_no_vzeroupper+152>; ret
0x477e80: call 0xfffffffff0bd09d1; mov r15,[rbp-0x8]; leave; ret
0x416881: sbb ebp,[rip+0xf480002] # 0xf896889; rex.RB ret 0x66c3
0x45db7a: or [rbp+0x708949c9],al; xor [rdi],cl; rex.R ret 0x4389
0x438a80: leave; jne 0x438a70 <__strstr_sse2_unaligned+400>; ret
0x4614e4: sub ecx,[rcx+rcx*4-0x40]; shr rax,0x2; vzeroupper; ret
0x43e1de: lea rdi,[rcx+rax*1+0x20]; jmp rdx; nop [rax]; repz ret
0x4223f4: rex.WRX cld; mov [rdi-0x7],edx; mov [rdi-0x4],ecx; ret
0x42aa51: jns 0x42aa52 <__memmove_avx512_no_vzeroupper+722>; ret
0x4403ed: add [rax],al; add [rax-0x75],cl; add eax,0x264531; ret
0x4270b5: rex.WRX cld; mov [rdi-0xa],rdx; mov [rdi-0x4],ecx; ret
0x447cfd: add [rax],al; add [rax-0x75],cl; add eax,0x25c171; ret
0x472dc8: jne 0x472dd4 <__dlsym+132>; add rsp,0x30; pop rbx; ret
0x426e06: rex.WRX clc; mov [rdi-0xf],rdx; mov [rdi-0x8],rcx; ret
0x43b6e8: cmp eax,0xfffff001; jae 0x43b6f0 <sched_yield+16>; ret
0x4703f4: call 0x4019f0 <__assert_fail>; nop [rax+0x0]; repz ret
0x456142: mov ebp,0x441f0f; add [rax-0x1],bh; mov [rdi],rsi; ret
0x4774c6: add [rax],al; je 0x4774a5 <_Unwind_GetGR+21>; repz ret
0x4348e6: mov eax,[rcx+0x7]; mov [rdx+0x7],eax; mov rax,rdi; ret
0x47787b: call 0xfffffffff0bd03cc; mov r15,[rbp-0x8]; leave; ret
0x415120: rcr [rbx+0x4c],0x89; rcr [rbp+0x41],0x5c; pop r13; ret
0x40ddb0: add [rax],al; add [rax],al; mov [rax+0x8],0x0; repz ret
0x4168cb: add [rax-0x73],cl; add eax,0x237dd; cmovne rax,rdx; ret
0x438d62: nop [rax+0x0]; nop cs:[rax+rax*1+0x0]; xor eax,eax; ret
0x43484d: add [rax],al; add [rdx+0x48028801],cl; mov eax,edi; ret
0x40a4e7: nop cs:[rax+rax*1+0x0]; mov [rdi],0x0; mov rax,rdi; ret
0x477576: add bl,al; nop [rax+rax*1+0x0]; mov rax,[rdi+0xb8]; ret
0x42a8cc: mov ecx,[rcx-0x4]; mov [rdi],esi; mov [r9-0x4],ecx; ret
0x46b37d: add [rax-0x7d],cl; clc; dec [rax+0xf]; rex.R ret 0x66c3
0x40d783: cmp [rax],al; je 0x40d790 <_IO_doallocbuf+16>; repz ret
0x42f4c9: add [rbx+0x148b8104],cl; xchg ecx,eax; sub eax,edx; ret
0x43a505: add [rax],al; add [rax+0xf48f0e5],al; rex.RB ret 0xc35b
0x477566: add bl,al; nop [rax+rax*1+0x0]; mov rax,[rdi+0xa0]; ret
0x415c3d: add [rax-0x7d],cl; clc; dec [rax+0xf]; rex.R ret 0x8348
0x47aae9: test edx,edx; jne 0x47aaf0 <free_slotinfo+16>; repz ret
0x424d06: pop rdi; jmp 0xfffffffff191d654; mov [rdi-0x8],rdx; ret
0x43a1f5: mov [rdi+rdx*1-0x4],ecx; mov [rdi],ecx; vzeroupper; ret
0x424d66: pop rdi; jmp 0xfffffffff191d6b4; mov [rdi-0x8],rdx; ret
0x40ca9f: push [rcx]; ror [rax-0x7d],0xc4; sbb [rbx+0x5d],bl; ret
0x40f5a3: add eax,0x292268; add [rax],eax; add [rax],al; repz ret
0x4222f8: pop rdi; jmp 0xfffffffff191ac46; mov [rdi-0x8],rdx; ret
0x46720d: nop; mov [rdi+0x2ec],edx; mov [rdi+0x300],rax; repz ret
0x461e3c: jne 0x461e83 <__openat_nocancel+147>; add rsp,0x58; ret
0x424c0a: pop rdi; jmp 0xfffffffff191d558; mov [rdi-0x8],rdx; ret
0x460c81: test [rdx+0x48000000],bl; bsf eax,edx; shr rax,0x2; ret
0x4273ae: add [rax],al; mov edx,[rsi-0x4]; mov [rdi-0x4],edx; ret
0x438eb1: jle 0x438ee8 <__strcspn_sse42+200>; movsxd rax,ecx; ret
0x436b00: mov dx,WORD [rsi]; mov [rdi],dx; lea rax,[rdi+0x1]; ret
0x424c52: pop rdi; jmp 0xfffffffff191d5a0; mov [rdi-0x8],rdx; ret
0x4775a4: or ecx,[rax-0x75]; rex.R and al,0x10; add rsp,0x28; ret
0x42abb8: jns 0x42abc1 <__memmove_avx512_no_vzeroupper+1089>; ret
0x4222c0: pop rdi; jmp 0xfffffffff191ac0e; mov [rdi-0x8],rdx; ret
0x436b14: mov [rdi],ecx; mov [rdi+0x2],dh; lea rax,[rdi+0x2]; ret
0x4752a6: add bl,al; nop [rax+rax*1+0x0]; mov rax,[rsi+0xa8]; ret
0x477464: sub rax,[r9+0x90]; add rax,[r8+0xd0]; add rsp,0x18; ret
0x436523: mov edx,[rsi+0x4]; mov [rdi],ecx; mov [rdi+0x4],dx; ret
0x454087: mov edx,0xffffffff; mov fs:[rax],0x16; mov eax,edx; ret
0x416ab6: add [rax-0x73],cl; add eax,0x22732; cmovne rax,rdx; ret
0x46ae22: movabs eax,ds:0x8b480f7500002399; add eax,0x239580; ret
0x4223be: pop rdi; jmp 0xfffffffff191ad0c; mov [rdi-0x8],rdx; ret
0x44a697: jne 0x44a6e3 <__libc_sigaction+467>; add rsp,0x148; ret
0x40d7be: movsxd eax,[rax-0x77]; add ebx,[rbx+0x5d]; pop r12; ret
0x414266: mov [rip+0x28fb10],0x0 # 0x6a3d80 <list_lock>; repz ret
0x45db37: adc [rax-0x77],cl; jo 0x45db4c; mov [rax+0x40],rcx; ret
0x416816: add [rax-0x73],cl; add eax,0x229d2; cmovne rax,rdx; ret
0x41691c: add [rax-0x73],cl; add eax,0x2390c; cmovne rax,rdx; ret
0x41685c: add [rax-0x73],cl; add eax,0x2316c; cmovne rax,rdx; ret
0x436b32: mov [rdi+0x4],dh; mov [rdi],ecx; lea rax,[rdi+0x4]; ret
0x4169bc: add [rax-0x73],cl; add eax,0x22ffc; cmovne rax,rdx; ret
0x439137: adc [rsi+0x2],rdx; vmovups ZMMWORD [rsi+0xc0],zmm2; ret
0x42a8ba: mov ecx,[rcx-0x8]; mov [rdi],rsi; mov [r9-0x8],rcx; ret
0x43dbbc: movabs al,ds:0x4810488948ffffff; mov [rax+0x8],edx; ret
0x424c90: pop rdi; jmp 0xfffffffff191d5de; mov [rdi-0x8],rdx; ret
0x436aeb: add [rax],al; add [rax],al; add [rax+0x78d4837],cl; ret
0x41e2ba: jne 0x41e2c0 <__memcmp_avx2_movbe+272>; vzeroupper; ret
0x42236e: pop rdi; jmp 0xfffffffff191acbc; mov [rdi-0x8],rdx; ret
0x438fd7: adc [rsi-0x2],edx; vmovups ZMMWORD [rsi-0x40],zmm2; ret
0x42aa48: adc [rcx-0x2],rsi; vmovups ZMMWORD [r9-0x40],zmm15; ret
0x462446: enter 0x840f,0xe3; add [rax],al; add [rax-0x7d],cl; ret
0x4676e5: jne 0x4676e9 <_dl_allocate_static_tls+25>; pop rbx; ret
0x4169dd: add [rax-0x73],cl; add eax,0x22bab; cmovne rax,rdx; ret
0x416b1d: add [rax-0x73],cl; add eax,0x22a7b; cmovne rax,rdx; ret
0x436010: mov ax,WORD [rcx]; mov [rdx],ax; lea rax,[rdx+0x1]; ret
0x4324bb: lea rax,[rdi+rax*1]; cmp [rax],sil; cmovne rax,rdx; ret
0x438fd6: adc [rsi-0x2],rdx; vmovups ZMMWORD [rsi-0x40],zmm2; ret
0x436564: mov edx,[rsi+0x8]; mov [rdi],rcx; mov [rdi+0x8],dx; ret
0x46a29f: fisttp [rdi+rcx*1+0x44]; ror [rcx+rcx*4-0x40],0x5b; ret
0x436b83: mov [rdi+0x8],dh; mov [rdi],rcx; lea rax,[rdi+0x8]; ret
0x416976: add [rax-0x73],cl; add eax,0x22862; cmovne rax,rdx; ret
0x436b98: mov [rdi],ecx; mov [rdi+0x8],dx; lea rax,[rdi+0x9]; ret
0x416afc: add [rax-0x73],cl; add eax,0x22ecc; cmovne rax,rdx; ret
0x4324bc: lea eax,[rdi+rax*1]; cmp [rax],sil; cmovne rax,rdx; ret
0x4740c8: test al,0x3; jne 0x473ff1 <call_init.part+33>; repz ret
0x41687d: add [rax-0x73],cl; add eax,0x22d1b; cmovne rax,rdx; ret
0x4416ed: add [rax],al; add [rax+0xf],cl; mov esi,0x83480147; ret
0x436e3d: movdqu XMMWORD [rdi+0x10],xmm2; lea rax,[rdi+0x1f]; ret
0x4167bd: add eax,0x79ee; je 0x41678a <memcmp_ifunc+26>; repz ret
0x42a8b9: mov rcx,[rcx-0x8]; mov [rdi],rsi; mov [r9-0x8],rcx; ret
0x424d8e: pop rdi; jmp 0xfffffffff191d6dc; mov [rdi-0x8],rdx; ret
0x41d4f0: xchg [rbx+0x48000002],bl; add eax,edi; add rax,rcx; ret
0x44a3ff: add [rax+rcx*2-0x77],ah; adc [rax-0x39],ecx; ret 0xffe0
0x40d742: add [rbp+0x738948c9],eax; cmp [rdi],cl; rex.R ret 0x389
0x422396: pop rdi; jmp 0xfffffffff191ace4; mov [rdi-0x8],rdx; ret
0x424d3e: pop rdi; jmp 0xfffffffff191d68c; mov [rdi-0x8],rdx; ret
0x477556: add bl,al; nop [rax+rax*1+0x0]; mov [rdi+0x98],rsi; ret
0x46f1bb: call 0x46f487 <init+23>; add [rax],al; mov eax,0x1; ret
0x42aa49: adc [rcx-0x2],esi; vmovups ZMMWORD [r9-0x40],zmm15; ret
0x43a1ea: mov [rdi+rdx*1-0x8],ecx; mov [rdi],rcx; vzeroupper; ret
0x4602fb: test [rax+0x4c000000],esp; mov eax,eax; vzeroupper; ret
0x460e7b: jne 0x460e30 <__wcsnlen_sse2+48>; mov rax,rdx; repz ret
0x43eeb3: add [rdx+rcx*1-0x77],dh; adc eax,0x261c1c; pop rbx; ret
0x42167e: add [rax],al; mov rdx,[rsi-0x8]; mov [rdi-0x8],rdx; ret
0x45fac1: test [rdx+0x48000001],bh; bsr eax,eax; add rax,rdi; ret
0x422336: pop rdi; jmp 0xfffffffff191ac84; mov [rdi-0x8],rdx; ret
0x47aae8: test rdx,rdx; jne 0x47aaf0 <free_slotinfo+16>; repz ret
0x436b97: mov [rdi],rcx; mov [rdi+0x8],dx; lea rax,[rdi+0x9]; ret
0x436b46: mov [rdi],ecx; mov [rdi+0x4],dx; lea rax,[rdi+0x5]; ret
0x4484fe: rex.WRXB add r8b,[r8]; mov [rbx+0x10],0x0; pop rbx; ret
0x42223a: pop rdi; jmp 0xfffffffff191ab88; mov [rdi-0x8],rdx; ret
0x44b1e5: add [rbp-0x16f98a40],al; sar [rdx+0x3190fffb],0xc0; ret
0x415cfd: add [rax-0x73],cl; add eax,0x2307b; cmovne rax,rdx; ret
0x472e7d: jne 0x472e8c <__dlvsym+140>; add rsp,0x30; pop rbx; ret
0x424cc8: pop rdi; jmp 0xfffffffff191d616; mov [rdi-0x8],rdx; ret
0x46d529: movabs ds:0x5810438948ffff91,eax; pop rdx; pop rbx; ret
0x422282: pop rdi; jmp 0xfffffffff191abd0; mov [rdi-0x8],rdx; ret
0x43b786: push rdi; fsub [rcx+rcx*4+0x2]; mov eax,0xffffffff; ret
0x4383c1: mov dh,0x47; repz movzx edx,[rsi-0xd]; sub eax,edx; ret
0x427529: rex.RXB out dx,eax; movdqu XMMWORD [rdi-0x10],xmm1; ret
0x43a1e9: mov [rdi+rdx*1-0x8],rcx; mov [rdi],rcx; vzeroupper; ret
0x4775c6: add bl,al; nop [rax+rax*1+0x0]; mov rax,[rdi+0xa8]; ret
0x40ec97: nop cs:[rax+rax*1+0x0]; mov rax,0xffffffffffffffff; ret
0x439138: adc [rsi+0x2],edx; vmovups ZMMWORD [rsi+0xc0],zmm2; ret
0x426f97: movq [rdi-0x1c],mm0; movdqu XMMWORD [rdi-0x10],xmm1; ret
0x477465: sub eax,[rcx+0x90]; add rax,[r8+0xd0]; add rsp,0x18; ret
0x4365b4: mov edx,[rsi+0x7]; mov [rdi],rcx; mov [rdi+0x7],rdx; ret
0x426f07: movq [rdi-0x1d],mm0; movdqu XMMWORD [rdi-0x10],xmm1; ret
0x41687b: sub eax,0x8d480002; add eax,0x22d1b; cmovne rax,rdx; ret
0x436c17: mov [rdi],rcx; mov [rdi+0x6],rdx; lea rax,[rdi+0xd]; ret
0x40940d: rex.RXB adc [r9+0x2b],r9b; rex.RXB or [r8+0x29],r9b; ret
0x439bc9: vmovdqu64 ZMMWORD [rdi+rdx*1-0x80],zmm3; vzeroupper; ret
0x40ddd2: movabs al,ds:0x48ffffffff000000; mov [rdi+0xa8],0x0; ret
0x406fda: ror [rax+0x1],cl; ror [rax-0x3f],1; call 0x64cdbbe8; ret
0x436bf8: mov [rdi],ecx; mov [rdi+0x5],rdx; lea rax,[rdi+0xc]; ret
0x438d65: add [rsi+0x2e],ah; nop [rax+rax*1+0x0]; xor eax,eax; ret
0x4388c0: enter 0x275,0x39; enter 0xc019,0x83; fdivr st,st(7); ret
0x461bb7: cmp rax,0xfffffffffffff001; jae 0x461bc0 <uname+16>; ret
0x436573: mov edx,[rsi+0x7]; mov [rdi],rcx; mov [rdi+0x7],edx; ret
0x4142c6: mov [rip+0x28d594],eax # 0x6a1860 <__memalign_hook>; ret
0x46e006: enter 0x894c,0x47; or [rcx-0x2d],cl; jmp 0x1096695e; ret
0x41e559: movzx edx,[rsi+rcx*1+0x20]; sub eax,edx; vzeroupper; ret
0x40ed78: add [rip+0x294f95],0x1 # 0x6a3d14 <list_all_lock+4>; ret
0x436593: mov rdx,[rsi+0x5]; mov [rdi],rcx; mov [rdi+0x5],rdx; ret
0x427097: movq [rdi-0x1a],mm0; movdqu XMMWORD [rdi-0x10],xmm1; ret
0x48f246: mov esi,0xfa1fb992; xchg [rsp+rax*1+0x6fa9ce9d],esp; ret
0x436ae7: nop cs:[rax+rax*1+0x0]; mov [rdi],dh; lea rax,[rdi]; ret
0x409ab2: mov [rdi],edx; mov fs:[rax],0x9; mov eax,0xffffffff; ret
0x436532: mov edx,[rsi+0x3]; mov [rdi],ecx; mov [rdi+0x3],edx; ret
0x436bb7: mov [rdi],ecx; mov [rdi+0x7],edx; lea rax,[rdi+0xa]; ret
0x436c37: mov [rdi],rcx; mov [rdi+0x7],rdx; lea rax,[rdi+0xe]; ret
0x461fcb: xor eax,eax; cmp rdi,rdx; ja 0x461ff8 <brk+72>; repz ret
0x477e87: jge 0x477e81 <_Unwind_Resume_or_Rethrow+321>; leave; ret
0x40eddc: mov [rip+0x294f32],0x0 # 0x6a3d18 <list_all_lock+8>; ret
0x439210: adc [rdi],eax; movups XMMWORD [rdi+rdx*1-0x10],xmm1; ret
0x40ea24: rex.RXB adc [r9],r13b; rol bl,1; mov eax,0xffffffff; ret
0x4365b3: mov rdx,[rsi+0x7]; mov [rdi],rcx; mov [rdi+0x7],rdx; ret
0x427397: movq [rdi-0x14],mm0; movdqu XMMWORD [rdi-0x10],xmm1; ret
0x43bc73: jg 0x43bc75 <fcntl+101>; add [rax],al; add rsp,0x68; ret
0x46eeaf: add [rax],al; jne 0x46eeee <__mpn_mul_n+142>; leave; ret
0x40deb3: movabs al,ds:0x49ffffffff000000; mov [rcx+0xa8],0x0; ret
0x436583: mov edx,[rsi+0x8]; mov [rdi],rcx; mov [rdi+0x8],edx; ret
0x4484c4: cmp esi,0x3; je 0x4484d0 <do_release_shlib+16>; repz ret
0x43650d: add [rax],al; add [rbx+0x477880e],cl; mov [rdi],ecx; ret
0x41d73e: add [rax],al; bsf eax,eax; lea rax,[rax+rdi*1+0x20]; ret
0x495717: adc [rdx+0xe],al; or [rax+0xb],cl; add dh,[rcx+0xa]; ret
0x446b9f: sub [rax],al; add [rsi+0x41],ah; cmp ecx,0x860f07ff; ret
0x439ca0: rex.B std; vmovdqu64 ZMMWORD [r11],zmm4; vzeroupper; ret
0x436bd6: mov [rdi],rcx; mov [rdi+0x8],edx; lea rax,[rdi+0xb]; ret
0x427527: movq [rdi-0x11],mm0; movdqu XMMWORD [rdi-0x10],xmm1; ret
0x48f6f1: lea ebx,[rsi-0x3271f33]; test al,0x97; xchg esp,eax; ret
0x4383b1: mov dh,0x47; repnz movzx edx,[rsi-0xe]; sub eax,edx; ret
0x40de93: add [rax],al; mov [rcx+0x130],r8; mov [r9+0xa8],0x0; ret
0x436bd7: mov [rdi],ecx; mov [rdi+0x8],edx; lea rax,[rdi+0xb]; ret
0x4391d4: adc [rsi+0x6],rdx; vmovups ZMMWORD [rsi+0x1c0],zmm2; ret
0x4780a9: in al,dx; sbb [rax-0x75],cl; rex.X or [rax-0x77],cl; ret
0x45dfea: xor [rax],al; je 0x45dff0 <_IO_wdoallocbuf+16>; repz ret
0x4274a7: movq [rdi-0x12],mm0; movdqu XMMWORD [rdi-0x10],xmm1; ret
0x477509: je 0x477510 <_Unwind_SetGR+32>; mov [rdi+rsi*8],rdx; ret
0x45e756: lea rdx,[r8+rdx*4]; mov [rax],rdx; xor eax,eax; repz ret
0x48e9b7: mov bh,0xb8; mov ecx,0xbdbcbbba; mov esi,0xc2c1c0bf; ret
0x43a52b: jg 0x43a4f0 <handle_amd+256>; mov eax,0x80; pop rbx; ret
0x43dc1f: add [rax+0x3b],cl; push rdi; adc [rbx-0x1e],dh; repz ret
0x43a2ee: vmovdqu64 ZMMWORD [rdi+rdx*1-0x80],zmm0; vzeroupper; ret
0x436b65: mov [rdi],ecx; mov [rdi+0x3],edx; lea rax,[rdi+0x6]; ret
0x436c38: mov [rdi],ecx; mov [rdi+0x7],rdx; lea rax,[rdi+0xe]; ret
0x427317: movq [rdi-0x15],mm0; movdqu XMMWORD [rdi-0x10],xmm1; ret
0x42753e: add [rax],al; movzx edx,[rsi-0x1]; mov [rdi-0x1],dl; ret
0x415647: jne 0x415630 <malloc_usable_size+144>; sub rax,0x10; ret
0x436c18: mov [rdi],ecx; mov [rdi+0x6],rdx; lea rax,[rdi+0xd]; ret
0x436bf7: mov [rdi],rcx; mov [rdi+0x5],rdx; lea rax,[rdi+0xc]; ret
0x46eeac: and eax,0x28; jne 0x46eeee <__mpn_mul_n+142>; leave; ret
0x40f66f: push rax; add [rax-0x77],ecx; adc eax,0x2921b8; repz ret
0x41e53f: movzx edx,[rsi+rcx*1+0x60]; sub eax,edx; vzeroupper; ret
0x46d231: add [rax-0x77],cl; rex.XB sbb [r8+0x5a],bl; pop rbx; ret
0x426e77: movq [rdi-0x1e],mm0; movdqu XMMWORD [rdi-0x10],xmm1; ret
0x47252e: fidivr [rax-0x3b7cb701]; and [rbx+0x5d],bl; pop r12; ret
0x45ffcb: ror [rdi],cl; test [rsi+0x48000000],bl; bsf eax,edx; ret
0x41d95e: add [rax],al; bsf eax,eax; lea rax,[rax+rdi*1-0x10]; ret
0x41d72e: add [rax],al; bsf eax,eax; lea rax,[rax+rdi*1+0x10]; ret
0x43c953: jne 0x43c960 <maybe_split_for_insert.isra+128>; repz ret
0x477435: add [rax],al; add [rdx+riz*8+0x48],dh; add esp,0x18; ret
0x46d6a0: jne 0x46d6b4 <__libc_dlopen_mode+116>; add rsp,0x38; ret
0x477432: mov ecx,0xdf; add [rdx+riz*8+0x48],dh; add esp,0x18; ret
0x427197: movq [rdi-0x18],mm0; movdqu XMMWORD [rdi-0x10],xmm1; ret
0x41e579: movzx edx,[rsi+rcx*1+0x40]; sub eax,edx; vzeroupper; ret
0x427297: movq [rdi-0x16],mm0; movdqu XMMWORD [rdi-0x10],xmm1; ret
0x427017: movq [rdi-0x1b],mm0; movdqu XMMWORD [rdi-0x10],xmm1; ret
0x426de7: movq [rdi-0x1f],mm0; movdqu XMMWORD [rdi-0x10],xmm1; ret
0x4365a4: mov edx,[rsi+0x6]; mov [rdi],rcx; mov [rdi+0x6],rdx; ret
0x4365a3: mov rdx,[rsi+0x6]; mov [rdi],rcx; mov [rdi+0x6],rdx; ret
0x436594: mov edx,[rsi+0x5]; mov [rdi],rcx; mov [rdi+0x5],rdx; ret
0x4399fe: vmovdqu64 ZMMWORD [rdi+rdx*1-0x40],zmm1; vzeroupper; ret
0x4391d5: adc [rsi+0x6],edx; vmovups ZMMWORD [rsi+0x1c0],zmm2; ret
0x427117: movq [rdi-0x19],mm0; movdqu XMMWORD [rdi-0x10],xmm1; ret
0x4142c5: mov [rip+0x28d594],rax # 0x6a1860 <__memalign_hook>; ret
0x4399a9: jg 0x439a0b; vmovdqu YMMWORD [r11],ymm8; vzeroupper; ret
0x427217: movq [rdi-0x17],mm0; movdqu XMMWORD [rdi-0x10],xmm1; ret
0x42abb0: adc [rcx+0x6],esi; vmovups ZMMWORD [r9+0x1c0],zmm15; ret
0x45fd80: fnsave [rcx+rbx*8-0x3b]; std; xlat ds:[rbx]; retf 0xfdc5
0x45fac3: add [rax],eax; add [rax+0xf],cl; mov ebp,0xf80148c0; ret
0x4145c2: out dx,eax; mov rsi,rbx; call 0x410940 <arena_get_retry>
0x40ea15: sub edx,[rax+0x18]; mov eax,[rdi+0x10]; sub eax,edx; ret
0x40ea20: sub edx,[rax+0x10]; mov eax,[rdi+0x10]; sub eax,edx; ret
0x427417: movq [rdi-0x13],mm0; movdqu XMMWORD [rdi-0x10],xmm1; ret
0x40c9ea: mov [rdi],ecx; mov fs:[rax],0x9; mov eax,0xffffffff; ret
0x436bb6: mov [rdi],rcx; mov [rdi+0x7],edx; lea rax,[rdi+0xa]; ret
0x41d6d4: rol [rbp-0x5c7af040],0x0; add [rax],al; xor eax,eax; ret
0x42abaf: adc [rcx+0x6],rsi; vmovups ZMMWORD [r9+0x1c0],zmm15; ret
0x40fce7: enter 0x3948,0xd0; jne 0x40fcef <top_check+79>; repz ret
0x438391: mov dh,0x47; lock movzx edx,[rsi-0x10]; sub eax,edx; ret
0x435ffd: add [rax],al; add [rdx+0x48028801],cl; lea eax,[rdx]; ret
0x479d09: jne 0x479d28 <base_of_encoded_value+88>; xor eax,eax; ret
0x40fb00: cmovs eax,[rbx-0x76b7fe18]; xchg [rax-0xcfffff8],eax; ret
0x461113: add eax,0xc3000000; nop [rax+rax*1+0x0]; mov rax,0x6; ret
0x45e757: lea edx,[rax+rdx*4]; mov [rax],rdx; xor eax,eax; repz ret
0x472666: je 0x472670 <_dl_tlsdesc_resolve_hold_fixup+16>; repz ret
0x423ff6: push rdi; call 0xfffffffff0a1c948; mov [rdi-0x8],rdx; ret
0x477438: je 0x47741c <uw_install_context_1+332>; add rsp,0x18; ret
0x421550: push rdi; call 0xfffffffff0a19ea2; mov [rdi-0x8],rdx; ret
0x44978e: add eax,0x1f0f0000; add [rax],0x0; add [rax],al; repz ret
0x47510e: pop rsi; add eax,0x1e870; movss [rsp-0x28],xmm0; repz ret
0x44a73b: add [rax],al; add [rax],al; add [rax-0x39],cl; ret 0xffc0
0x451750: outs dx,ds:[rsi]; sbb ah,[rsi+0xf]; outs dx,ds:[rsi]; ret
0x488730: shl [rax+rax*1],0x0; add [rax],al; add [rax],al; ret 0x24
0x43c777: cmp rax,0xfffffffffffff001; jae 0x43c780 <munmap+16>; ret
0x4365c0: movdqu xmm0,XMMWORD [rsi]; movdqu XMMWORD [rdi],xmm0; ret
0x421512: push rdi; call 0xfffffffff0a19e64; mov [rdi-0x8],rcx; ret
0x415bc2: add [rax],al; add bl,al; nop cs:[rax+rax*1+0x0]; repz ret
0x4145c0: mov rdi,rbp; mov rsi,rbx; call 0x410940 <arena_get_retry>
0x436b63: push rsi; add ecx,[rcx+0x357890f]; lea rax,[rdi+0x6]; ret
0x40deb0: mov [rdi+0xa0],0xffffffffffffffff; mov [r9+0xa8],0x0; ret
0x4703f6: adc eax,0x1f0ffff9; add [rax],0x0; add [rax],al; repz ret
0x461ebf: jne 0x461ec9 <isatty+57>; movzx eax,al; add rsp,0x58; ret
0x477421: je 0x477440 <uw_install_context_1+368>; add rsp,0x18; ret
0x42401e: push rdi; call 0xfffffffff0a1c970; mov [rdi-0x8],rdx; ret
0x49bf67: and [rbx+0x30d4304],al; add ch,[rbp+rcx*1+0x7]; rex.R ret
0x4145c1: mov edi,ebp; mov rsi,rbx; call 0x410940 <arena_get_retry>
0x44978c: jmp 0x449d40 <_nl_unload_locale>; nop [rax+0x0]; repz ret
0x46de88: loope 0x46ded6 <__mpn_lshift+214>; mov [rdi-0x8],ecx; ret
0x46f35b: adc [rax-0x7b],cl; dec [rax+0x48e57506]; mov eax,esi; ret
0x4388c6: rol [rbx+0xfc3ffd8],0x1f; add [rax],r8b; xor eax,eax; ret
0x43d91a: cmp rax,0xfffffffffffff001; jae 0x43d923 <mremap+19>; ret
0x423f96: push rdi; call 0xfffffffff0a1c8e8; mov [rdi-0x8],rdx; ret
0x421588: push rdi; call 0xfffffffff0a19eda; mov [rdi-0x8],rcx; ret
0x43902b: jg 0x439073 <__memset_avx512_no_vzeroupper+259>; lock ret
0x42164e: push rdi; call 0xfffffffff0a19fa0; mov [rdi-0x8],rdx; ret
0x40e9ee: add [rax],al; mov eax,[rdi+0x10]; sub eax,[rsi+0x10]; ret
0x43a04d: jne 0x43a033 <__memset_sse2_unaligned_erms+147>; repz ret
0x4783ef: add [rax-0x80],al; inc [rsi*2+0x8b80f]; add [rax],al; ret
0x41e3b2: add [rax],al; jne 0x41e2c0 <__memcmp_avx2_movbe+272>; ret
0x478439: jne 0x47844e <base_from_object.part+62>; xor eax,eax; ret
0x42a8de: mov cx,WORD [rcx-0x2]; mov [rdi],si; mov [r9-0x2],cx; ret
0x4913a4: icebp; lods eax,ds:[rsi]; mov esi,0x497b96cc; retf 0x99e0
0x49bf46: add [rdi],0xd; add eax,[rdx]; movs es:[rdi],ds:[rsi]; ret
0x421626: push rdi; call 0xfffffffff0a19f78; mov [rdi-0x8],rdx; ret
0x4676ab: nop [rax+rax*1+0x0]; or [rdi+0x315],0x4; xor eax,eax; ret
0x4215fe: push rdi; call 0xfffffffff0a19f50; mov [rdi-0x8],rdx; ret
0x41d70c: nop [rax+0x0]; bsf eax,eax; lea rax,[rax+rdi*1-0x10]; ret
0x46d22f: xor eax,0x89480000; rex.XB sbb [r8+0x5a],bl; pop rbx; ret
0x4364d8: nop [rax+rax*1+0x0]; mov dx,WORD [rsi]; mov [rdi],dx; ret
0x41d739: nop [rax+0x0]; bsf eax,eax; lea rax,[rax+rdi*1+0x20]; ret
0x4276e3: add eax,0x480e8b48; mov [rdi+0x5],edx; mov [rdi],rcx; ret
0x43b6f7: neg eax; mov fs:[rcx],eax; or rax,0xffffffffffffffff; ret
0x440400: mov rax,[rip+0x264531] # 0x6a4938 <__gconv_alias_db>; ret
0x472d3f: call 0x474c90 <_dl_sym>; mov [rbx+0x18],rax; pop rbx; ret
0x439b8b: vmovdqu64 ZMMWORD [rdi+rdx*1-0x100],zmm7; vzeroupper; ret
0x42ad12: adc [rdi-0x7],esi; vmovups ZMMWORD [rdi-0x200],zmm15; ret
0x40ee1d: jae 0x40ee40 <_IO_str_underflow+80>; movzx eax,[rax]; ret
0x40d3c3: adc esi,[rcx]; ror [rax-0x7d],0xc4; or [rbx+0x5d],bl; ret
0x439f75: movq [rdi+rdx*1-0x10],mm0; movdqu XMMWORD [rdi],xmm0; ret
0x46b3cb: jae 0x46b371 <_dl_tls_get_addr_soft+33>; xor eax,eax; ret
0x45e80e: add [rax],al; mov rax,[rdi+0x48]; mov eax,[rax+0x4c]; ret
0x4215c6: push rdi; call 0xfffffffff0a19f18; mov [rdi-0x8],rdx; ret
0x4676b8: rol bl,0x66; nop [rax+rax*1+0x0]; mov eax,0xffffffff; ret
0x407cc4: jne 0x407ccf <__fxprintf+367>; add rsp,0xd0; pop rbx; ret
0x423fce: push rdi; call 0xfffffffff0a1c920; mov [rdi-0x8],rdx; ret
0x440401: mov eax,[rip+0x264531] # 0x6a4938 <__gconv_alias_db>; ret
0x46f1d9: or [rcx-0x77],0x0; mov [rdx],0xffffc002; mov eax,0x1; ret
0x456e56: add ch,[rip+0xffffffff83000000] # 0xffffffff83456e5c; ret
0x41db7f: xlat ds:[rbx]; rol [rbp+0x311b75c0],0xc0; vzeroupper; ret
0x423f58: push rdi; call 0xfffffffff0a1c8aa; mov [rdi-0x8],rcx; ret
0x42f4c8: add eax,0x81048b00; mov edx,[rcx+rdx*4]; sub eax,edx; ret
0x43db57: add [rax],al; add [rax],al; nop [rax+rax*1+0x0]; repz ret
0x42d0d1: add eax,0x8a0c8b00; mov eax,[rdx+rax*4]; sub eax,ecx; ret
0x4604f2: add [rax-0x73],cl; adc eax,0xfffd9d16; cmove rax,rdx; ret
0x43bc6f: add [rax],al; jne 0x43bcf6 <fcntl+230>; add rsp,0x68; ret
0x423ee2: push rdi; call 0xfffffffff0a1c834; mov [rdi-0x8],rcx; ret
0x438d64: add [rsi+0x2e],spl; nop [rax+rax*1+0x0]; xor eax,eax; ret
0x4599d5: dec [rax-0x77]; enter 0xc148,0xf8; add cl,[rcx+0x29]; ret
0x40a446: add [rax],al; je 0x40a44c <_IO_vtable_check+12>; repz ret
0x47a443: and al,[rax]; jne 0x47a428 <buffer_free+24>; pop rbx; ret
0x475299: jne 0x4752b8 <base_of_encoded_value+88>; xor eax,eax; ret
0x462001: add [rax+rax*1],cl; add [rax],al; mov eax,0xffffffff; ret
0x45e0c6: sub [rax-0x77],cl; push rax; sbb [rcx+0x5bc0310b],cl; ret
0x43bc6c: and eax,0x28; jne 0x43bcf6 <fcntl+230>; add rsp,0x68; ret
0x46defd: loope 0x46df4b <__mpn_rshift+59>; mov [rdi-0x10],ecx; ret
0x4348a4: mov ax,WORD [rcx+0x4]; mov [rdx+0x4],ax; mov rax,rdi; ret
0x42ad11: adc [rdi-0x7],rsi; vmovups ZMMWORD [rdi-0x200],zmm15; ret
0x41e518: test [rbx-0x3a000003],esp; std; xlat ds:[rbx]; ret 0xe883
0x423f20: push rdi; call 0xfffffffff0a1c872; mov [rdi-0x8],rdx; ret
0x460ba8: add [rax-0x73],cl; adc eax,0x30; cmovne rax,rdx; repz ret
0x42f4ca: mov eax,[rcx+rax*4]; mov edx,[rcx+rdx*4]; sub eax,edx; ret
0x430d9f: mov edx,[rcx+rdx*4]; mov eax,[rcx+rax*4]; sub eax,edx; ret
0x40f60b: add [rax],al; mov [rip+0x2921cc],rax # 0x6a17e0 <mp_>; ret
0x4383a0: movzx eax,[rdi-0xf]; movzx edx,[rsi-0xf]; sub eax,edx; ret
0x4392cf: add [rax],al; mov rcx,rdx; rep movs es:[rdi],ds:[rsi]; ret
0x439303: mov esi,[rsi]; mov [rdi+rdx*1-0x4],ecx; mov [rdi],esi; ret
0x45db35: mov [rax],rdx; mov [rax+0x10],rsi; mov [rax+0x40],rcx; ret
0x4004c6: xchg ax,ax; jmp [rip+0x2a0bfa] # 0x6a10c8; xchg ax,ax; ret
0x46d5e6: jne 0x46d5f4 <__libc_dlsym_private+100>; add rsp,0x38; ret
0x40ecb3: nop [rax]; nop cs:[rax+rax*1+0x0]; mov eax,0xffffffff; ret
0x472df3: call 0x474ba0 <_dl_vsym>; mov [rbx+0x20],rax; pop rbx; ret
0x4383e0: movzx eax,[rdi-0xb]; movzx edx,[rsi-0xb]; sub eax,edx; ret
0x40d2df: test edx,edx; jne 0x40d2d0 <_IO_least_marker+16>; repz ret
0x4391da: jl 0x439224 <__mempcpy_chk_erms+4>; adc [rsi+0x7],edx; ret
0x43b860: and eax,0x28; jne 0x43b919 <open64+281>; add rsp,0x68; ret
0x43ba37: neg eax; mov fs:[rdx],eax; mov rax,0xffffffffffffffff; ret
0x40e9ed: add [rax],r8b; mov eax,[rdi+0x10]; sub eax,[rsi+0x10]; ret
0x4383c0: movzx eax,[rdi-0xd]; movzx edx,[rsi-0xd]; sub eax,edx; ret
0x479299: jne 0x4792ae <base_from_cb_data.part+62>; xor eax,eax; ret
0x43c541: cmp eax,0xfffff000; ja 0x43c550 <getrlimit64+32>; repz ret
0x451672: ja 0x451650 <__guess_grouping.part.0+16>; mov eax,r9d; ret
0x45daf6: mov [rax],edx; mov [rax+0x10],rdx; mov [rax+0x40],rcx; ret
0x436d19: movq [rdi],mm0; mov [rdi+0xf],rcx; lea rax,[rdi+0x16]; ret
0x40ddcf: mov [rdi+0xa0],0xffffffffffffffff; mov [rdi+0xa8],0x0; ret
0x40d2de: test rdx,rdx; jne 0x40d2d0 <_IO_least_marker+16>; repz ret
0x4366a9: movq [rdi],mm0; mov [rdi+0x10],rcx; mov [rdi+0x18],dh; ret
0x44a72e: cmp eax,0xfffff000; ja 0x44a740 <sigprocmask+32>; repz ret
0x438377: movzx eax,[rdi-0x9]; movzx edx,[rsi-0x9]; sub eax,edx; ret
0x437094: xchg ax,ax; nop cs:[rax+rax*1+0x0]; lea rax,[rdi+0x1]; ret
0x42a8cb: mov ecx,ss:[rcx-0x4]; mov [rdi],esi; mov [r9-0x4],ecx; ret
0x4782ac: adc esi,[rcx]; ror [rax-0x7d],0xc4; sbb [rbx+0x5d],bl; ret
0x46c396: cmps ds:[rsi],es:[rdi]; cmp al,0x0; add [rcx-0x77],cl; ret
0x42d0d3: mov ecx,[rdx+rcx*4]; mov eax,[rdx+rax*4]; sub eax,ecx; ret
0x41f213: movzx eax,[rdi-0x1]; movzx edx,[rsi-0x1]; sub eax,edx; ret
0x42a8ad: jg 0x42a8f8 <__memmove_avx512_no_vzeroupper+376>; lock ret
0x40ecf3: nop [rax]; nop cs:[rax+rax*1+0x0]; mov rax,[rdi+0x68]; ret
0x4671de: add al,0x90; mov [rdi+0x2f4],ecx; mov [rdi+0x308],rax; ret
0x4726b8: add cl,ch; rex.X fnstcw [rax+0x489066ff]; add esp,0x8; ret
0x43c7d7: cmp rax,0xfffffffffffff001; jae 0x43c7e0 <madvise+16>; ret
0x461d29: add [rdi],cl; test [rcx+0x48000000],edi; add esp,0x78; ret
0x40dcfb: test rax,rax; jne 0x40dcf0 <_IO_enable_locks+32>; repz ret
0x436026: mov al,[rcx+0x2]; mov [rdx+0x2],al; lea rax,[rdx+0x2]; ret
0x41f460: movzx eax,[rdi-0x1]; movzx ecx,[rsi-0x1]; sub eax,ecx; ret
0x436054: mov al,[rcx+0x4]; mov [rdx+0x4],al; lea rax,[rdx+0x4]; ret
0x426d76: lddqu xmm0,[rsi-0x10]; movdqu XMMWORD [rdi-0x10],xmm0; ret
0x4383b0: movzx eax,[rdi-0xe]; movzx edx,[rsi-0xe]; sub eax,edx; ret
0x43b863: add [rax],al; jne 0x43b919 <open64+281>; add rsp,0x68; ret
0x4383f0: movzx eax,[rdi-0xa]; movzx edx,[rsi-0xa]; sub eax,edx; ret
0x43d947: cmp rax,0xfffffffffffff001; jae 0x43d950 <sysinfo+16>; ret
0x436c98: movq [rdi],mm0; mov [rdi+0xf],ecx; lea rax,[rdi+0x12]; ret
0x479814: or ecx,[rbx+0x74c08507]; add eax,0xffff50e9; push rbx; ret
0x4383d0: movzx eax,[rdi-0xc]; movzx edx,[rsi-0xc]; sub eax,edx; ret
0x45db36: mov [rax],edx; mov [rax+0x10],rsi; mov [rax+0x40],rcx; ret
0x40f845: jmp [rsi+0x2e]; nop [rax+rax*1+0x0]; xor eax,eax; repz ret
0x479852: test eax,eax; jne 0x479860 <__register_frame+16>; repz ret
0x46fc21: pop rbx; add [rax],al; add [rax+0xf],cl; rex.RB ret 0x66c3
0x456f4c: test [rip+0xffffffff83fffffd],cl # 0xffffffff84456f4f; ret
0x4392f3: mov rsi,[rsi]; mov [rdi+rdx*1-0x8],rcx; mov [rdi],rsi; ret
0x436628: movq [rdi],mm0; mov [rdi+0x10],ecx; mov [rdi+0x14],dh; ret
0x46231d: rol [rdx],0x85; leave; jne 0x462370 <is_dst+160>; repz ret
0x4392f4: mov esi,[rsi]; mov [rdi+rdx*1-0x8],rcx; mov [rdi],rsi; ret
0x40dcfc: test eax,eax; jne 0x40dcf0 <_IO_enable_locks+32>; repz ret
0x46ae7a: test edi,edi; jne 0x46ae50 <_dl_count_modids+48>; repz ret
0x436c79: movq [rdi],mm0; mov [rdi+0x10],cx; lea rax,[rdi+0x11]; ret
0x436cf9: movq [rdi],mm0; mov [rdi+0xe],rcx; lea rax,[rdi+0x15]; ret
0x43fb62: loopne 0x43fbc1 <_dl_discover_osversion+257>; pop r12; ret
0x477529: call 0x4063d0 <abort>; xchg ax,ax; mov rax,[rdi+0x98]; ret
0x45e7eb: mov ecx,[rdx+0x48]; cmp ecx,[rdx+0x4c]; cmove eax,ecx; ret
0x421c15: mov ecx,[rsi-0x2]; mov [rdi-0x3],dx; mov [rdi-0x2],cx; ret
0x45fbd2: shl [rsi+0xf],0xd7; shl [rsi+0xf],1; outs dx,ds:[rsi]; ret
0x472a34: jae 0x472a10 <_dl_addr_inside_object+32>; mov eax,0x1; ret
0x46b630: loopne 0x46b68d <_dl_scope_free+45>; pop rbp; pop r12; ret
0x45daf5: mov [rax],rdx; mov [rax+0x10],rdx; mov [rax+0x40],rcx; ret
0x43b864: add [rdi],cl; test [rsi+0x48000000],ebp; add esp,0x68; ret
0x46ae79: test rdi,rdi; jne 0x46ae50 <_dl_count_modids+48>; repz ret
0x4366cd: movq [rdi],mm0; mov [rdi+0x10],rdx; mov [rdi+0x18],cx; ret
0x42a8b8: mov rcx,ss:[rcx-0x8]; mov [rdi],rsi; mov [r9-0x8],rcx; ret
0x436c65: movq [rdi],mm0; mov [rdi+0x10],dh; lea rax,[rdi+0x10]; ret
0x46b780: mov rax,0xffffffffffffffc0; pop rbx; mov eax,fs:[rax]; ret
0x46831f: add [rbp+0x1],cl; inc [rbp-0xfd8a01]; ror [rax-0x7d],1; ret
0x447b46: outs dx,ds:[rsi]; or [rcx],dh; ror [rcx+0x1e3d8bc5],cl; ret
0x46107b: mov cl,dl; and cl,0xf; je 0x4610a0 <__wcslen_sse2+512>; ret
0x44a30b: xchg [rip+0xfffffffff3087400],esp # 0xfffffffff34d1711; ret
0x40e9d4: test eax,eax; jne 0x40e9c8 <_IO_remove_marker+24>; repz ret
0x467ba6: jmp 0x467ba7 <_dl_relocate_object+807>; dec [rcx-0x77]; ret
0x436522: mov dx,WORD [rsi+0x4]; mov [rdi],ecx; mov [rdi+0x4],dx; ret
0x456143: nop [rax+rax*1+0x0]; mov eax,0xffffffff; mov [rdi],rsi; ret
0x40df5c: add [rax],al; add [rax],al; mov rax,0xffffffffffffffff; ret
0x45610d: cmp ecx,0x9; jbe 0x4560e3 <read_int+35>; mov [rdi],rsi; ret
0x47903e: add [rax-0x7d],cl; rex.R and al,0x10; or [rax-0x7d],cl; ret
0x44d4e5: inc [rbp-0x707af037]; add eax,[rax]; add [rcx-0x77],al; ret
0x46d0d9: mov [rip+0x236f6d],0x0 # 0x6a4050 <cache>; add rsp,0x8; ret
0x46fa78: and eax,0x28; jne 0x46fa84 <__dlinfo+84>; add rsp,0x38; ret
0x45609d: and eax,0x28; jne 0x4560ac <fprintf+172>; add rsp,0xd8; ret
0x46434d: jmp 0x464318 <add_path.isra.4.constprop+136>; nop; repz ret
0x4599e2: add [rax],al; add [rdi+rcx*1+0x48],cl; fmul [rbp+0x63]; ret
0x416991: add [rax-0x73],cl; adc eax,0xe7b7; cmovne rax,rdx; repz ret
0x413551: mov edi,ebx; mov esi,0x240; call 0x410940 <arena_get_retry>
0x45c35d: cmp ecx,0x9; jbe 0x45c333 <read_int+35>; mov [rdi],rsi; ret
0x46f7ca: sbb [rcx],dh; ror [rax-0x7b],cl; ror [rdi],0x94; ret 0x950f
0x461c8a: cmp eax,0xfffff000; ja 0x461c98 <__fxstatat64+40>; repz ret
0x458ab8: loop 0x458ab9 <printf_positional+9721>; dec [rcx+0x63]; ret
0x4366ec: movq [rdi],mm0; mov [rdi+0x10],rdx; mov [rdi+0x17],ecx; ret
0x43c7a7: cmp rax,0xfffffffffffff001; jae 0x43c7b0 <mprotect+16>; ret
0x4167bf: jns 0x4167c1 <memcmp_ifunc+81>; add [rsi+rax*8-0xd],dh; ret
0x413550: mov rdi,rbx; mov esi,0x240; call 0x410940 <arena_get_retry>
0x415d01: jnp 0x415d33 <strdup+35>; add al,[rax]; cmovne rax,rdx; ret
0x415cad: add [rax-0x73],cl; adc eax,0x25cb; cmovne rax,rdx; repz ret
0x438a7f: test cl,cl; jne 0x438a70 <__strstr_sse2_unaligned+400>; ret
0x45dabe: test rdx,rdx; jne 0x45dab0 <_IO_least_wmarker+32>; repz ret
0x40e9d3: test rax,rax; jne 0x40e9c8 <_IO_remove_marker+24>; repz ret
0x4490fb: js 0x4490fe <strip+206>; mov [rax],0x2f; mov [rdi],0x0; ret
0x416ad1: add [rax-0x73],cl; adc eax,0xe697; cmovne rax,rdx; repz ret
0x459a12: fmul [rax-0x7d]; mov ebp,0xfffffae8; add [rcx-0x77],al; ret
0x415c3e: cmp rax,0xffffffffffffffff; cmove rax,rdx; add rsp,0x8; ret
0x43670c: movq [rdi],mm0; mov [rdi+0x10],rdx; mov [rdi+0x18],ecx; ret
0x434891: add [rcx+0x4418a02],ecx; mov [rdx+0x4],al; mov rax,rdi; ret
0x400a76: mov [rip+0x2a2863],0x1 # 0x6a32e0 <completed>; pop rbp; ret
0x4403f1: mov eax,[rip+0x264531] # 0x6a4928 <__gconv_modules_db>; ret
0x46d0f8: nop [rax+rax*1+0x0]; mov rax,[rax+0x8]; sub rax,fs:0x0; ret
0x46eea9: xor rax,ds:0x28; jne 0x46eeee <__mpn_mul_n+142>; leave; ret
0x43ef01: jmp 0x46aa90 <_dl_mcount>; nop cs:[rax+rax*1+0x0]; repz ret
0x46eeaa: xor eax,ds:0x28; jne 0x46eeee <__mpn_mul_n+142>; leave; ret
0x47981b: jmp 0x479770 <__register_frame_info_bases.part.6>; repz ret
0x4775b4: xchg ax,ax; nop cs:[rax+rax*1+0x0]; mov rax,[rdi+0xb0]; ret
0x45dabf: test edx,edx; jne 0x45dab0 <_IO_least_wmarker+32>; repz ret
0x41e3af: sub eax,0xffff; jne 0x41e2c0 <__memcmp_avx2_movbe+272>; ret
0x415db7: add [rax-0x73],cl; adc eax,0x4f71; cmovne rax,rdx; repz ret
0x4365e6: rex.WRX adc bl,r14b; movq [rdi],mm0; mov [rdi+0x10],cx; ret
0x436cb8: movq [rdi],mm0; mov [rdi+0x10],ecx; lea rax,[rdi+0x13]; ret
0x43ee96: test eax,eax; je 0x43eea0 <__libc_init_secure+16>; repz ret
0x46b379: mov edx,0x0; cmp rax,0xffffffffffffffff; cmove rax,rdx; ret
0x4913b0: test [rbp-0x9aff276],esp; mov al,0xee; fcmovb st,st(3); ret
0x442383: mov [rax-0x7c],0xf6; mov edx,0xffffffff; cmovs eax,edx; ret
0x436ec3: adc [rsi-0x70],ah; nop cs:[rax+rax*1+0x0]; xor rax,rax; ret
0x46fa7b: add [rax],al; jne 0x46fa84 <__dlinfo+84>; add rsp,0x38; ret
0x4333bf: ror [rax-0x73],0x76; adc [rax-0x7b],cl; ror [rdi],0x85; ret
0x46eea8: xor rax,fs:0x28; jne 0x46eeee <__mpn_mul_n+142>; leave; ret
0x436d39: movq [rdi],mm0; mov [rdi+0x10],rcx; lea rax,[rdi+0x17]; ret
0x4403f0: mov rax,[rip+0x264531] # 0x6a4928 <__gconv_modules_db>; ret
0x46b5f0: loopne 0x46b64d <_dl_get_origin+397>; pop rbp; pop r12; ret
0x46b5d3: loopne 0x46b630 <_dl_get_origin+368>; pop rbp; pop r12; ret
0x4560a0: add [rax],al; jne 0x4560ac <fprintf+172>; add rsp,0xd8; ret
0x45414d: outs dx,ds:[rsi]; sbb [rsi+0xf],esp; outs dx,ds:[rsi]; retf
0x477439: loop 0x477483 <uw_install_context_1+435>; add esp,0x18; ret
0x436065: mov eax,[rcx+0x4]; mov [rdx+0x4],ax; lea rax,[rdx+0x5]; ret
0x462336: cmp al,0x2f; je 0x46231f <is_dst+79>; xor eax,eax; repz ret
0x4389cf: test cl,cl; jne 0x4389c0 <__strstr_sse2_unaligned+224>; ret
0x4779fd: lock mov r15,[rbp-0x8]; mov rbp,[rbp+0x0]; mov rsp,rcx; ret
0x436563: mov dx,WORD [rsi+0x8]; mov [rdi],rcx; mov [rdi+0x8],dx; ret
0x403110: add [rax-0x7d],cl; cmp eax,0x29de5f; add [rax-0x77],cl; ret
0x461075: call 0x7518947c; adc eax,0xe180d188; pcmpeqb mm3,[rsi]; ret
0x426f25: mov ecx,[rsi-0x8]; mov [rdi-0xd],rdx; mov [rdi-0x8],rcx; ret
0x461d25: and eax,0x28; jne 0x461de9 <openat64+281>; add rsp,0x78; ret
0x4079cd: and eax,0x28; jne 0x4079dc <asprintf+172>; add rsp,0xd8; ret
0x416831: add [rax-0x73],cl; adc eax,0x11407; cmovne rax,rdx; repz ret
0x45a6d5: add [rax],al; add [rdi+rcx*1+0x48],cl; fimul [rbp+0x63]; ret
0x427134: mov ecx,[rsi-0x4]; mov [rdi-0x9],rdx; mov [rdi-0x4],ecx; ret
0x4221f3: mov ecx,[rsi-0x4]; mov [rdi-0x6],edx; mov [rdi-0x4],ecx; ret
0x474c77: add [rax],al; jne 0x474c86 <_dl_vsym+230>; add rsp,0x28; ret
0x43bc69: xor rcx,ds:0x28; jne 0x43bcf6 <fcntl+230>; add rsp,0x68; ret
0x472ea7: cmp rax,0xfffffffffffff001; jae 0x472eb0 <setitimer+16>; ret
0x40f5db: add [rax],al; mov [rip+0x292204],rax # 0x6a17e8 <mp_+8>; ret
0x426e95: mov ecx,[rsi-0x8]; mov [rdi-0xe],rdx; mov [rdi-0x8],rcx; ret
0x415cdd: add [rax-0x73],cl; adc eax,0x1d4cb; cmovne rax,rdx; repz ret
0x4275f3: psllq mm1,[rdi]; jg 0x427607 <__memcpy_ssse3_back+9367>; ret
0x436055: rex.B add al,0x88; rex.X add al,0x48; lea eax,[rdx+0x4]; ret
0x46f35f: mov [rsi],al; jne 0x46f348 <_itoa_word+40>; mov rax,rsi; ret
0x436096: mov eax,[rcx+0x5]; mov [rdx+0x5],eax; lea rax,[rdx+0x8]; ret
0x4216c8: mov [rdi-0x11],ebx; mov [rdi-0x9],r8; mov [rdi-0x4],edx; ret
0x4221d4: mov rdx,[rsi-0x8]; mov [rdi-0xe],rcx; mov [rdi-0x8],rdx; ret
0x4217c4: mov [rdi-0x11],ebx; mov [rdi-0x9],rcx; mov [rdi-0x1],dl; ret
0x40df5b: add [rax],0x0; add [rax],al; mov rax,0xffffffffffffffff; ret
0x435fe7: mov eax,[rcx+0x8]; mov [rdx+0x8],rax; lea rax,[rdx+0xf]; ret
0x436157: mov eax,[rcx+0x7]; mov [rdx+0x7],rax; lea rax,[rdx+0xe]; ret
0x462335: cmp r8b,0x2f; je 0x46231f <is_dst+79>; xor eax,eax; repz ret
0x436066: rex.B add al,0x66; mov [rdx+0x4],eax; lea rax,[rdx+0x5]; ret
0x46ae2a: mov eax,[rip+0x239580] # 0x6a43b0 <_dl_tls_max_dtv_idx>; ret
0x461d28: add [rax],al; jne 0x461de9 <openat64+281>; add rsp,0x78; ret
0x436053: add cl,[rdx+0x42880441]; add al,0x48; lea eax,[rdx+0x4]; ret
0x40d782: jg 0x40d7bc <_IO_doallocbuf+60>; add [rcx+rcx*1-0xd],dh; ret
0x479a82: test eax,eax; jne 0x479a90 <__deregister_frame+16>; repz ret
0x43bc6a: xor ecx,ds:0x28; jne 0x43bcf6 <fcntl+230>; add rsp,0x68; ret
0x46b37c: add [rax],al; cmp rax,0xffffffffffffffff; cmove rax,rdx; ret
0x48f245: and bh,[rsi-0x5e0466e]; xchg [rsp+rax*1+0x6fa9ce9d],esp; ret
0x4223d5: mov edx,[rsi-0x8]; mov [rdi-0xf],rcx; mov [rdi-0x8],rdx; ret
